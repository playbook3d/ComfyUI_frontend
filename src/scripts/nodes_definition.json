{
  "KSampler": {
      "input": {
          "required": {
              "model": [
                  "MODEL",
                  {
                      "tooltip": "The model used for denoising the input latent."
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "The random seed used for creating the noise."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "The number of steps used in the denoising process."
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01,
                      "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ],
                  {
                      "tooltip": "The scheduler controls how noise is gradually removed to form the image."
                  }
              ],
              "positive": [
                  "CONDITIONING",
                  {
                      "tooltip": "The conditioning describing the attributes you want to include in the image."
                  }
              ],
              "negative": [
                  "CONDITIONING",
                  {
                      "tooltip": "The conditioning describing the attributes you want to exclude from the image."
                  }
              ],
              "latent_image": [
                  "LATENT",
                  {
                      "tooltip": "The latent image to denoise."
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "denoise"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSampler",
      "display_name": "KSampler",
      "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
      "python_module": "nodes",
      "category": "sampling",
      "output_node": false,
      "output_tooltips": [
          "The denoised latent."
      ]
  },
  "CheckpointLoaderSimple": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ],
                  {
                      "tooltip": "The name of the checkpoint (model) to load."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "name": "CheckpointLoaderSimple",
      "display_name": "Load Checkpoint",
      "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false,
      "output_tooltips": [
          "The model used for denoising latents.",
          "The CLIP model used for encoding text prompts.",
          "The VAE model used for encoding and decoding images to and from latent space."
      ]
  },
  "CLIPTextEncode": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true,
                      "tooltip": "The text to be encoded."
                  }
              ],
              "clip": [
                  "CLIP",
                  {
                      "tooltip": "The CLIP model used for encoding the text."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "clip"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncode",
      "display_name": "CLIP Text Encode (Prompt)",
      "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false,
      "output_tooltips": [
          "A conditioning containing the embedded text used to guide the diffusion model."
      ]
  },
  "CLIPSetLastLayer": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "stop_at_clip_layer": [
                  "INT",
                  {
                      "default": -1,
                      "min": -24,
                      "max": -1,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "stop_at_clip_layer"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPSetLastLayer",
      "display_name": "CLIP Set Last Layer",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "VAEDecode": {
      "input": {
          "required": {
              "samples": [
                  "LATENT",
                  {
                      "tooltip": "The latent to be decoded."
                  }
              ],
              "vae": [
                  "VAE",
                  {
                      "tooltip": "The VAE model used for decoding the latent."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "vae"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "VAEDecode",
      "display_name": "VAE Decode",
      "description": "Decodes latent images back into pixel space images.",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false,
      "output_tooltips": [
          "The decoded image."
      ]
  },
  "VAEEncode": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "vae"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VAEEncode",
      "display_name": "VAE Encode",
      "description": "",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false
  },
  "VAEEncodeForInpaint": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "mask": [
                  "MASK"
              ],
              "grow_mask_by": [
                  "INT",
                  {
                      "default": 6,
                      "min": 0,
                      "max": 64,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "vae",
              "mask",
              "grow_mask_by"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VAEEncodeForInpaint",
      "display_name": "VAE Encode (for Inpainting)",
      "description": "",
      "python_module": "nodes",
      "category": "latent/inpaint",
      "output_node": false
  },
  "VAELoader": {
      "input": {
          "required": {
              "vae_name": [
                  [
                      "YOZORA.vae.pt",
                      "ae.safetensors",
                      "mochi.safetensors",
                      "mochi_preview_vae_encoder_b16.safetensors",
                      "sdxl_vae.safetensors",
                      "vae-ft-mse-840000-ema-pruned.ckpt"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "vae_name"
          ]
      },
      "output": [
          "VAE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VAE"
      ],
      "name": "VAELoader",
      "display_name": "Load VAE",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "EmptyLatentImage": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 16384,
                      "step": 8,
                      "tooltip": "The width of the latent images in pixels."
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 16384,
                      "step": 8,
                      "tooltip": "The height of the latent images in pixels."
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "tooltip": "The number of latent images in the batch."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "EmptyLatentImage",
      "display_name": "Empty Latent Image",
      "description": "Create a new batch of empty latent images to be denoised via sampling.",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false,
      "output_tooltips": [
          "The empty latent image batch."
      ]
  },
  "LatentUpscale": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "bislerp"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_method",
              "width",
              "height",
              "crop"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentUpscale",
      "display_name": "Upscale Latent",
      "description": "",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false
  },
  "LatentUpscaleBy": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "bislerp"
                  ]
              ],
              "scale_by": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 0.01,
                      "max": 8.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_method",
              "scale_by"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentUpscaleBy",
      "display_name": "Upscale Latent By",
      "description": "",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false
  },
  "LatentFromBatch": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "batch_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 63
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "batch_index",
              "length"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentFromBatch",
      "display_name": "Latent From Batch",
      "description": "",
      "python_module": "nodes",
      "category": "latent/batch",
      "output_node": false
  },
  "RepeatLatentBatch": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "amount": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "amount"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RepeatLatentBatch",
      "display_name": "Repeat Latent Batch",
      "description": "",
      "python_module": "nodes",
      "category": "latent/batch",
      "output_node": false
  },
  "SaveImage": {
      "input": {
          "required": {
              "images": [
                  "IMAGE",
                  {
                      "tooltip": "The images to save."
                  }
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI",
                      "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveImage",
      "display_name": "Save Image",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "nodes",
      "category": "image",
      "output_node": true
  },
  "PreviewImage": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "PreviewImage",
      "display_name": "Preview Image",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "nodes",
      "category": "image",
      "output_node": true
  },
  "LoadImage": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png"
                  ],
                  {
                      "image_upload": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "LoadImage",
      "display_name": "Load Image",
      "description": "",
      "python_module": "nodes",
      "category": "image",
      "output_node": false
  },
  "LoadImageMask": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png"
                  ],
                  {
                      "image_upload": true
                  }
              ],
              "channel": [
                  [
                      "alpha",
                      "red",
                      "green",
                      "blue"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "channel"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "LoadImageMask",
      "display_name": "Load Image (as Mask)",
      "description": "",
      "python_module": "nodes",
      "category": "mask",
      "output_node": false
  },
  "ImageScale": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_method",
              "width",
              "height",
              "crop"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageScale",
      "display_name": "Upscale Image",
      "description": "",
      "python_module": "nodes",
      "category": "image/upscaling",
      "output_node": false
  },
  "ImageScaleBy": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "scale_by": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 8.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_method",
              "scale_by"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageScaleBy",
      "display_name": "Upscale Image By",
      "description": "",
      "python_module": "nodes",
      "category": "image/upscaling",
      "output_node": false
  },
  "ImageInvert": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageInvert",
      "display_name": "Invert Image",
      "description": "",
      "python_module": "nodes",
      "category": "image",
      "output_node": false
  },
  "ImageBatch": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatch",
      "display_name": "Batch Images",
      "description": "",
      "python_module": "nodes",
      "category": "image",
      "output_node": false
  },
  "ImagePadForOutpaint": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "left": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "top": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "right": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "bottom": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "feathering": [
                  "INT",
                  {
                      "default": 40,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "left",
              "top",
              "right",
              "bottom",
              "feathering"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImagePadForOutpaint",
      "display_name": "Pad Image for Outpainting",
      "description": "",
      "python_module": "nodes",
      "category": "image",
      "output_node": false
  },
  "EmptyImage": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "color": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16777215,
                      "step": 1,
                      "display": "color"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "batch_size",
              "color"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "EmptyImage",
      "display_name": "EmptyImage",
      "description": "",
      "python_module": "nodes",
      "category": "image",
      "output_node": false
  },
  "ConditioningAverage": {
      "input": {
          "required": {
              "conditioning_to": [
                  "CONDITIONING"
              ],
              "conditioning_from": [
                  "CONDITIONING"
              ],
              "conditioning_to_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_to",
              "conditioning_from",
              "conditioning_to_strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningAverage",
      "display_name": "ConditioningAverage",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningCombine": {
      "input": {
          "required": {
              "conditioning_1": [
                  "CONDITIONING"
              ],
              "conditioning_2": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_1",
              "conditioning_2"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningCombine",
      "display_name": "Conditioning (Combine)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningConcat": {
      "input": {
          "required": {
              "conditioning_to": [
                  "CONDITIONING"
              ],
              "conditioning_from": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_to",
              "conditioning_from"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningConcat",
      "display_name": "Conditioning (Concat)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningSetArea": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "width": [
                  "INT",
                  {
                      "default": 64,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 64,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "width",
              "height",
              "x",
              "y",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetArea",
      "display_name": "Conditioning (Set Area)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningSetAreaPercentage": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "width": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "height": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "x": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "width",
              "height",
              "x",
              "y",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetAreaPercentage",
      "display_name": "Conditioning (Set Area with Percentage)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningSetAreaStrength": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetAreaStrength",
      "display_name": "ConditioningSetAreaStrength",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ConditioningSetMask": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "mask": [
                  "MASK"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "mask",
              "strength",
              "set_cond_area"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetMask",
      "display_name": "Conditioning (Set Mask)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "KSamplerAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "add_noise": [
                  [
                      "enable",
                      "disable"
                  ]
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "return_with_leftover_noise": [
                  [
                      "disable",
                      "enable"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "add_noise",
              "noise_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "start_at_step",
              "end_at_step",
              "return_with_leftover_noise"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSamplerAdvanced",
      "display_name": "KSampler (Advanced)",
      "description": "",
      "python_module": "nodes",
      "category": "sampling",
      "output_node": false
  },
  "SetLatentNoiseMask": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "mask"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "SetLatentNoiseMask",
      "display_name": "Set Latent Noise Mask",
      "description": "",
      "python_module": "nodes",
      "category": "latent/inpaint",
      "output_node": false
  },
  "LatentComposite": {
      "input": {
          "required": {
              "samples_to": [
                  "LATENT"
              ],
              "samples_from": [
                  "LATENT"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples_to",
              "samples_from",
              "x",
              "y",
              "feather"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentComposite",
      "display_name": "Latent Composite",
      "description": "",
      "python_module": "nodes",
      "category": "latent",
      "output_node": false
  },
  "LatentBlend": {
      "input": {
          "required": {
              "samples1": [
                  "LATENT"
              ],
              "samples2": [
                  "LATENT"
              ],
              "blend_factor": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples1",
              "samples2",
              "blend_factor"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentBlend",
      "display_name": "Latent Blend",
      "description": "",
      "python_module": "nodes",
      "category": "_for_testing",
      "output_node": false
  },
  "LatentRotate": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "rotation": [
                  [
                      "none",
                      "90 degrees",
                      "180 degrees",
                      "270 degrees"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "rotation"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentRotate",
      "display_name": "Rotate Latent",
      "description": "",
      "python_module": "nodes",
      "category": "latent/transform",
      "output_node": false
  },
  "LatentFlip": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "flip_method": [
                  [
                      "x-axis: vertically",
                      "y-axis: horizontally"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "flip_method"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentFlip",
      "display_name": "Flip Latent",
      "description": "",
      "python_module": "nodes",
      "category": "latent/transform",
      "output_node": false
  },
  "LatentCrop": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "width",
              "height",
              "x",
              "y"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentCrop",
      "display_name": "Crop Latent",
      "description": "",
      "python_module": "nodes",
      "category": "latent/transform",
      "output_node": false
  },
  "LoraLoader": {
      "input": {
          "required": {
              "model": [
                  "MODEL",
                  {
                      "tooltip": "The diffusion model the LoRA will be applied to."
                  }
              ],
              "clip": [
                  "CLIP",
                  {
                      "tooltip": "The CLIP model the LoRA will be applied to."
                  }
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ],
                  {
                      "tooltip": "The name of the LoRA."
                  }
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01,
                      "tooltip": "How strongly to modify the diffusion model. This value can be negative."
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01,
                      "tooltip": "How strongly to modify the CLIP model. This value can be negative."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "lora_name",
              "strength_model",
              "strength_clip"
          ]
      },
      "output": [
          "MODEL",
          "CLIP"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP"
      ],
      "name": "LoraLoader",
      "display_name": "Load LoRA",
      "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false,
      "output_tooltips": [
          "The modified diffusion model.",
          "The modified CLIP model."
      ]
  },
  "CLIPLoader": {
      "input": {
          "required": {
              "clip_name": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ],
              "type": [
                  [
                      "stable_diffusion",
                      "stable_cascade",
                      "sd3",
                      "stable_audio",
                      "mochi",
                      "ltxv"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_name",
              "type"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPLoader",
      "display_name": "Load CLIP",
      "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 / clip-g / clip-l\nstable_audio: t5\nmochi: t5",
      "python_module": "nodes",
      "category": "advanced/loaders",
      "output_node": false
  },
  "UNETLoader": {
      "input": {
          "required": {
              "unet_name": [
                  [
                      "IC-Light/iclight_sd15_fc.safetensors",
                      "flux1-dev-fp8.safetensors",
                      "flux1-dev.safetensors",
                      "flux1-schnell.safetensors"
                  ]
              ],
              "weight_dtype": [
                  [
                      "default",
                      "fp8_e4m3fn",
                      "fp8_e4m3fn_fast",
                      "fp8_e5m2"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "unet_name",
              "weight_dtype"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "UNETLoader",
      "display_name": "Load Diffusion Model",
      "description": "",
      "python_module": "nodes",
      "category": "advanced/loaders",
      "output_node": false
  },
  "DualCLIPLoader": {
      "input": {
          "required": {
              "clip_name1": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ],
              "clip_name2": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ],
              "type": [
                  [
                      "sdxl",
                      "sd3",
                      "flux"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_name1",
              "clip_name2",
              "type"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "DualCLIPLoader",
      "display_name": "DualCLIPLoader",
      "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5",
      "python_module": "nodes",
      "category": "advanced/loaders",
      "output_node": false
  },
  "CLIPVisionEncode": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "image": [
                  "IMAGE"
              ],
              "crop": [
                  [
                      "center",
                      "none"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "image",
              "crop"
          ]
      },
      "output": [
          "CLIP_VISION_OUTPUT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP_VISION_OUTPUT"
      ],
      "name": "CLIPVisionEncode",
      "display_name": "CLIP Vision Encode",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "StyleModelApply": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "style_model": [
                  "STYLE_MODEL"
              ],
              "clip_vision_output": [
                  "CLIP_VISION_OUTPUT"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "strength_type": [
                  [
                      "multiply"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "style_model",
              "clip_vision_output",
              "strength",
              "strength_type"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "StyleModelApply",
      "display_name": "Apply Style Model",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning/style_model",
      "output_node": false
  },
  "unCLIPConditioning": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "clip_vision_output": [
                  "CLIP_VISION_OUTPUT"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "noise_augmentation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "clip_vision_output",
              "strength",
              "noise_augmentation"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "unCLIPConditioning",
      "display_name": "unCLIPConditioning",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning",
      "output_node": false
  },
  "ControlNetApply": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "control_net",
              "image",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ControlNetApply",
      "display_name": "Apply ControlNet (OLD)",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning/controlnet",
      "output_node": false,
      "deprecated": true
  },
  "ControlNetApplyAdvanced": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "control_net",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "vae"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ControlNetApplyAdvanced",
      "display_name": "Apply ControlNet",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning/controlnet",
      "output_node": false
  },
  "ControlNetLoader": {
      "input": {
          "required": {
              "control_net_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "control_net_name"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ControlNetLoader",
      "display_name": "Load ControlNet Model",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "DiffControlNetLoader": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "control_net_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "control_net_name"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "DiffControlNetLoader",
      "display_name": "Load ControlNet Model (diff)",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "StyleModelLoader": {
      "input": {
          "required": {
              "style_model_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "style_model_name"
          ]
      },
      "output": [
          "STYLE_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STYLE_MODEL"
      ],
      "name": "StyleModelLoader",
      "display_name": "Load Style Model",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "CLIPVisionLoader": {
      "input": {
          "required": {
              "clip_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_name"
          ]
      },
      "output": [
          "CLIP_VISION"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP_VISION"
      ],
      "name": "CLIPVisionLoader",
      "display_name": "Load CLIP Vision",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "VAEDecodeTiled": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 128,
                      "max": 4096,
                      "step": 32
                  }
              ],
              "overlap": [
                  "INT",
                  {
                      "default": 64,
                      "min": 0,
                      "max": 4096,
                      "step": 32
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "vae",
              "tile_size",
              "overlap"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "VAEDecodeTiled",
      "display_name": "VAE Decode (Tiled)",
      "description": "",
      "python_module": "nodes",
      "category": "_for_testing",
      "output_node": false
  },
  "VAEEncodeTiled": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "vae",
              "tile_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VAEEncodeTiled",
      "display_name": "VAE Encode (Tiled)",
      "description": "",
      "python_module": "nodes",
      "category": "_for_testing",
      "output_node": false
  },
  "unCLIPCheckpointLoader": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "CLIP_VISION"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE",
          "CLIP_VISION"
      ],
      "name": "unCLIPCheckpointLoader",
      "display_name": "unCLIPCheckpointLoader",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "GLIGENLoader": {
      "input": {
          "required": {
              "gligen_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "gligen_name"
          ]
      },
      "output": [
          "GLIGEN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GLIGEN"
      ],
      "name": "GLIGENLoader",
      "display_name": "GLIGENLoader",
      "description": "",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false
  },
  "GLIGENTextBoxApply": {
      "input": {
          "required": {
              "conditioning_to": [
                  "CONDITIONING"
              ],
              "clip": [
                  "CLIP"
              ],
              "gligen_textbox_model": [
                  "GLIGEN"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 64,
                      "min": 8,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 64,
                      "min": 8,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_to",
              "clip",
              "gligen_textbox_model",
              "text",
              "width",
              "height",
              "x",
              "y"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "GLIGENTextBoxApply",
      "display_name": "GLIGENTextBoxApply",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning/gligen",
      "output_node": false
  },
  "InpaintModelConditioning": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "vae": [
                  "VAE"
              ],
              "pixels": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "vae",
              "pixels",
              "mask",
              "noise_mask"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "InpaintModelConditioning",
      "display_name": "InpaintModelConditioning",
      "description": "",
      "python_module": "nodes",
      "category": "conditioning/inpaint",
      "output_node": false
  },
  "CheckpointLoader": {
      "input": {
          "required": {
              "config_name": [
                  [
                      "anything_v3.yaml",
                      "v1-inference.yaml",
                      "v1-inference_clip_skip_2.yaml",
                      "v1-inference_clip_skip_2_fp16.yaml",
                      "v1-inference_fp16.yaml",
                      "v1-inpainting-inference.yaml",
                      "v2-inference-v.yaml",
                      "v2-inference-v_fp32.yaml",
                      "v2-inference.yaml",
                      "v2-inference_fp32.yaml",
                      "v2-inpainting-inference.yaml"
                  ]
              ],
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "config_name",
              "ckpt_name"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "name": "CheckpointLoader",
      "display_name": "Load Checkpoint With Config (DEPRECATED)",
      "description": "",
      "python_module": "nodes",
      "category": "advanced/loaders",
      "output_node": false,
      "deprecated": true
  },
  "DiffusersLoader": {
      "input": {
          "required": {
              "model_path": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "model_path"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "name": "DiffusersLoader",
      "display_name": "DiffusersLoader",
      "description": "",
      "python_module": "nodes",
      "category": "advanced/loaders/deprecated",
      "output_node": false
  },
  "LoadLatent": {
      "input": {
          "required": {
              "latent": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "latent"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LoadLatent",
      "display_name": "LoadLatent",
      "description": "",
      "python_module": "nodes",
      "category": "_for_testing",
      "output_node": false
  },
  "SaveLatent": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "latents/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "samples",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveLatent",
      "display_name": "SaveLatent",
      "description": "",
      "python_module": "nodes",
      "category": "_for_testing",
      "output_node": true
  },
  "ConditioningZeroOut": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningZeroOut",
      "display_name": "ConditioningZeroOut",
      "description": "",
      "python_module": "nodes",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "ConditioningSetTimestepRange": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "start": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "start",
              "end"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetTimestepRange",
      "display_name": "ConditioningSetTimestepRange",
      "description": "",
      "python_module": "nodes",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "LoraLoaderModelOnly": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "lora_name",
              "strength_model"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "LoraLoaderModelOnly",
      "display_name": "LoraLoaderModelOnly",
      "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
      "python_module": "nodes",
      "category": "loaders",
      "output_node": false,
      "output_tooltips": [
          "The modified diffusion model.",
          "The modified CLIP model."
      ]
  },
  "LatentAdd": {
      "input": {
          "required": {
              "samples1": [
                  "LATENT"
              ],
              "samples2": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples1",
              "samples2"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentAdd",
      "display_name": "LatentAdd",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced",
      "output_node": false
  },
  "LatentSubtract": {
      "input": {
          "required": {
              "samples1": [
                  "LATENT"
              ],
              "samples2": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples1",
              "samples2"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentSubtract",
      "display_name": "LatentSubtract",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced",
      "output_node": false
  },
  "LatentMultiply": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "multiplier"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentMultiply",
      "display_name": "LatentMultiply",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced",
      "output_node": false
  },
  "LatentInterpolate": {
      "input": {
          "required": {
              "samples1": [
                  "LATENT"
              ],
              "samples2": [
                  "LATENT"
              ],
              "ratio": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples1",
              "samples2",
              "ratio"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentInterpolate",
      "display_name": "LatentInterpolate",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced",
      "output_node": false
  },
  "LatentBatch": {
      "input": {
          "required": {
              "samples1": [
                  "LATENT"
              ],
              "samples2": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples1",
              "samples2"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentBatch",
      "display_name": "LatentBatch",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/batch",
      "output_node": false
  },
  "LatentBatchSeedBehavior": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "seed_behavior": [
                  [
                      "random",
                      "fixed"
                  ],
                  {
                      "default": "fixed"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "seed_behavior"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentBatchSeedBehavior",
      "display_name": "LatentBatchSeedBehavior",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced",
      "output_node": false
  },
  "LatentApplyOperation": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "operation": [
                  "LATENT_OPERATION"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "operation"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentApplyOperation",
      "display_name": "LatentApplyOperation",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced/operations",
      "output_node": false,
      "experimental": true
  },
  "LatentApplyOperationCFG": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "operation": [
                  "LATENT_OPERATION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "operation"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "LatentApplyOperationCFG",
      "display_name": "LatentApplyOperationCFG",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced/operations",
      "output_node": false,
      "experimental": true
  },
  "LatentOperationTonemapReinhard": {
      "input": {
          "required": {
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "multiplier"
          ]
      },
      "output": [
          "LATENT_OPERATION"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_OPERATION"
      ],
      "name": "LatentOperationTonemapReinhard",
      "display_name": "LatentOperationTonemapReinhard",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced/operations",
      "output_node": false,
      "experimental": true
  },
  "LatentOperationSharpen": {
      "input": {
          "required": {
              "sharpen_radius": [
                  "INT",
                  {
                      "default": 9,
                      "min": 1,
                      "max": 31,
                      "step": 1
                  }
              ],
              "sigma": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "alpha": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 5.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sharpen_radius",
              "sigma",
              "alpha"
          ]
      },
      "output": [
          "LATENT_OPERATION"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_OPERATION"
      ],
      "name": "LatentOperationSharpen",
      "display_name": "LatentOperationSharpen",
      "description": "",
      "python_module": "comfy_extras.nodes_latent",
      "category": "latent/advanced/operations",
      "output_node": false,
      "experimental": true
  },
  "HypernetworkLoader": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "hypernetwork_name": [
                  []
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "hypernetwork_name",
              "strength"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "HypernetworkLoader",
      "display_name": "HypernetworkLoader",
      "description": "",
      "python_module": "comfy_extras.nodes_hypernetwork",
      "category": "loaders",
      "output_node": false
  },
  "UpscaleModelLoader": {
      "input": {
          "required": {
              "model_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ]
      },
      "output": [
          "UPSCALE_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALE_MODEL"
      ],
      "name": "UpscaleModelLoader",
      "display_name": "Load Upscale Model",
      "description": "",
      "python_module": "comfy_extras.nodes_upscale_model",
      "category": "loaders",
      "output_node": false
  },
  "ImageUpscaleWithModel": {
      "input": {
          "required": {
              "upscale_model": [
                  "UPSCALE_MODEL"
              ],
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "upscale_model",
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageUpscaleWithModel",
      "display_name": "Upscale Image (using Model)",
      "description": "",
      "python_module": "comfy_extras.nodes_upscale_model",
      "category": "image/upscaling",
      "output_node": false
  },
  "ImageBlend": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "blend_factor": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blend_mode": [
                  [
                      "normal",
                      "multiply",
                      "screen",
                      "overlay",
                      "soft_light",
                      "difference"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "blend_factor",
              "blend_mode"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBlend",
      "display_name": "Image Blend",
      "description": "",
      "python_module": "comfy_extras.nodes_post_processing",
      "category": "image/postprocessing",
      "output_node": false
  },
  "ImageBlur": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "blur_radius": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 31,
                      "step": 1
                  }
              ],
              "sigma": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 10.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "blur_radius",
              "sigma"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBlur",
      "display_name": "Image Blur",
      "description": "",
      "python_module": "comfy_extras.nodes_post_processing",
      "category": "image/postprocessing",
      "output_node": false
  },
  "ImageQuantize": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "colors": [
                  "INT",
                  {
                      "default": 256,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "dither": [
                  [
                      "none",
                      "floyd-steinberg",
                      "bayer-2",
                      "bayer-4",
                      "bayer-8",
                      "bayer-16"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "colors",
              "dither"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageQuantize",
      "display_name": "Image Quantize",
      "description": "",
      "python_module": "comfy_extras.nodes_post_processing",
      "category": "image/postprocessing",
      "output_node": false
  },
  "ImageSharpen": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "sharpen_radius": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 31,
                      "step": 1
                  }
              ],
              "sigma": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "alpha": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 5.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "sharpen_radius",
              "sigma",
              "alpha"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageSharpen",
      "display_name": "Image Sharpen",
      "description": "",
      "python_module": "comfy_extras.nodes_post_processing",
      "category": "image/postprocessing",
      "output_node": false
  },
  "ImageScaleToTotalPixels": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "megapixels": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 16.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_method",
              "megapixels"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageScaleToTotalPixels",
      "display_name": "Scale Image to Total Pixels",
      "description": "",
      "python_module": "comfy_extras.nodes_post_processing",
      "category": "image/upscaling",
      "output_node": false
  },
  "LatentCompositeMasked": {
      "input": {
          "required": {
              "destination": [
                  "LATENT"
              ],
              "source": [
                  "LATENT"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "resize_source": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "x",
              "y",
              "resize_source"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentCompositeMasked",
      "display_name": "LatentCompositeMasked",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "latent",
      "output_node": false
  },
  "ImageCompositeMasked": {
      "input": {
          "required": {
              "destination": [
                  "IMAGE"
              ],
              "source": [
                  "IMAGE"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "resize_source": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "x",
              "y",
              "resize_source"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageCompositeMasked",
      "display_name": "ImageCompositeMasked",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "image",
      "output_node": false
  },
  "MaskToImage": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MaskToImage",
      "display_name": "Convert Mask to Image",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "ImageToMask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "channel": [
                  [
                      "red",
                      "green",
                      "blue",
                      "alpha"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "channel"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImageToMask",
      "display_name": "Convert Image to Mask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "ImageColorToMask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "color": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16777215,
                      "step": 1,
                      "display": "color"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "color"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImageColorToMask",
      "display_name": "ImageColorToMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "SolidMask": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "width",
              "height"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SolidMask",
      "display_name": "SolidMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "InvertMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "InvertMask",
      "display_name": "InvertMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "CropMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "x",
              "y",
              "width",
              "height"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "CropMask",
      "display_name": "CropMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "MaskComposite": {
      "input": {
          "required": {
              "destination": [
                  "MASK"
              ],
              "source": [
                  "MASK"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "operation": [
                  [
                      "multiply",
                      "add",
                      "subtract",
                      "and",
                      "or",
                      "xor"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "x",
              "y",
              "operation"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskComposite",
      "display_name": "MaskComposite",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "FeatherMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "left": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "top": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "right": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "bottom": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "left",
              "top",
              "right",
              "bottom"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "FeatherMask",
      "display_name": "FeatherMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "GrowMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "expand": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "tapered_corners": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "expand",
              "tapered_corners"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "GrowMask",
      "display_name": "GrowMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "ThresholdMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "value": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "value"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ThresholdMask",
      "display_name": "ThresholdMask",
      "description": "",
      "python_module": "comfy_extras.nodes_mask",
      "category": "mask",
      "output_node": false
  },
  "PorterDuffImageComposite": {
      "input": {
          "required": {
              "source": [
                  "IMAGE"
              ],
              "source_alpha": [
                  "MASK"
              ],
              "destination": [
                  "IMAGE"
              ],
              "destination_alpha": [
                  "MASK"
              ],
              "mode": [
                  [
                      "ADD",
                      "CLEAR",
                      "DARKEN",
                      "DST",
                      "DST_ATOP",
                      "DST_IN",
                      "DST_OUT",
                      "DST_OVER",
                      "LIGHTEN",
                      "MULTIPLY",
                      "OVERLAY",
                      "SCREEN",
                      "SRC",
                      "SRC_ATOP",
                      "SRC_IN",
                      "SRC_OUT",
                      "SRC_OVER",
                      "XOR"
                  ],
                  {
                      "default": "DST"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "source",
              "source_alpha",
              "destination",
              "destination_alpha",
              "mode"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "PorterDuffImageComposite",
      "display_name": "Porter-Duff Image Composite",
      "description": "",
      "python_module": "comfy_extras.nodes_compositing",
      "category": "mask/compositing",
      "output_node": false
  },
  "SplitImageWithAlpha": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "SplitImageWithAlpha",
      "display_name": "Split Image with Alpha",
      "description": "",
      "python_module": "comfy_extras.nodes_compositing",
      "category": "mask/compositing",
      "output_node": false
  },
  "JoinImageWithAlpha": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "alpha": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "alpha"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "JoinImageWithAlpha",
      "display_name": "Join Image with Alpha",
      "description": "",
      "python_module": "comfy_extras.nodes_compositing",
      "category": "mask/compositing",
      "output_node": false
  },
  "RebatchLatents": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RebatchLatents",
      "display_name": "Rebatch Latents",
      "description": "",
      "python_module": "comfy_extras.nodes_rebatch",
      "category": "latent/batch",
      "output_node": false
  },
  "RebatchImages": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "batch_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RebatchImages",
      "display_name": "Rebatch Images",
      "description": "",
      "python_module": "comfy_extras.nodes_rebatch",
      "category": "image/batch",
      "output_node": false
  },
  "ModelMergeSimple": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "ratio": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "ratio"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSimple",
      "display_name": "ModelMergeSimple",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "ModelMergeBlocks": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "input": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "out": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "input",
              "middle",
              "out"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeBlocks",
      "display_name": "ModelMergeBlocks",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "ModelMergeSubtract": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "multiplier"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSubtract",
      "display_name": "ModelMergeSubtract",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "ModelMergeAdd": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeAdd",
      "display_name": "ModelMergeAdd",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "CheckpointSave": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "checkpoints/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "vae",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "CheckpointSave",
      "display_name": "Save Checkpoint",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "CLIPMergeSimple": {
      "input": {
          "required": {
              "clip1": [
                  "CLIP"
              ],
              "clip2": [
                  "CLIP"
              ],
              "ratio": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip1",
              "clip2",
              "ratio"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPMergeSimple",
      "display_name": "CLIPMergeSimple",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "CLIPMergeSubtract": {
      "input": {
          "required": {
              "clip1": [
                  "CLIP"
              ],
              "clip2": [
                  "CLIP"
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip1",
              "clip2",
              "multiplier"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPMergeSubtract",
      "display_name": "CLIPMergeSubtract",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "CLIPMergeAdd": {
      "input": {
          "required": {
              "clip1": [
                  "CLIP"
              ],
              "clip2": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "clip1",
              "clip2"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPMergeAdd",
      "display_name": "CLIPMergeAdd",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": false
  },
  "CLIPSave": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "clip/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "clip",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "CLIPSave",
      "display_name": "CLIPSave",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "VAESave": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "vae/ComfyUI_vae"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "vae",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "VAESave",
      "display_name": "VAESave",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "ModelSave": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "diffusion_models/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "model",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ModelSave",
      "display_name": "ModelSave",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "TomePatchModel": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ratio": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ratio"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "TomePatchModel",
      "display_name": "TomePatchModel",
      "description": "",
      "python_module": "comfy_extras.nodes_tomesd",
      "category": "model_patches/unet",
      "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
      "input": {
          "required": {
              "ascore": [
                  "FLOAT",
                  {
                      "default": 6.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "clip": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "ascore",
              "width",
              "height",
              "text",
              "clip"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeSDXLRefiner",
      "display_name": "CLIPTextEncodeSDXLRefiner",
      "description": "",
      "python_module": "comfy_extras.nodes_clip_sdxl",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "CLIPTextEncodeSDXL": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "crop_w": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "crop_h": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "target_width": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "target_height": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "text_g": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "text_l": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "width",
              "height",
              "crop_w",
              "crop_h",
              "target_width",
              "target_height",
              "text_g",
              "text_l"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeSDXL",
      "display_name": "CLIPTextEncodeSDXL",
      "description": "",
      "python_module": "comfy_extras.nodes_clip_sdxl",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "Canny": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "low_threshold": [
                  "FLOAT",
                  {
                      "default": 0.4,
                      "min": 0.01,
                      "max": 0.99,
                      "step": 0.01
                  }
              ],
              "high_threshold": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0.01,
                      "max": 0.99,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "low_threshold",
              "high_threshold"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Canny",
      "display_name": "Canny",
      "description": "",
      "python_module": "comfy_extras.nodes_canny",
      "category": "image/preprocessors",
      "output_node": false
  },
  "FreeU": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "b1": [
                  "FLOAT",
                  {
                      "default": 1.1,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "b2": [
                  "FLOAT",
                  {
                      "default": 1.2,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "s1": [
                  "FLOAT",
                  {
                      "default": 0.9,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "s2": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "b1",
              "b2",
              "s1",
              "s2"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "FreeU",
      "display_name": "FreeU",
      "description": "",
      "python_module": "comfy_extras.nodes_freelunch",
      "category": "model_patches/unet",
      "output_node": false
  },
  "FreeU_V2": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "b1": [
                  "FLOAT",
                  {
                      "default": 1.3,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "b2": [
                  "FLOAT",
                  {
                      "default": 1.4,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "s1": [
                  "FLOAT",
                  {
                      "default": 0.9,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "s2": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "b1",
              "b2",
              "s1",
              "s2"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "FreeU_V2",
      "display_name": "FreeU_V2",
      "description": "",
      "python_module": "comfy_extras.nodes_freelunch",
      "category": "model_patches/unet",
      "output_node": false
  },
  "SamplerCustom": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "sampler": [
                  "SAMPLER"
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "latent_image": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "add_noise",
              "noise_seed",
              "cfg",
              "positive",
              "negative",
              "sampler",
              "sigmas",
              "latent_image"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "output",
          "denoised_output"
      ],
      "name": "SamplerCustom",
      "display_name": "SamplerCustom",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling",
      "output_node": false
  },
  "BasicScheduler": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "scheduler",
              "steps",
              "denoise"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "BasicScheduler",
      "display_name": "BasicScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "KarrasScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 14.614642,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.0291675,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "rho": [
                  "FLOAT",
                  {
                      "default": 7.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "sigma_max",
              "sigma_min",
              "rho"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "KarrasScheduler",
      "display_name": "KarrasScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "ExponentialScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 14.614642,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.0291675,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "sigma_max",
              "sigma_min"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "ExponentialScheduler",
      "display_name": "ExponentialScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "PolyexponentialScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 14.614642,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.0291675,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "rho": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "sigma_max",
              "sigma_min",
              "rho"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "PolyexponentialScheduler",
      "display_name": "PolyexponentialScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "LaplaceScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 14.614642,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.0291675,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "mu": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.1,
                      "round": false
                  }
              ],
              "beta": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "sigma_max",
              "sigma_min",
              "mu",
              "beta"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "LaplaceScheduler",
      "display_name": "LaplaceScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "VPScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "beta_d": [
                  "FLOAT",
                  {
                      "default": 19.9,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "beta_min": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 5000.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "eps_s": [
                  "FLOAT",
                  {
                      "default": 0.001,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.0001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "beta_d",
              "beta_min",
              "eps_s"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "VPScheduler",
      "display_name": "VPScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "BetaSamplingScheduler": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "alpha": [
                  "FLOAT",
                  {
                      "default": 0.6,
                      "min": 0.0,
                      "max": 50.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "beta": [
                  "FLOAT",
                  {
                      "default": 0.6,
                      "min": 0.0,
                      "max": 50.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "steps",
              "alpha",
              "beta"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "BetaSamplingScheduler",
      "display_name": "BetaSamplingScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "SDTurboScheduler": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "steps",
              "denoise"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "SDTurboScheduler",
      "display_name": "SDTurboScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "KSamplerSelect": {
      "input": {
          "required": {
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "sampler_name"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "KSamplerSelect",
      "display_name": "KSamplerSelect",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerEulerAncestral": {
      "input": {
          "required": {
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "eta",
              "s_noise"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerEulerAncestral",
      "display_name": "SamplerEulerAncestral",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
      "input": {
          "required": {
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "eta",
              "s_noise"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerEulerAncestralCFGPP",
      "display_name": "SamplerEulerAncestralCFG++",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerLMS": {
      "input": {
          "required": {
              "order": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 100
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "order"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerLMS",
      "display_name": "SamplerLMS",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
      "input": {
          "required": {
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "noise_device": [
                  [
                      "gpu",
                      "cpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "eta",
              "s_noise",
              "noise_device"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerDPMPP_3M_SDE",
      "display_name": "SamplerDPMPP_3M_SDE",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
      "input": {
          "required": {
              "solver_type": [
                  [
                      "midpoint",
                      "heun"
                  ]
              ],
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "noise_device": [
                  [
                      "gpu",
                      "cpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "solver_type",
              "eta",
              "s_noise",
              "noise_device"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerDPMPP_2M_SDE",
      "display_name": "SamplerDPMPP_2M_SDE",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerDPMPP_SDE": {
      "input": {
          "required": {
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "r": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "noise_device": [
                  [
                      "gpu",
                      "cpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "eta",
              "s_noise",
              "r",
              "noise_device"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerDPMPP_SDE",
      "display_name": "SamplerDPMPP_SDE",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
      "input": {
          "required": {
              "eta": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "eta",
              "s_noise"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerDPMPP_2S_Ancestral",
      "display_name": "SamplerDPMPP_2S_Ancestral",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerDPMAdaptative": {
      "input": {
          "required": {
              "order": [
                  "INT",
                  {
                      "default": 3,
                      "min": 2,
                      "max": 3
                  }
              ],
              "rtol": [
                  "FLOAT",
                  {
                      "default": 0.05,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "atol": [
                  "FLOAT",
                  {
                      "default": 0.0078,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "h_init": [
                  "FLOAT",
                  {
                      "default": 0.05,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "pcoeff": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "icoeff": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "dcoeff": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "accept_safety": [
                  "FLOAT",
                  {
                      "default": 0.81,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "eta": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ],
              "s_noise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "order",
              "rtol",
              "atol",
              "h_init",
              "pcoeff",
              "icoeff",
              "dcoeff",
              "accept_safety",
              "eta",
              "s_noise"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerDPMAdaptative",
      "display_name": "SamplerDPMAdaptative",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SplitSigmas": {
      "input": {
          "required": {
              "sigmas": [
                  "SIGMAS"
              ],
              "step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas",
              "step"
          ]
      },
      "output": [
          "SIGMAS",
          "SIGMAS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "high_sigmas",
          "low_sigmas"
      ],
      "name": "SplitSigmas",
      "display_name": "SplitSigmas",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/sigmas",
      "output_node": false
  },
  "SplitSigmasDenoise": {
      "input": {
          "required": {
              "sigmas": [
                  "SIGMAS"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas",
              "denoise"
          ]
      },
      "output": [
          "SIGMAS",
          "SIGMAS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "high_sigmas",
          "low_sigmas"
      ],
      "name": "SplitSigmasDenoise",
      "display_name": "SplitSigmasDenoise",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/sigmas",
      "output_node": false
  },
  "FlipSigmas": {
      "input": {
          "required": {
              "sigmas": [
                  "SIGMAS"
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "FlipSigmas",
      "display_name": "FlipSigmas",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/sigmas",
      "output_node": false
  },
  "CFGGuider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "cfg"
          ]
      },
      "output": [
          "GUIDER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GUIDER"
      ],
      "name": "CFGGuider",
      "display_name": "CFGGuider",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/guiders",
      "output_node": false
  },
  "DualCFGGuider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "cond1": [
                  "CONDITIONING"
              ],
              "cond2": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "cfg_conds": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "cfg_cond2_negative": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "cond1",
              "cond2",
              "negative",
              "cfg_conds",
              "cfg_cond2_negative"
          ]
      },
      "output": [
          "GUIDER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GUIDER"
      ],
      "name": "DualCFGGuider",
      "display_name": "DualCFGGuider",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/guiders",
      "output_node": false
  },
  "BasicGuider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "conditioning": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "conditioning"
          ]
      },
      "output": [
          "GUIDER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GUIDER"
      ],
      "name": "BasicGuider",
      "display_name": "BasicGuider",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/guiders",
      "output_node": false
  },
  "RandomNoise": {
      "input": {
          "required": {
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "noise_seed"
          ]
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "RandomNoise",
      "display_name": "RandomNoise",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/noise",
      "output_node": false
  },
  "DisableNoise": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "DisableNoise",
      "display_name": "DisableNoise",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling/noise",
      "output_node": false
  },
  "AddNoise": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "noise": [
                  "NOISE"
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "latent_image": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "noise",
              "sigmas",
              "latent_image"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "AddNoise",
      "display_name": "AddNoise",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "_for_testing/custom_sampling/noise",
      "output_node": false
  },
  "SamplerCustomAdvanced": {
      "input": {
          "required": {
              "noise": [
                  "NOISE"
              ],
              "guider": [
                  "GUIDER"
              ],
              "sampler": [
                  "SAMPLER"
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "latent_image": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "noise",
              "guider",
              "sampler",
              "sigmas",
              "latent_image"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "output",
          "denoised_output"
      ],
      "name": "SamplerCustomAdvanced",
      "display_name": "SamplerCustomAdvanced",
      "description": "",
      "python_module": "comfy_extras.nodes_custom_sampler",
      "category": "sampling/custom_sampling",
      "output_node": false
  },
  "HyperTile": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 256,
                      "min": 1,
                      "max": 2048
                  }
              ],
              "swap_size": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 128
                  }
              ],
              "max_depth": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10
                  }
              ],
              "scale_depth": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "tile_size",
              "swap_size",
              "max_depth",
              "scale_depth"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "HyperTile",
      "display_name": "HyperTile",
      "description": "",
      "python_module": "comfy_extras.nodes_hypertile",
      "category": "model_patches/unet",
      "output_node": false
  },
  "ModelSamplingDiscrete": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sampling": [
                  [
                      "eps",
                      "v_prediction",
                      "lcm",
                      "x0"
                  ]
              ],
              "zsnr": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sampling",
              "zsnr"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingDiscrete",
      "display_name": "ModelSamplingDiscrete",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingContinuousEDM": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sampling": [
                  [
                      "v_prediction",
                      "edm_playground_v2.5",
                      "eps"
                  ]
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 120.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.001,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.002,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sampling",
              "sigma_max",
              "sigma_min"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingContinuousEDM",
      "display_name": "ModelSamplingContinuousEDM",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingContinuousV": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sampling": [
                  [
                      "v_prediction"
                  ]
              ],
              "sigma_max": [
                  "FLOAT",
                  {
                      "default": 500.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.001,
                      "round": false
                  }
              ],
              "sigma_min": [
                  "FLOAT",
                  {
                      "default": 0.03,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sampling",
              "sigma_max",
              "sigma_min"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingContinuousV",
      "display_name": "ModelSamplingContinuousV",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingStableCascade": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "shift": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "shift"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingStableCascade",
      "display_name": "ModelSamplingStableCascade",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingSD3": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "shift": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "shift"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingSD3",
      "display_name": "ModelSamplingSD3",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingAuraFlow": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "shift": [
                  "FLOAT",
                  {
                      "default": 1.73,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "shift"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingAuraFlow",
      "display_name": "ModelSamplingAuraFlow",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "ModelSamplingFlux": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "max_shift": [
                  "FLOAT",
                  {
                      "default": 1.15,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "base_shift": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "max_shift",
              "base_shift",
              "width",
              "height"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingFlux",
      "display_name": "ModelSamplingFlux",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "RescaleCFG": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "multiplier"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "RescaleCFG",
      "display_name": "RescaleCFG",
      "description": "",
      "python_module": "comfy_extras.nodes_model_advanced",
      "category": "advanced/model",
      "output_node": false
  },
  "PatchModelAddDownscale": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "block_number": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 32,
                      "step": 1
                  }
              ],
              "downscale_factor": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.1,
                      "max": 9.0,
                      "step": 0.001
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 0.35,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "downscale_after_skip": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "downscale_method": [
                  [
                      "bicubic",
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bislerp"
                  ]
              ],
              "upscale_method": [
                  [
                      "bicubic",
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bislerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "block_number",
              "downscale_factor",
              "start_percent",
              "end_percent",
              "downscale_after_skip",
              "downscale_method",
              "upscale_method"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "PatchModelAddDownscale",
      "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
      "description": "",
      "python_module": "comfy_extras.nodes_model_downscale",
      "category": "model_patches/unet",
      "output_node": false
  },
  "ImageCrop": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "x",
              "y"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageCrop",
      "display_name": "Image Crop",
      "description": "",
      "python_module": "comfy_extras.nodes_images",
      "category": "image/transform",
      "output_node": false
  },
  "RepeatImageBatch": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "amount": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "amount"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RepeatImageBatch",
      "display_name": "RepeatImageBatch",
      "description": "",
      "python_module": "comfy_extras.nodes_images",
      "category": "image/batch",
      "output_node": false
  },
  "ImageFromBatch": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "batch_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4095
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "batch_index",
              "length"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageFromBatch",
      "display_name": "ImageFromBatch",
      "description": "",
      "python_module": "comfy_extras.nodes_images",
      "category": "image/batch",
      "output_node": false
  },
  "SaveAnimatedWEBP": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI"
                  }
              ],
              "fps": [
                  "FLOAT",
                  {
                      "default": 6.0,
                      "min": 0.01,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "lossless": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "quality": [
                  "INT",
                  {
                      "default": 80,
                      "min": 0,
                      "max": 100
                  }
              ],
              "method": [
                  [
                      "default",
                      "fastest",
                      "slowest"
                  ]
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "filename_prefix",
              "fps",
              "lossless",
              "quality",
              "method"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveAnimatedWEBP",
      "display_name": "SaveAnimatedWEBP",
      "description": "",
      "python_module": "comfy_extras.nodes_images",
      "category": "image/animation",
      "output_node": true
  },
  "SaveAnimatedPNG": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI"
                  }
              ],
              "fps": [
                  "FLOAT",
                  {
                      "default": 6.0,
                      "min": 0.01,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "compress_level": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 9
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "filename_prefix",
              "fps",
              "compress_level"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveAnimatedPNG",
      "display_name": "SaveAnimatedPNG",
      "description": "",
      "python_module": "comfy_extras.nodes_images",
      "category": "image/animation",
      "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name"
          ]
      },
      "output": [
          "MODEL",
          "CLIP_VISION",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP_VISION",
          "VAE"
      ],
      "name": "ImageOnlyCheckpointLoader",
      "display_name": "Image Only Checkpoint Loader (img2vid model)",
      "description": "",
      "python_module": "comfy_extras.nodes_video_model",
      "category": "loaders/video_models",
      "output_node": false
  },
  "SVD_img2vid_Conditioning": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 576,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "video_frames": [
                  "INT",
                  {
                      "default": 14,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "motion_bucket_id": [
                  "INT",
                  {
                      "default": 127,
                      "min": 1,
                      "max": 1023
                  }
              ],
              "fps": [
                  "INT",
                  {
                      "default": 6,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "augmentation_level": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "video_frames",
              "motion_bucket_id",
              "fps",
              "augmentation_level"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "SVD_img2vid_Conditioning",
      "display_name": "SVD_img2vid_Conditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_video_model",
      "category": "conditioning/video_models",
      "output_node": false
  },
  "VideoLinearCFGGuidance": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "min_cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "min_cfg"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "VideoLinearCFGGuidance",
      "display_name": "VideoLinearCFGGuidance",
      "description": "",
      "python_module": "comfy_extras.nodes_video_model",
      "category": "sampling/video_models",
      "output_node": false
  },
  "VideoTriangleCFGGuidance": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "min_cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "min_cfg"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "VideoTriangleCFGGuidance",
      "display_name": "VideoTriangleCFGGuidance",
      "description": "",
      "python_module": "comfy_extras.nodes_video_model",
      "category": "sampling/video_models",
      "output_node": false
  },
  "ImageOnlyCheckpointSave": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "vae": [
                  "VAE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "checkpoints/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip_vision",
              "vae",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImageOnlyCheckpointSave",
      "display_name": "ImageOnlyCheckpointSave",
      "description": "",
      "python_module": "comfy_extras.nodes_video_model",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "SelfAttentionGuidance": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": -2.0,
                      "max": 5.0,
                      "step": 0.01
                  }
              ],
              "blur_sigma": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "scale",
              "blur_sigma"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "SelfAttentionGuidance",
      "display_name": "Self-Attention Guidance",
      "description": "",
      "python_module": "comfy_extras.nodes_sag",
      "category": "_for_testing",
      "output_node": false
  },
  "PerpNeg": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "empty_conditioning": [
                  "CONDITIONING"
              ],
              "neg_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "empty_conditioning",
              "neg_scale"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "PerpNeg",
      "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
      "description": "",
      "python_module": "comfy_extras.nodes_perpneg",
      "category": "_for_testing",
      "output_node": false,
      "deprecated": true
  },
  "PerpNegGuider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "empty_conditioning": [
                  "CONDITIONING"
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "neg_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "empty_conditioning",
              "cfg",
              "neg_scale"
          ]
      },
      "output": [
          "GUIDER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GUIDER"
      ],
      "name": "PerpNegGuider",
      "display_name": "PerpNegGuider",
      "description": "",
      "python_module": "comfy_extras.nodes_perpneg",
      "category": "_for_testing",
      "output_node": false
  },
  "StableZero123_Conditioning": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "elevation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ],
              "azimuth": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "batch_size",
              "elevation",
              "azimuth"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "StableZero123_Conditioning",
      "display_name": "StableZero123_Conditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_stable3d",
      "category": "conditioning/3d_models",
      "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "elevation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ],
              "azimuth": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ],
              "elevation_batch_increment": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ],
              "azimuth_batch_increment": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "batch_size",
              "elevation",
              "azimuth",
              "elevation_batch_increment",
              "azimuth_batch_increment"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "StableZero123_Conditioning_Batched",
      "display_name": "StableZero123_Conditioning_Batched",
      "description": "",
      "python_module": "comfy_extras.nodes_stable3d",
      "category": "conditioning/3d_models",
      "output_node": false
  },
  "SV3D_Conditioning": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 576,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 576,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "video_frames": [
                  "INT",
                  {
                      "default": 21,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "elevation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -90.0,
                      "max": 90.0,
                      "step": 0.1,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "video_frames",
              "elevation"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "SV3D_Conditioning",
      "display_name": "SV3D_Conditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_stable3d",
      "category": "conditioning/3d_models",
      "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "scale_ratio": [
                  "FLOAT",
                  {
                      "default": 4.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "noise_augmentation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "positive",
              "negative",
              "scale_ratio",
              "noise_augmentation"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "SD_4XUpscale_Conditioning",
      "display_name": "SD_4XUpscale_Conditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_sdupscale",
      "category": "conditioning/upscale_diffusion",
      "output_node": false
  },
  "PhotoMakerLoader": {
      "input": {
          "required": {
              "photomaker_model_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "photomaker_model_name"
          ]
      },
      "output": [
          "PHOTOMAKER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PHOTOMAKER"
      ],
      "name": "PhotoMakerLoader",
      "display_name": "PhotoMakerLoader",
      "description": "",
      "python_module": "comfy_extras.nodes_photomaker",
      "category": "_for_testing/photomaker",
      "output_node": false
  },
  "PhotoMakerEncode": {
      "input": {
          "required": {
              "photomaker": [
                  "PHOTOMAKER"
              ],
              "image": [
                  "IMAGE"
              ],
              "clip": [
                  "CLIP"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true,
                      "default": "photograph of photomaker"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "photomaker",
              "image",
              "clip",
              "text"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "PhotoMakerEncode",
      "display_name": "PhotoMakerEncode",
      "description": "",
      "python_module": "comfy_extras.nodes_photomaker",
      "category": "_for_testing/photomaker",
      "output_node": false
  },
  "CLIPTextEncodeControlnet": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "conditioning": [
                  "CONDITIONING"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "conditioning",
              "text"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeControlnet",
      "display_name": "CLIPTextEncodeControlnet",
      "description": "",
      "python_module": "comfy_extras.nodes_cond",
      "category": "_for_testing/conditioning",
      "output_node": false
  },
  "Morphology": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "operation": [
                  [
                      "erode",
                      "dilate",
                      "open",
                      "close",
                      "gradient",
                      "bottom_hat",
                      "top_hat"
                  ]
              ],
              "kernel_size": [
                  "INT",
                  {
                      "default": 3,
                      "min": 3,
                      "max": 999,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "operation",
              "kernel_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Morphology",
      "display_name": "ImageMorphology",
      "description": "",
      "python_module": "comfy_extras.nodes_morphology",
      "category": "image/postprocessing",
      "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 256,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 256,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "compression": [
                  "INT",
                  {
                      "default": 42,
                      "min": 4,
                      "max": 128,
                      "step": 1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "compression",
              "batch_size"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "stage_c",
          "stage_b"
      ],
      "name": "StableCascade_EmptyLatentImage",
      "display_name": "StableCascade_EmptyLatentImage",
      "description": "",
      "python_module": "comfy_extras.nodes_stable_cascade",
      "category": "latent/stable_cascade",
      "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "stage_c": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "stage_c"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "StableCascade_StageB_Conditioning",
      "display_name": "StableCascade_StageB_Conditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_stable_cascade",
      "category": "conditioning/stable_cascade",
      "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "compression": [
                  "INT",
                  {
                      "default": 42,
                      "min": 4,
                      "max": 128,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae",
              "compression"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "stage_c",
          "stage_b"
      ],
      "name": "StableCascade_StageC_VAEEncode",
      "display_name": "StableCascade_StageC_VAEEncode",
      "description": "",
      "python_module": "comfy_extras.nodes_stable_cascade",
      "category": "latent/stable_cascade",
      "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae"
          ]
      },
      "output": [
          "IMAGE",
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "controlnet_input",
          "stage_c",
          "stage_b"
      ],
      "name": "StableCascade_SuperResolutionControlnet",
      "display_name": "StableCascade_SuperResolutionControlnet",
      "description": "",
      "python_module": "comfy_extras.nodes_stable_cascade",
      "category": "_for_testing/stable_cascade",
      "output_node": false,
      "experimental": true
  },
  "DifferentialDiffusion": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "DifferentialDiffusion",
      "display_name": "Differential Diffusion",
      "description": "",
      "python_module": "comfy_extras.nodes_differential_diffusion",
      "category": "_for_testing",
      "output_node": false
  },
  "InstructPixToPixConditioning": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "vae": [
                  "VAE"
              ],
              "pixels": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "vae",
              "pixels"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "InstructPixToPixConditioning",
      "display_name": "InstructPixToPixConditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_ip2p",
      "category": "conditioning/instructpix2pix",
      "output_node": false
  },
  "ModelMergeSD1": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "time_embed.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "label_emb.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "out.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "time_embed.",
              "label_emb.",
              "input_blocks.0.",
              "input_blocks.1.",
              "input_blocks.2.",
              "input_blocks.3.",
              "input_blocks.4.",
              "input_blocks.5.",
              "input_blocks.6.",
              "input_blocks.7.",
              "input_blocks.8.",
              "input_blocks.9.",
              "input_blocks.10.",
              "input_blocks.11.",
              "middle_block.0.",
              "middle_block.1.",
              "middle_block.2.",
              "output_blocks.0.",
              "output_blocks.1.",
              "output_blocks.2.",
              "output_blocks.3.",
              "output_blocks.4.",
              "output_blocks.5.",
              "output_blocks.6.",
              "output_blocks.7.",
              "output_blocks.8.",
              "output_blocks.9.",
              "output_blocks.10.",
              "output_blocks.11.",
              "out."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSD1",
      "display_name": "ModelMergeSD1",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeSD2": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "time_embed.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "label_emb.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "out.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "time_embed.",
              "label_emb.",
              "input_blocks.0.",
              "input_blocks.1.",
              "input_blocks.2.",
              "input_blocks.3.",
              "input_blocks.4.",
              "input_blocks.5.",
              "input_blocks.6.",
              "input_blocks.7.",
              "input_blocks.8.",
              "input_blocks.9.",
              "input_blocks.10.",
              "input_blocks.11.",
              "middle_block.0.",
              "middle_block.1.",
              "middle_block.2.",
              "output_blocks.0.",
              "output_blocks.1.",
              "output_blocks.2.",
              "output_blocks.3.",
              "output_blocks.4.",
              "output_blocks.5.",
              "output_blocks.6.",
              "output_blocks.7.",
              "output_blocks.8.",
              "output_blocks.9.",
              "output_blocks.10.",
              "output_blocks.11.",
              "out."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSD2",
      "display_name": "ModelMergeSD2",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeSDXL": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "time_embed.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "label_emb.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.4": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.5": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.6": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.7": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "input_blocks.8": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "middle_block.2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.4": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.5": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.6": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.7": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "output_blocks.8": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "out.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "time_embed.",
              "label_emb.",
              "input_blocks.0",
              "input_blocks.1",
              "input_blocks.2",
              "input_blocks.3",
              "input_blocks.4",
              "input_blocks.5",
              "input_blocks.6",
              "input_blocks.7",
              "input_blocks.8",
              "middle_block.0",
              "middle_block.1",
              "middle_block.2",
              "output_blocks.0",
              "output_blocks.1",
              "output_blocks.2",
              "output_blocks.3",
              "output_blocks.4",
              "output_blocks.5",
              "output_blocks.6",
              "output_blocks.7",
              "output_blocks.8",
              "out."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSDXL",
      "display_name": "ModelMergeSDXL",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeSD3_2B": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "pos_embed.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "x_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "context_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "y_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "final_layer.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "pos_embed.",
              "x_embedder.",
              "context_embedder.",
              "y_embedder.",
              "t_embedder.",
              "joint_blocks.0.",
              "joint_blocks.1.",
              "joint_blocks.2.",
              "joint_blocks.3.",
              "joint_blocks.4.",
              "joint_blocks.5.",
              "joint_blocks.6.",
              "joint_blocks.7.",
              "joint_blocks.8.",
              "joint_blocks.9.",
              "joint_blocks.10.",
              "joint_blocks.11.",
              "joint_blocks.12.",
              "joint_blocks.13.",
              "joint_blocks.14.",
              "joint_blocks.15.",
              "joint_blocks.16.",
              "joint_blocks.17.",
              "joint_blocks.18.",
              "joint_blocks.19.",
              "joint_blocks.20.",
              "joint_blocks.21.",
              "joint_blocks.22.",
              "joint_blocks.23.",
              "final_layer."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSD3_2B",
      "display_name": "ModelMergeSD3_2B",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeAuraflow": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "init_x_linear.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "positional_encoding": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cond_seq_linear.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "register_tokens": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_layers.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_layers.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_layers.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_layers.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.24.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.25.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.26.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.27.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.28.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.29.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.30.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_layers.31.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "modF.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "final_linear.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "init_x_linear.",
              "positional_encoding",
              "cond_seq_linear.",
              "register_tokens",
              "t_embedder.",
              "double_layers.0.",
              "double_layers.1.",
              "double_layers.2.",
              "double_layers.3.",
              "single_layers.0.",
              "single_layers.1.",
              "single_layers.2.",
              "single_layers.3.",
              "single_layers.4.",
              "single_layers.5.",
              "single_layers.6.",
              "single_layers.7.",
              "single_layers.8.",
              "single_layers.9.",
              "single_layers.10.",
              "single_layers.11.",
              "single_layers.12.",
              "single_layers.13.",
              "single_layers.14.",
              "single_layers.15.",
              "single_layers.16.",
              "single_layers.17.",
              "single_layers.18.",
              "single_layers.19.",
              "single_layers.20.",
              "single_layers.21.",
              "single_layers.22.",
              "single_layers.23.",
              "single_layers.24.",
              "single_layers.25.",
              "single_layers.26.",
              "single_layers.27.",
              "single_layers.28.",
              "single_layers.29.",
              "single_layers.30.",
              "single_layers.31.",
              "modF.",
              "final_linear."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeAuraflow",
      "display_name": "ModelMergeAuraflow",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeFlux1": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "img_in.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "time_in.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "guidance_in": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "vector_in.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "txt_in.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.24.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.25.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.26.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.27.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.28.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.29.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.30.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.31.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.32.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.33.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.34.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.35.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.36.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.37.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "final_layer.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "img_in.",
              "time_in.",
              "guidance_in",
              "vector_in.",
              "txt_in.",
              "double_blocks.0.",
              "double_blocks.1.",
              "double_blocks.2.",
              "double_blocks.3.",
              "double_blocks.4.",
              "double_blocks.5.",
              "double_blocks.6.",
              "double_blocks.7.",
              "double_blocks.8.",
              "double_blocks.9.",
              "double_blocks.10.",
              "double_blocks.11.",
              "double_blocks.12.",
              "double_blocks.13.",
              "double_blocks.14.",
              "double_blocks.15.",
              "double_blocks.16.",
              "double_blocks.17.",
              "double_blocks.18.",
              "single_blocks.0.",
              "single_blocks.1.",
              "single_blocks.2.",
              "single_blocks.3.",
              "single_blocks.4.",
              "single_blocks.5.",
              "single_blocks.6.",
              "single_blocks.7.",
              "single_blocks.8.",
              "single_blocks.9.",
              "single_blocks.10.",
              "single_blocks.11.",
              "single_blocks.12.",
              "single_blocks.13.",
              "single_blocks.14.",
              "single_blocks.15.",
              "single_blocks.16.",
              "single_blocks.17.",
              "single_blocks.18.",
              "single_blocks.19.",
              "single_blocks.20.",
              "single_blocks.21.",
              "single_blocks.22.",
              "single_blocks.23.",
              "single_blocks.24.",
              "single_blocks.25.",
              "single_blocks.26.",
              "single_blocks.27.",
              "single_blocks.28.",
              "single_blocks.29.",
              "single_blocks.30.",
              "single_blocks.31.",
              "single_blocks.32.",
              "single_blocks.33.",
              "single_blocks.34.",
              "single_blocks.35.",
              "single_blocks.36.",
              "single_blocks.37.",
              "final_layer."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeFlux1",
      "display_name": "ModelMergeFlux1",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeSD35_Large": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "pos_embed.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "x_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "context_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "y_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.24.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.25.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.26.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.27.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.28.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.29.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.30.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.31.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.32.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.33.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.34.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.35.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.36.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "joint_blocks.37.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "final_layer.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "pos_embed.",
              "x_embedder.",
              "context_embedder.",
              "y_embedder.",
              "t_embedder.",
              "joint_blocks.0.",
              "joint_blocks.1.",
              "joint_blocks.2.",
              "joint_blocks.3.",
              "joint_blocks.4.",
              "joint_blocks.5.",
              "joint_blocks.6.",
              "joint_blocks.7.",
              "joint_blocks.8.",
              "joint_blocks.9.",
              "joint_blocks.10.",
              "joint_blocks.11.",
              "joint_blocks.12.",
              "joint_blocks.13.",
              "joint_blocks.14.",
              "joint_blocks.15.",
              "joint_blocks.16.",
              "joint_blocks.17.",
              "joint_blocks.18.",
              "joint_blocks.19.",
              "joint_blocks.20.",
              "joint_blocks.21.",
              "joint_blocks.22.",
              "joint_blocks.23.",
              "joint_blocks.24.",
              "joint_blocks.25.",
              "joint_blocks.26.",
              "joint_blocks.27.",
              "joint_blocks.28.",
              "joint_blocks.29.",
              "joint_blocks.30.",
              "joint_blocks.31.",
              "joint_blocks.32.",
              "joint_blocks.33.",
              "joint_blocks.34.",
              "joint_blocks.35.",
              "joint_blocks.36.",
              "joint_blocks.37.",
              "final_layer."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeSD35_Large",
      "display_name": "ModelMergeSD35_Large",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeMochiPreview": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "pos_frequencies.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t5_y_embedder.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "t5_yproj.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.24.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.25.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.26.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.27.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.28.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.29.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.30.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.31.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.32.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.33.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.34.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.35.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.36.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.37.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.38.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.39.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.40.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.41.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.42.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.43.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.44.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.45.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.46.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "blocks.47.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "final_layer.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "pos_frequencies.",
              "t_embedder.",
              "t5_y_embedder.",
              "t5_yproj.",
              "blocks.0.",
              "blocks.1.",
              "blocks.2.",
              "blocks.3.",
              "blocks.4.",
              "blocks.5.",
              "blocks.6.",
              "blocks.7.",
              "blocks.8.",
              "blocks.9.",
              "blocks.10.",
              "blocks.11.",
              "blocks.12.",
              "blocks.13.",
              "blocks.14.",
              "blocks.15.",
              "blocks.16.",
              "blocks.17.",
              "blocks.18.",
              "blocks.19.",
              "blocks.20.",
              "blocks.21.",
              "blocks.22.",
              "blocks.23.",
              "blocks.24.",
              "blocks.25.",
              "blocks.26.",
              "blocks.27.",
              "blocks.28.",
              "blocks.29.",
              "blocks.30.",
              "blocks.31.",
              "blocks.32.",
              "blocks.33.",
              "blocks.34.",
              "blocks.35.",
              "blocks.36.",
              "blocks.37.",
              "blocks.38.",
              "blocks.39.",
              "blocks.40.",
              "blocks.41.",
              "blocks.42.",
              "blocks.43.",
              "blocks.44.",
              "blocks.45.",
              "blocks.46.",
              "blocks.47.",
              "final_layer."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeMochiPreview",
      "display_name": "ModelMergeMochiPreview",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "ModelMergeLTXV": {
      "input": {
          "required": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ],
              "patchify_proj.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adaln_single.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "caption_projection.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.19.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.20.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.21.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.22.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.23.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.24.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.25.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.26.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "transformer_blocks.27.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "scale_shift_table": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "proj_out.": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model1",
              "model2",
              "patchify_proj.",
              "adaln_single.",
              "caption_projection.",
              "transformer_blocks.0.",
              "transformer_blocks.1.",
              "transformer_blocks.2.",
              "transformer_blocks.3.",
              "transformer_blocks.4.",
              "transformer_blocks.5.",
              "transformer_blocks.6.",
              "transformer_blocks.7.",
              "transformer_blocks.8.",
              "transformer_blocks.9.",
              "transformer_blocks.10.",
              "transformer_blocks.11.",
              "transformer_blocks.12.",
              "transformer_blocks.13.",
              "transformer_blocks.14.",
              "transformer_blocks.15.",
              "transformer_blocks.16.",
              "transformer_blocks.17.",
              "transformer_blocks.18.",
              "transformer_blocks.19.",
              "transformer_blocks.20.",
              "transformer_blocks.21.",
              "transformer_blocks.22.",
              "transformer_blocks.23.",
              "transformer_blocks.24.",
              "transformer_blocks.25.",
              "transformer_blocks.26.",
              "transformer_blocks.27.",
              "scale_shift_table",
              "proj_out."
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelMergeLTXV",
      "display_name": "ModelMergeLTXV",
      "description": "",
      "python_module": "comfy_extras.nodes_model_merging_model_specific",
      "category": "advanced/model_merging/model_specific",
      "output_node": false
  },
  "PerturbedAttentionGuidance": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "scale"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "PerturbedAttentionGuidance",
      "display_name": "PerturbedAttentionGuidance",
      "description": "",
      "python_module": "comfy_extras.nodes_pag",
      "category": "model_patches/unet",
      "output_node": false
  },
  "AlignYourStepsScheduler": {
      "input": {
          "required": {
              "model_type": [
                  [
                      "SD1",
                      "SDXL",
                      "SVD"
                  ]
              ],
              "steps": [
                  "INT",
                  {
                      "default": 10,
                      "min": 10,
                      "max": 10000
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_type",
              "steps",
              "denoise"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "AlignYourStepsScheduler",
      "display_name": "AlignYourStepsScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_align_your_steps",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "UNetSelfAttentionMultiply": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "q": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "k": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "v": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "out": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "q",
              "k",
              "v",
              "out"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "UNetSelfAttentionMultiply",
      "display_name": "UNetSelfAttentionMultiply",
      "description": "",
      "python_module": "comfy_extras.nodes_attention_multiply",
      "category": "_for_testing/attention_experiments",
      "output_node": false
  },
  "UNetCrossAttentionMultiply": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "q": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "k": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "v": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "out": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "q",
              "k",
              "v",
              "out"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "UNetCrossAttentionMultiply",
      "display_name": "UNetCrossAttentionMultiply",
      "description": "",
      "python_module": "comfy_extras.nodes_attention_multiply",
      "category": "_for_testing/attention_experiments",
      "output_node": false
  },
  "CLIPAttentionMultiply": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "q": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "k": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "v": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "out": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "q",
              "k",
              "v",
              "out"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "CLIPAttentionMultiply",
      "display_name": "CLIPAttentionMultiply",
      "description": "",
      "python_module": "comfy_extras.nodes_attention_multiply",
      "category": "_for_testing/attention_experiments",
      "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "self_structural": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "self_temporal": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "cross_structural": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "cross_temporal": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "self_structural",
              "self_temporal",
              "cross_structural",
              "cross_temporal"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "UNetTemporalAttentionMultiply",
      "display_name": "UNetTemporalAttentionMultiply",
      "description": "",
      "python_module": "comfy_extras.nodes_attention_multiply",
      "category": "_for_testing/attention_experiments",
      "output_node": false
  },
  "SamplerLCMUpscale": {
      "input": {
          "required": {
              "scale_ratio": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "scale_steps": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "upscale_method": [
                  [
                      "bislerp",
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_ratio",
              "scale_steps",
              "upscale_method"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerLCMUpscale",
      "display_name": "SamplerLCMUpscale",
      "description": "",
      "python_module": "comfy_extras.nodes_advanced_samplers",
      "category": "sampling/custom_sampling/samplers",
      "output_node": false
  },
  "SamplerEulerCFGpp": {
      "input": {
          "required": {
              "version": [
                  [
                      "regular",
                      "alternative"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "version"
          ]
      },
      "output": [
          "SAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAMPLER"
      ],
      "name": "SamplerEulerCFGpp",
      "display_name": "SamplerEulerCFG++",
      "description": "",
      "python_module": "comfy_extras.nodes_advanced_samplers",
      "category": "_for_testing",
      "output_node": false
  },
  "WebcamCapture": {
      "input": {
          "required": {
              "image": [
                  "WEBCAM",
                  {}
              ],
              "width": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "capture_on_queue": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "capture_on_queue"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "WebcamCapture",
      "display_name": "Webcam Capture",
      "description": "",
      "python_module": "comfy_extras.nodes_webcam",
      "category": "image",
      "output_node": false
  },
  "EmptyLatentAudio": {
      "input": {
          "required": {
              "seconds": [
                  "FLOAT",
                  {
                      "default": 47.6,
                      "min": 1.0,
                      "max": 1000.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "tooltip": "The number of latent images in the batch."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seconds",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "EmptyLatentAudio",
      "display_name": "EmptyLatentAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "latent/audio",
      "output_node": false
  },
  "VAEEncodeAudio": {
      "input": {
          "required": {
              "audio": [
                  "AUDIO"
              ],
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "audio",
              "vae"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VAEEncodeAudio",
      "display_name": "VAEEncodeAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "latent/audio",
      "output_node": false
  },
  "VAEDecodeAudio": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "vae"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AUDIO"
      ],
      "name": "VAEDecodeAudio",
      "display_name": "VAEDecodeAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "latent/audio",
      "output_node": false
  },
  "SaveAudio": {
      "input": {
          "required": {
              "audio": [
                  "AUDIO"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "audio/ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "audio",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveAudio",
      "display_name": "SaveAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "audio",
      "output_node": true
  },
  "LoadAudio": {
      "input": {
          "required": {
              "audio": [
                  [],
                  {
                      "audio_upload": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "audio"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AUDIO"
      ],
      "name": "LoadAudio",
      "display_name": "LoadAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "audio",
      "output_node": false
  },
  "PreviewAudio": {
      "input": {
          "required": {
              "audio": [
                  "AUDIO"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "audio"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "PreviewAudio",
      "display_name": "PreviewAudio",
      "description": "",
      "python_module": "comfy_extras.nodes_audio",
      "category": "audio",
      "output_node": true
  },
  "TripleCLIPLoader": {
      "input": {
          "required": {
              "clip_name1": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ],
              "clip_name2": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ],
              "clip_name3": [
                  [
                      "clip_l.safetensors",
                      "google_t5xxl_fp8_e4m3fn.safetensors",
                      "t5xxl_fp16.safetensors",
                      "t5xxl_fp8_e4m3fn.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_name1",
              "clip_name2",
              "clip_name3"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "TripleCLIPLoader",
      "display_name": "TripleCLIPLoader",
      "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
      "python_module": "comfy_extras.nodes_sd3",
      "category": "advanced/loaders",
      "output_node": false
  },
  "EmptySD3LatentImage": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 16,
                      "max": 16384,
                      "step": 16
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 16,
                      "max": 16384,
                      "step": 16
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "EmptySD3LatentImage",
      "display_name": "EmptySD3LatentImage",
      "description": "",
      "python_module": "comfy_extras.nodes_sd3",
      "category": "latent/sd3",
      "output_node": false
  },
  "CLIPTextEncodeSD3": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "clip_l": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "clip_g": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "t5xxl": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "empty_padding": [
                  [
                      "none",
                      "empty_prompt"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "clip_l",
              "clip_g",
              "t5xxl",
              "empty_padding"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeSD3",
      "display_name": "CLIPTextEncodeSD3",
      "description": "",
      "python_module": "comfy_extras.nodes_sd3",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "ControlNetApplySD3": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "vae": [
                  "VAE"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "control_net",
              "vae",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ControlNetApplySD3",
      "display_name": "Apply Controlnet with VAE",
      "description": "",
      "python_module": "comfy_extras.nodes_sd3",
      "category": "conditioning/controlnet",
      "output_node": false,
      "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "layers": [
                  "STRING",
                  {
                      "default": "7, 8, 9",
                      "multiline": false
                  }
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.01,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "layers",
              "scale",
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "SkipLayerGuidanceSD3",
      "display_name": "SkipLayerGuidanceSD3",
      "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
      "python_module": "comfy_extras.nodes_sd3",
      "category": "advanced/guidance",
      "output_node": false,
      "experimental": true
  },
  "GITSScheduler": {
      "input": {
          "required": {
              "coeff": [
                  "FLOAT",
                  {
                      "default": 1.2,
                      "min": 0.8,
                      "max": 1.5,
                      "step": 0.05
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 10,
                      "min": 2,
                      "max": 1000
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coeff",
              "steps",
              "denoise"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "GITSScheduler",
      "display_name": "GITSScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_gits",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "SetUnionControlNetType": {
      "input": {
          "required": {
              "control_net": [
                  "CONTROL_NET"
              ],
              "type": [
                  [
                      "auto",
                      "openpose",
                      "depth",
                      "hed/pidi/scribble/ted",
                      "canny/lineart/anime_lineart/mlsd",
                      "normal",
                      "segment",
                      "tile",
                      "repaint"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "control_net",
              "type"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "SetUnionControlNetType",
      "display_name": "SetUnionControlNetType",
      "description": "",
      "python_module": "comfy_extras.nodes_controlnet",
      "category": "conditioning/controlnet",
      "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "vae": [
                  "VAE"
              ],
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "control_net",
              "vae",
              "image",
              "mask",
              "strength",
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ControlNetInpaintingAliMamaApply",
      "display_name": "ControlNetInpaintingAliMamaApply",
      "description": "",
      "python_module": "comfy_extras.nodes_controlnet",
      "category": "conditioning/controlnet",
      "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "bert": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "mt5xl": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "bert",
              "mt5xl"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeHunyuanDiT",
      "display_name": "CLIPTextEncodeHunyuanDiT",
      "description": "",
      "python_module": "comfy_extras.nodes_hunyuan",
      "category": "advanced/conditioning",
      "output_node": false
  },
  "CLIPTextEncodeFlux": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "clip_l": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "t5xxl": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ],
              "guidance": [
                  "FLOAT",
                  {
                      "default": 3.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "clip_l",
              "t5xxl",
              "guidance"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeFlux",
      "display_name": "CLIPTextEncodeFlux",
      "description": "",
      "python_module": "comfy_extras.nodes_flux",
      "category": "advanced/conditioning/flux",
      "output_node": false
  },
  "FluxGuidance": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "guidance": [
                  "FLOAT",
                  {
                      "default": 3.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "guidance"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "FluxGuidance",
      "display_name": "FluxGuidance",
      "description": "",
      "python_module": "comfy_extras.nodes_flux",
      "category": "advanced/conditioning/flux",
      "output_node": false
  },
  "LoraSave": {
      "input": {
          "required": {
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "loras/ComfyUI_extracted_lora"
                  }
              ],
              "rank": [
                  "INT",
                  {
                      "default": 8,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "lora_type": [
                  [
                      "standard",
                      "full_diff"
                  ]
              ],
              "bias_diff": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "model_diff": [
                  "MODEL",
                  {
                      "tooltip": "The ModelSubtract output to be converted to a lora."
                  }
              ],
              "text_encoder_diff": [
                  "CLIP",
                  {
                      "tooltip": "The CLIPSubtract output to be converted to a lora."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "filename_prefix",
              "rank",
              "lora_type",
              "bias_diff"
          ],
          "optional": [
              "model_diff",
              "text_encoder_diff"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "LoraSave",
      "display_name": "Extract and Save Lora",
      "description": "",
      "python_module": "comfy_extras.nodes_lora_extract",
      "category": "_for_testing",
      "output_node": true
  },
  "TorchCompileModel": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "backend"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "TorchCompileModel",
      "display_name": "TorchCompileModel",
      "description": "",
      "python_module": "comfy_extras.nodes_torch_compile",
      "category": "_for_testing",
      "output_node": false,
      "experimental": true
  },
  "EmptyMochiLatentVideo": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 848,
                      "min": 16,
                      "max": 16384,
                      "step": 16
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 480,
                      "min": 16,
                      "max": 16384,
                      "step": 16
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 25,
                      "min": 7,
                      "max": 16384,
                      "step": 6
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "length",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "EmptyMochiLatentVideo",
      "display_name": "EmptyMochiLatentVideo",
      "description": "",
      "python_module": "comfy_extras.nodes_mochi",
      "category": "latent/video",
      "output_node": false
  },
  "SkipLayerGuidanceDiT": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "double_layers": [
                  "STRING",
                  {
                      "default": "7, 8, 9",
                      "multiline": false
                  }
              ],
              "single_layers": [
                  "STRING",
                  {
                      "default": "7, 8, 9",
                      "multiline": false
                  }
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.01,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "rescaling_scale": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "double_layers",
              "single_layers",
              "scale",
              "start_percent",
              "end_percent",
              "rescaling_scale"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "SkipLayerGuidanceDiT",
      "display_name": "SkipLayerGuidanceDiT",
      "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
      "python_module": "comfy_extras.nodes_slg",
      "category": "advanced/guidance",
      "output_node": false,
      "experimental": true
  },
  "Mahiro": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "patched_model"
      ],
      "name": "Mahiro",
      "display_name": "Mahiro is so cute that she deserves a better guidance function!! (\u3002\u30fb\u03c9\u30fb\u3002)",
      "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
      "python_module": "comfy_extras.nodes_mahiro",
      "category": "_for_testing",
      "output_node": false
  },
  "EmptyLTXVLatentVideo": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 768,
                      "min": 64,
                      "max": 16384,
                      "step": 32
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 32
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 97,
                      "min": 1,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "length",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "EmptyLTXVLatentVideo",
      "display_name": "EmptyLTXVLatentVideo",
      "description": "",
      "python_module": "comfy_extras.nodes_lt",
      "category": "latent/video/ltxv",
      "output_node": false
  },
  "LTXVImgToVideo": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "vae": [
                  "VAE"
              ],
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 768,
                      "min": 64,
                      "max": 16384,
                      "step": 32
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 32
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 97,
                      "min": 9,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "image_noise_scale": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "Amount of noise to apply on conditioning image latent."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "vae",
              "image",
              "width",
              "height",
              "length",
              "batch_size",
              "image_noise_scale"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "LTXVImgToVideo",
      "display_name": "LTXVImgToVideo",
      "description": "",
      "python_module": "comfy_extras.nodes_lt",
      "category": "conditioning/video_models",
      "output_node": false
  },
  "ModelSamplingLTXV": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "max_shift": [
                  "FLOAT",
                  {
                      "default": 2.05,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "base_shift": [
                  "FLOAT",
                  {
                      "default": 0.95,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "latent": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "max_shift",
              "base_shift"
          ],
          "optional": [
              "latent"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingLTXV",
      "display_name": "ModelSamplingLTXV",
      "description": "",
      "python_module": "comfy_extras.nodes_lt",
      "category": "advanced/model",
      "output_node": false
  },
  "LTXVConditioning": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "frame_rate": [
                  "FLOAT",
                  {
                      "default": 25.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "frame_rate"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "LTXVConditioning",
      "display_name": "LTXVConditioning",
      "description": "",
      "python_module": "comfy_extras.nodes_lt",
      "category": "conditioning/video_models",
      "output_node": false
  },
  "LTXVScheduler": {
      "input": {
          "required": {
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "max_shift": [
                  "FLOAT",
                  {
                      "default": 2.05,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "base_shift": [
                  "FLOAT",
                  {
                      "default": 0.95,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "stretch": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
                  }
              ],
              "terminal": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 0.99,
                      "step": 0.01,
                      "tooltip": "The terminal value of the sigmas after stretching."
                  }
              ]
          },
          "optional": {
              "latent": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "steps",
              "max_shift",
              "base_shift",
              "stretch",
              "terminal"
          ],
          "optional": [
              "latent"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "LTXVScheduler",
      "display_name": "LTXVScheduler",
      "description": "",
      "python_module": "comfy_extras.nodes_lt",
      "category": "sampling/custom_sampling/schedulers",
      "output_node": false
  },
  "CreateHookLora": {
      "input": {
          "required": {
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "prev_hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "lora_name",
              "strength_model",
              "strength_clip"
          ],
          "optional": [
              "prev_hooks"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CreateHookLora",
      "display_name": "Create Hook LoRA",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/create",
      "output_node": false,
      "experimental": true
  },
  "CreateHookLoraModelOnly": {
      "input": {
          "required": {
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "prev_hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "lora_name",
              "strength_model"
          ],
          "optional": [
              "prev_hooks"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CreateHookLoraModelOnly",
      "display_name": "Create Hook LoRA (MO)",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/create",
      "output_node": false,
      "experimental": true
  },
  "CreateHookModelAsLora": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "prev_hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "strength_model",
              "strength_clip"
          ],
          "optional": [
              "prev_hooks"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CreateHookModelAsLora",
      "display_name": "Create Hook Model as LoRA",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/create",
      "output_node": false,
      "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "prev_hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "strength_model"
          ],
          "optional": [
              "prev_hooks"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CreateHookModelAsLoraModelOnly",
      "display_name": "Create Hook Model as LoRA (MO)",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/create",
      "output_node": false,
      "experimental": true
  },
  "SetHookKeyframes": {
      "input": {
          "required": {
              "hooks": [
                  "HOOKS"
              ]
          },
          "optional": {
              "hook_kf": [
                  "HOOK_KEYFRAMES"
              ]
          }
      },
      "input_order": {
          "required": [
              "hooks"
          ],
          "optional": [
              "hook_kf"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "SetHookKeyframes",
      "display_name": "Set Hook Keyframes",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/scheduling",
      "output_node": false,
      "experimental": true
  },
  "CreateHookKeyframe": {
      "input": {
          "required": {
              "strength_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ]
          }
      },
      "input_order": {
          "required": [
              "strength_mult",
              "start_percent"
          ],
          "optional": [
              "prev_hook_kf"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "CreateHookKeyframe",
      "display_name": "Create Hook Keyframe",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/scheduling",
      "output_node": false,
      "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
      "input": {
          "required": {
              "strength_start": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "strength_end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "keyframes_count": [
                  "INT",
                  {
                      "default": 5,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ]
          }
      },
      "input_order": {
          "required": [
              "strength_start",
              "strength_end",
              "interpolation",
              "start_percent",
              "end_percent",
              "keyframes_count",
              "print_keyframes"
          ],
          "optional": [
              "prev_hook_kf"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "CreateHookKeyframesInterpolated",
      "display_name": "Create Hook Keyframes Interp.",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/scheduling",
      "output_node": false,
      "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
      "input": {
          "required": {
              "floats_strength": [
                  "FLOATS",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ]
          }
      },
      "input_order": {
          "required": [
              "floats_strength",
              "start_percent",
              "end_percent",
              "print_keyframes"
          ],
          "optional": [
              "prev_hook_kf"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "CreateHookKeyframesFromFloats",
      "display_name": "Create Hook Keyframes From Floats",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/scheduling",
      "output_node": false,
      "experimental": true
  },
  "CombineHooks2": {
      "input": {
          "required": {},
          "optional": {
              "hooks_A": [
                  "HOOKS"
              ],
              "hooks_B": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "hooks_A",
              "hooks_B"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CombineHooks2",
      "display_name": "Combine Hooks [2]",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/combine",
      "output_node": false,
      "experimental": true
  },
  "CombineHooks4": {
      "input": {
          "required": {},
          "optional": {
              "hooks_A": [
                  "HOOKS"
              ],
              "hooks_B": [
                  "HOOKS"
              ],
              "hooks_C": [
                  "HOOKS"
              ],
              "hooks_D": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "hooks_A",
              "hooks_B",
              "hooks_C",
              "hooks_D"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CombineHooks4",
      "display_name": "Combine Hooks [4]",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/combine",
      "output_node": false,
      "experimental": true
  },
  "CombineHooks8": {
      "input": {
          "required": {},
          "optional": {
              "hooks_A": [
                  "HOOKS"
              ],
              "hooks_B": [
                  "HOOKS"
              ],
              "hooks_C": [
                  "HOOKS"
              ],
              "hooks_D": [
                  "HOOKS"
              ],
              "hooks_E": [
                  "HOOKS"
              ],
              "hooks_F": [
                  "HOOKS"
              ],
              "hooks_G": [
                  "HOOKS"
              ],
              "hooks_H": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "hooks_A",
              "hooks_B",
              "hooks_C",
              "hooks_D",
              "hooks_E",
              "hooks_F",
              "hooks_G",
              "hooks_H"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "CombineHooks8",
      "display_name": "Combine Hooks [8]",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/combine",
      "output_node": false,
      "experimental": true
  },
  "ConditioningSetProperties": {
      "input": {
          "required": {
              "cond_NEW": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "hooks": [
                  "HOOKS"
              ],
              "timesteps": [
                  "TIMESTEPS_RANGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "cond_NEW",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "mask",
              "hooks",
              "timesteps"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetProperties",
      "display_name": "Cond Set Props",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond single",
      "output_node": false,
      "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
      "input": {
          "required": {
              "cond": [
                  "CONDITIONING"
              ],
              "cond_NEW": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "hooks": [
                  "HOOKS"
              ],
              "timesteps": [
                  "TIMESTEPS_RANGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "cond",
              "cond_NEW",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "mask",
              "hooks",
              "timesteps"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetPropertiesAndCombine",
      "display_name": "Cond Set Props Combine",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond single",
      "output_node": false,
      "experimental": true
  },
  "PairConditioningSetProperties": {
      "input": {
          "required": {
              "positive_NEW": [
                  "CONDITIONING"
              ],
              "negative_NEW": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "hooks": [
                  "HOOKS"
              ],
              "timesteps": [
                  "TIMESTEPS_RANGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_NEW",
              "negative_NEW",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "mask",
              "hooks",
              "timesteps"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "PairConditioningSetProperties",
      "display_name": "Cond Pair Set Props",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond pair",
      "output_node": false,
      "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "positive_NEW": [
                  "CONDITIONING"
              ],
              "negative_NEW": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "hooks": [
                  "HOOKS"
              ],
              "timesteps": [
                  "TIMESTEPS_RANGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "positive_NEW",
              "negative_NEW",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "mask",
              "hooks",
              "timesteps"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "PairConditioningSetPropertiesAndCombine",
      "display_name": "Cond Pair Set Props Combine",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond pair",
      "output_node": false,
      "experimental": true
  },
  "ConditioningSetDefaultCombine": {
      "input": {
          "required": {
              "cond": [
                  "CONDITIONING"
              ],
              "cond_DEFAULT": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "cond",
              "cond_DEFAULT"
          ],
          "optional": [
              "hooks"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningSetDefaultCombine",
      "display_name": "Cond Set Default Combine",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond single",
      "output_node": false,
      "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "positive_DEFAULT": [
                  "CONDITIONING"
              ],
              "negative_DEFAULT": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "positive_DEFAULT",
              "negative_DEFAULT"
          ],
          "optional": [
              "hooks"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "PairConditioningSetDefaultCombine",
      "display_name": "Cond Pair Set Default Combine",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond pair",
      "output_node": false,
      "experimental": true
  },
  "PairConditioningCombine": {
      "input": {
          "required": {
              "positive_A": [
                  "CONDITIONING"
              ],
              "negative_A": [
                  "CONDITIONING"
              ],
              "positive_B": [
                  "CONDITIONING"
              ],
              "negative_B": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_A",
              "negative_A",
              "positive_B",
              "negative_B"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "PairConditioningCombine",
      "display_name": "Cond Pair Combine",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/cond pair",
      "output_node": false,
      "experimental": true
  },
  "SetClipHooks": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "apply_to_conds": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "schedule_clip": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "hooks": [
                  "HOOKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "apply_to_conds",
              "schedule_clip"
          ],
          "optional": [
              "hooks"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "SetClipHooks",
      "display_name": "Set CLIP Hooks",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks/clip",
      "output_node": false,
      "experimental": true
  },
  "ConditioningTimestepsRange": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "TIMESTEPS_RANGE",
          "TIMESTEPS_RANGE",
          "TIMESTEPS_RANGE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "TIMESTEPS_RANGE",
          "BEFORE_RANGE",
          "AFTER_RANGE"
      ],
      "name": "ConditioningTimestepsRange",
      "display_name": "Timesteps Range",
      "description": "",
      "python_module": "comfy_extras.nodes_hooks",
      "category": "advanced/hooks",
      "output_node": false,
      "experimental": true
  },
  "Load3D": {
      "input": {
          "required": {
              "model_file": [
                  [],
                  {
                      "file_upload": true
                  }
              ],
              "image": [
                  "LOAD_3D",
                  {}
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "show_grid": [
                  [
                      true,
                      false
                  ]
              ],
              "camera_type": [
                  [
                      "perspective",
                      "orthographic"
                  ]
              ],
              "view": [
                  [
                      "front",
                      "right",
                      "top",
                      "isometric"
                  ]
              ],
              "material": [
                  [
                      "original",
                      "normal",
                      "wireframe",
                      "depth"
                  ]
              ],
              "bg_color": [
                  "STRING",
                  {
                      "default": "#000000",
                      "multiline": false
                  }
              ],
              "light_intensity": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "up_direction": [
                  [
                      "original",
                      "-x",
                      "+x",
                      "-y",
                      "+y",
                      "-z",
                      "+z"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model_file",
              "image",
              "width",
              "height",
              "show_grid",
              "camera_type",
              "view",
              "material",
              "bg_color",
              "light_intensity",
              "up_direction"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "mesh_path"
      ],
      "name": "Load3D",
      "display_name": "Load 3D",
      "description": "",
      "python_module": "comfy_extras.nodes_load_3d",
      "category": "3d",
      "output_node": false
  },
  "Load3DAnimation": {
      "input": {
          "required": {
              "model_file": [
                  [],
                  {
                      "file_upload": true
                  }
              ],
              "image": [
                  "LOAD_3D_ANIMATION",
                  {}
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "show_grid": [
                  [
                      true,
                      false
                  ]
              ],
              "camera_type": [
                  [
                      "perspective",
                      "orthographic"
                  ]
              ],
              "view": [
                  [
                      "front",
                      "right",
                      "top",
                      "isometric"
                  ]
              ],
              "material": [
                  [
                      "original",
                      "normal",
                      "wireframe",
                      "depth"
                  ]
              ],
              "bg_color": [
                  "STRING",
                  {
                      "default": "#000000",
                      "multiline": false
                  }
              ],
              "light_intensity": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "up_direction": [
                  [
                      "original",
                      "-x",
                      "+x",
                      "-y",
                      "+y",
                      "-z",
                      "+z"
                  ]
              ],
              "animation_speed": [
                  [
                      "0.1",
                      "0.5",
                      "1",
                      "1.5",
                      "2"
                  ],
                  {
                      "default": "1"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_file",
              "image",
              "width",
              "height",
              "show_grid",
              "camera_type",
              "view",
              "material",
              "bg_color",
              "light_intensity",
              "up_direction",
              "animation_speed"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "mesh_path"
      ],
      "name": "Load3DAnimation",
      "display_name": "Load 3D - Animation",
      "description": "",
      "python_module": "comfy_extras.nodes_load_3d",
      "category": "3d",
      "output_node": false
  },
  "CLIPTextEncodeSDXL+": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "size_cond_factor": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 16
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true,
                      "default": ""
                  }
              ],
              "clip": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "size_cond_factor",
              "text",
              "clip"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeSDXL+",
      "display_name": "\ud83d\udd27 SDXL CLIPTextEncode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "ConditioningCombineMultiple+": {
      "input": {
          "required": {
              "conditioning_1": [
                  "CONDITIONING"
              ],
              "conditioning_2": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "conditioning_3": [
                  "CONDITIONING"
              ],
              "conditioning_4": [
                  "CONDITIONING"
              ],
              "conditioning_5": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_1",
              "conditioning_2"
          ],
          "optional": [
              "conditioning_3",
              "conditioning_4",
              "conditioning_5"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningCombineMultiple+",
      "display_name": "\ud83d\udd27 Cond Combine Multiple",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "SD3NegativeConditioning+": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "end": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "end"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "SD3NegativeConditioning+",
      "display_name": "\ud83d\udd27 SD3 Negative Conditioning",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "FluxAttentionSeeker+": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "apply_to_query": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_key": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_value": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_out": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "clip_l_0": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_1": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_2": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_3": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_4": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_5": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_6": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_7": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_8": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_9": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_10": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_11": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_0": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_1": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_2": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_3": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_4": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_5": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_6": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_7": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_8": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_9": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_10": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_11": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_12": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_13": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_14": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_15": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_16": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_17": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_18": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_19": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_20": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_21": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_22": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_23": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "apply_to_query",
              "apply_to_key",
              "apply_to_value",
              "apply_to_out",
              "clip_l_0",
              "clip_l_1",
              "clip_l_2",
              "clip_l_3",
              "clip_l_4",
              "clip_l_5",
              "clip_l_6",
              "clip_l_7",
              "clip_l_8",
              "clip_l_9",
              "clip_l_10",
              "clip_l_11",
              "t5xxl_0",
              "t5xxl_1",
              "t5xxl_2",
              "t5xxl_3",
              "t5xxl_4",
              "t5xxl_5",
              "t5xxl_6",
              "t5xxl_7",
              "t5xxl_8",
              "t5xxl_9",
              "t5xxl_10",
              "t5xxl_11",
              "t5xxl_12",
              "t5xxl_13",
              "t5xxl_14",
              "t5xxl_15",
              "t5xxl_16",
              "t5xxl_17",
              "t5xxl_18",
              "t5xxl_19",
              "t5xxl_20",
              "t5xxl_21",
              "t5xxl_22",
              "t5xxl_23"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "FluxAttentionSeeker+",
      "display_name": "\ud83d\udd27 Flux Attention Seeker",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "SD3AttentionSeekerLG+": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "apply_to_query": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_key": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_value": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_out": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "clip_l_0": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_1": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_2": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_3": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_4": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_5": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_6": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_7": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_8": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_9": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_10": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_l_11": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_0": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_1": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_2": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_3": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_4": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_5": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_6": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_7": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_8": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_9": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_10": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_11": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_12": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_13": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_14": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_15": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_16": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_17": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_18": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_19": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_20": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_21": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_22": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_23": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_24": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_25": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_26": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_27": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_28": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_29": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_30": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "clip_g_31": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "apply_to_query",
              "apply_to_key",
              "apply_to_value",
              "apply_to_out",
              "clip_l_0",
              "clip_l_1",
              "clip_l_2",
              "clip_l_3",
              "clip_l_4",
              "clip_l_5",
              "clip_l_6",
              "clip_l_7",
              "clip_l_8",
              "clip_l_9",
              "clip_l_10",
              "clip_l_11",
              "clip_g_0",
              "clip_g_1",
              "clip_g_2",
              "clip_g_3",
              "clip_g_4",
              "clip_g_5",
              "clip_g_6",
              "clip_g_7",
              "clip_g_8",
              "clip_g_9",
              "clip_g_10",
              "clip_g_11",
              "clip_g_12",
              "clip_g_13",
              "clip_g_14",
              "clip_g_15",
              "clip_g_16",
              "clip_g_17",
              "clip_g_18",
              "clip_g_19",
              "clip_g_20",
              "clip_g_21",
              "clip_g_22",
              "clip_g_23",
              "clip_g_24",
              "clip_g_25",
              "clip_g_26",
              "clip_g_27",
              "clip_g_28",
              "clip_g_29",
              "clip_g_30",
              "clip_g_31"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "SD3AttentionSeekerLG+",
      "display_name": "\ud83d\udd27 SD3 Attention Seeker L/G",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "SD3AttentionSeekerT5+": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "apply_to_query": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_key": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_value": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "apply_to_out": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "t5xxl_0": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_1": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_2": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_3": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_4": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_5": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_6": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_7": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_8": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_9": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_10": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_11": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_12": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_13": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_14": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_15": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_16": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_17": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_18": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_19": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_20": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_21": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_22": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "t5xxl_23": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 1.0,
                      "min": 0,
                      "max": 5,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "apply_to_query",
              "apply_to_key",
              "apply_to_value",
              "apply_to_out",
              "t5xxl_0",
              "t5xxl_1",
              "t5xxl_2",
              "t5xxl_3",
              "t5xxl_4",
              "t5xxl_5",
              "t5xxl_6",
              "t5xxl_7",
              "t5xxl_8",
              "t5xxl_9",
              "t5xxl_10",
              "t5xxl_11",
              "t5xxl_12",
              "t5xxl_13",
              "t5xxl_14",
              "t5xxl_15",
              "t5xxl_16",
              "t5xxl_17",
              "t5xxl_18",
              "t5xxl_19",
              "t5xxl_20",
              "t5xxl_21",
              "t5xxl_22",
              "t5xxl_23"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP"
      ],
      "name": "SD3AttentionSeekerT5+",
      "display_name": "\ud83d\udd27 SD3 Attention Seeker T5",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "FluxBlocksBuster+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "blocks": [
                  "STRING",
                  {
                      "default": "## 0 = 1.0\n## 1 = 1.0\n## 2 = 1.0\n## 3 = 1.0\n## 4 = 1.0\n## 5 = 1.0\n## 6 = 1.0\n## 7 = 1.0\n## 8 = 1.0\n## 9 = 1.0\n## 10 = 1.0\n## 11 = 1.0\n## 12 = 1.0\n## 13 = 1.0\n## 14 = 1.0\n## 15 = 1.0\n## 16 = 1.0\n## 17 = 1.0\n## 18 = 1.0\n# 0 = 1.0\n# 1 = 1.0\n# 2 = 1.0\n# 3 = 1.0\n# 4 = 1.0\n# 5 = 1.0\n# 6 = 1.0\n# 7 = 1.0\n# 8 = 1.0\n# 9 = 1.0\n# 10 = 1.0\n# 11 = 1.0\n# 12 = 1.0\n# 13 = 1.0\n# 14 = 1.0\n# 15 = 1.0\n# 16 = 1.0\n# 17 = 1.0\n# 18 = 1.0\n# 19 = 1.0\n# 20 = 1.0\n# 21 = 1.0\n# 22 = 1.0\n# 23 = 1.0\n# 24 = 1.0\n# 25 = 1.0\n# 26 = 1.0\n# 27 = 1.0\n# 28 = 1.0\n# 29 = 1.0\n# 30 = 1.0\n# 31 = 1.0\n# 32 = 1.0\n# 33 = 1.0\n# 34 = 1.0\n# 35 = 1.0\n# 36 = 1.0\n# 37 = 1.0",
                      "multiline": true,
                      "dynamicPrompts": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "blocks"
          ]
      },
      "output": [
          "MODEL",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "patched_blocks"
      ],
      "name": "FluxBlocksBuster+",
      "display_name": "\ud83d\udd27 Flux Model Blocks Buster",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/conditioning",
      "output_node": false
  },
  "ImageEnhanceDifference+": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "exponent": [
                  "FLOAT",
                  {
                      "default": 0.75,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "exponent"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageEnhanceDifference+",
      "display_name": "\ud83d\udd27 Image Enhance Difference",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image analysis",
      "output_node": false
  },
  "ImageBatchMultiple+": {
      "input": {
          "required": {
              "image_1": [
                  "IMAGE"
              ],
              "method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ],
                  {
                      "default": "lanczos"
                  }
              ]
          },
          "optional": {
              "image_2": [
                  "IMAGE"
              ],
              "image_3": [
                  "IMAGE"
              ],
              "image_4": [
                  "IMAGE"
              ],
              "image_5": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_1",
              "method"
          ],
          "optional": [
              "image_2",
              "image_3",
              "image_4",
              "image_5"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatchMultiple+",
      "display_name": "\ud83d\udd27 Images Batch Multiple",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image batch",
      "output_node": false
  },
  "ImageExpandBatch+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "size": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "step": 1
                  }
              ],
              "method": [
                  [
                      "expand",
                      "repeat all",
                      "repeat first",
                      "repeat last"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "size",
              "method"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageExpandBatch+",
      "display_name": "\ud83d\udd27 Image Expand Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image batch",
      "output_node": false
  },
  "ImageFromBatch+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "start": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "start",
              "length"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageFromBatch+",
      "display_name": "\ud83d\udd27 Image From Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image batch",
      "output_node": false
  },
  "ImageListToBatch+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageListToBatch+",
      "display_name": "\ud83d\udd27 Image List To Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image batch",
      "output_node": false
  },
  "ImageBatchToList+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatchToList+",
      "display_name": "\ud83d\udd27 Image Batch To List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image batch",
      "output_node": false
  },
  "ImageCompositeFromMaskBatch+": {
      "input": {
          "required": {
              "image_from": [
                  "IMAGE"
              ],
              "image_to": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_from",
              "image_to",
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageCompositeFromMaskBatch+",
      "display_name": "\ud83d\udd27 Image Composite From Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageComposite+": {
      "input": {
          "required": {
              "destination": [
                  "IMAGE"
              ],
              "source": [
                  "IMAGE"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "offset_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "offset_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "x",
              "y",
              "offset_x",
              "offset_y"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageComposite+",
      "display_name": "\ud83d\udd27 Image Composite",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageCrop+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "position": [
                  [
                      "top-left",
                      "top-center",
                      "top-right",
                      "right-center",
                      "bottom-right",
                      "bottom-center",
                      "bottom-left",
                      "left-center",
                      "center"
                  ]
              ],
              "x_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -99999,
                      "step": 1
                  }
              ],
              "y_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -99999,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "position",
              "x_offset",
              "y_offset"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "x",
          "y"
      ],
      "name": "ImageCrop+",
      "display_name": "\ud83d\udd27 Image Crop",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageFlip+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "axis": [
                  [
                      "x",
                      "y",
                      "xy"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "axis"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageFlip+",
      "display_name": "\ud83d\udd27 Image Flip",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageRandomTransform+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "repeat": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "variation": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "seed",
              "repeat",
              "variation"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageRandomTransform+",
      "display_name": "\ud83d\udd27 Image Random Transform",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageRemoveAlpha+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageRemoveAlpha+",
      "display_name": "\ud83d\udd27 Image Remove Alpha",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image utils",
      "output_node": false
  },
  "ImageRemoveBackground+": {
      "input": {
          "required": {
              "rembg_session": [
                  "REMBG_SESSION"
              ],
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "rembg_session",
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImageRemoveBackground+",
      "display_name": "\ud83d\udd27 Image Remove Background",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageResize+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "interpolation": [
                  [
                      "nearest",
                      "bilinear",
                      "bicubic",
                      "area",
                      "nearest-exact",
                      "lanczos"
                  ]
              ],
              "method": [
                  [
                      "stretch",
                      "keep proportion",
                      "fill / crop",
                      "pad"
                  ]
              ],
              "condition": [
                  [
                      "always",
                      "downscale if bigger",
                      "upscale if smaller",
                      "if bigger area",
                      "if smaller area"
                  ]
              ],
              "multiple_of": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "interpolation",
              "method",
              "condition",
              "multiple_of"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "width",
          "height"
      ],
      "name": "ImageResize+",
      "display_name": "\ud83d\udd27 Image Resize",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageSeamCarving+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "energy": [
                  [
                      "backward",
                      "forward"
                  ]
              ],
              "order": [
                  [
                      "width-first",
                      "height-first"
                  ]
              ]
          },
          "optional": {
              "keep_mask": [
                  "MASK"
              ],
              "drop_mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "energy",
              "order"
          ],
          "optional": [
              "keep_mask",
              "drop_mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageSeamCarving+",
      "display_name": "\ud83d\udd27 Image Seam Carving",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageTile+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "rows": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "cols": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "overlap": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 0.5,
                      "step": 0.01
                  }
              ],
              "overlap_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 1
                  }
              ],
              "overlap_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "rows",
              "cols",
              "overlap",
              "overlap_x",
              "overlap_y"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "tile_width",
          "tile_height",
          "overlap_x",
          "overlap_y"
      ],
      "name": "ImageTile+",
      "display_name": "\ud83d\udd27 Image Tile",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageUntile+": {
      "input": {
          "required": {
              "tiles": [
                  "IMAGE"
              ],
              "overlap_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 1
                  }
              ],
              "overlap_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 1
                  }
              ],
              "rows": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "cols": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "tiles",
              "overlap_x",
              "overlap_y",
              "rows",
              "cols"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageUntile+",
      "display_name": "\ud83d\udd27 Image Untile",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "RemBGSession+": {
      "input": {
          "required": {
              "model": [
                  [
                      "u2net: general purpose",
                      "u2netp: lightweight general purpose",
                      "u2net_human_seg: human segmentation",
                      "u2net_cloth_seg: cloths Parsing",
                      "silueta: very small u2net",
                      "isnet-general-use: general purpose",
                      "isnet-anime: anime illustrations",
                      "sam: general purpose"
                  ]
              ],
              "providers": [
                  [
                      "CPU",
                      "CUDA",
                      "ROCM",
                      "DirectML",
                      "OpenVINO",
                      "CoreML",
                      "Tensorrt",
                      "Azure"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "providers"
          ]
      },
      "output": [
          "REMBG_SESSION"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REMBG_SESSION"
      ],
      "name": "RemBGSession+",
      "display_name": "\ud83d\udd27 RemBG Session",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "TransparentBGSession+": {
      "input": {
          "required": {
              "mode": [
                  [
                      "base",
                      "fast",
                      "base-nightly"
                  ]
              ],
              "use_jit": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "use_jit"
          ]
      },
      "output": [
          "REMBG_SESSION"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REMBG_SESSION"
      ],
      "name": "TransparentBGSession+",
      "display_name": "\ud83d\udd27 InSPyReNet TransparentBG",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image manipulation",
      "output_node": false
  },
  "ImageApplyLUT+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "lut_file": [
                  [
                      "put_luts_files_here.txt"
                  ]
              ],
              "gamma_correction": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "clip_values": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "lut_file",
              "gamma_correction",
              "clip_values",
              "strength"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageApplyLUT+",
      "display_name": "\ud83d\udd27 Image Apply LUT",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageCASharpening+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "amount": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "amount"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageCASharpening+",
      "display_name": "\ud83d\udd27 Image Contrast Adaptive Sharpening",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageDesaturate+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "method": [
                  [
                      "luminance (Rec.709)",
                      "luminance (Rec.601)",
                      "average",
                      "lightness"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "factor",
              "method"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageDesaturate+",
      "display_name": "\ud83d\udd27 Image Desaturate",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "PixelOEPixelize+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "downscale_mode": [
                  [
                      "contrast",
                      "bicubic",
                      "nearest",
                      "center",
                      "k-centroid"
                  ]
              ],
              "target_size": [
                  "INT",
                  {
                      "default": 128,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "patch_size": [
                  "INT",
                  {
                      "default": 16,
                      "min": 4,
                      "max": 32,
                      "step": 2
                  }
              ],
              "thickness": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 16,
                      "step": 1
                  }
              ],
              "color_matching": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "upscale": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "downscale_mode",
              "target_size",
              "patch_size",
              "thickness",
              "color_matching",
              "upscale"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "PixelOEPixelize+",
      "display_name": "\ud83d\udd27 Pixelize",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImagePosterize+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "threshold"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImagePosterize+",
      "display_name": "\ud83d\udd27 Image Posterize",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageColorMatch+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "reference": [
                  "IMAGE"
              ],
              "color_space": [
                  [
                      "LAB",
                      "YCbCr",
                      "RGB",
                      "LUV",
                      "YUV",
                      "XYZ"
                  ]
              ],
              "factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "device": [
                  [
                      "auto",
                      "cpu",
                      "gpu"
                  ]
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "reference_mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "reference",
              "color_space",
              "factor",
              "device",
              "batch_size"
          ],
          "optional": [
              "reference_mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageColorMatch+",
      "display_name": "\ud83d\udd27 Image Color Match",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageColorMatchAdobe+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "reference": [
                  "IMAGE"
              ],
              "color_space": [
                  [
                      "RGB",
                      "LAB"
                  ]
              ],
              "luminance_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 0.05
                  }
              ],
              "color_intensity_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 0.05
                  }
              ],
              "fade_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "neutralization_factor": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "device": [
                  [
                      "auto",
                      "cpu",
                      "gpu"
                  ]
              ]
          },
          "optional": {
              "reference_mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "reference",
              "color_space",
              "luminance_factor",
              "color_intensity_factor",
              "fade_factor",
              "neutralization_factor",
              "device"
          ],
          "optional": [
              "reference_mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageColorMatchAdobe+",
      "display_name": "\ud83d\udd27 Image Color Match Adobe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageHistogramMatch+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "reference": [
                  "IMAGE"
              ],
              "method": [
                  [
                      "pytorch",
                      "skimage"
                  ]
              ],
              "factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "device": [
                  [
                      "auto",
                      "cpu",
                      "gpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "reference",
              "method",
              "factor",
              "device"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageHistogramMatch+",
      "display_name": "\ud83d\udd27 Image Histogram Match",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "ImageSmartSharpen+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "noise_radius": [
                  "INT",
                  {
                      "default": 7,
                      "min": 1,
                      "max": 25,
                      "step": 1
                  }
              ],
              "preserve_edges": [
                  "FLOAT",
                  {
                      "default": 0.75,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "sharpen": [
                  "FLOAT",
                  {
                      "default": 5.0,
                      "min": 0.0,
                      "max": 25.0,
                      "step": 0.5
                  }
              ],
              "ratio": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "noise_radius",
              "preserve_edges",
              "sharpen",
              "ratio"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageSmartSharpen+",
      "display_name": "\ud83d\udd27 Image Smart Sharpen",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image processing",
      "output_node": false
  },
  "GetImageSize+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "count"
      ],
      "name": "GetImageSize+",
      "display_name": "\ud83d\udd27 Get Image Size",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image utils",
      "output_node": false
  },
  "ImageToDevice+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "device": [
                  [
                      "auto",
                      "cpu",
                      "gpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "device"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageToDevice+",
      "display_name": "\ud83d\udd27 Image To Device",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image utils",
      "output_node": false
  },
  "ImagePreviewFromLatent+": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "image": [
                  [
                      "none"
                  ],
                  {
                      "image_upload": false
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "latent",
              "vae",
              "tile_size"
          ],
          "optional": [
              "image"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "width",
          "height"
      ],
      "name": "ImagePreviewFromLatent+",
      "display_name": "\ud83d\udd27 Image Preview From Latent",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image utils",
      "output_node": true
  },
  "NoiseFromImage+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "noise_strenght": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_size": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "color_noise": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "mask_strength": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "mask_scale_diff": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "mask_contrast": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "saturation": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "contrast": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "blur": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ]
          },
          "optional": {
              "noise_mask": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "noise_strenght",
              "noise_size",
              "color_noise",
              "mask_strength",
              "mask_scale_diff",
              "mask_contrast",
              "saturation",
              "contrast",
              "blur"
          ],
          "optional": [
              "noise_mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "NoiseFromImage+",
      "display_name": "\ud83d\udd27 Noise From Image",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/image utils",
      "output_node": false
  },
  "MaskBlur+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "amount": [
                  "INT",
                  {
                      "default": 6,
                      "min": 0,
                      "max": 256,
                      "step": 1
                  }
              ],
              "device": [
                  [
                      "auto",
                      "cpu",
                      "gpu"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "amount",
              "device"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskBlur+",
      "display_name": "\ud83d\udd27 Mask Blur",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskBoundingBox+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "padding": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "blur": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 256,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "image_optional": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "padding",
              "blur"
          ],
          "optional": [
              "image_optional"
          ]
      },
      "output": [
          "MASK",
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MASK",
          "IMAGE",
          "x",
          "y",
          "width",
          "height"
      ],
      "name": "MaskBoundingBox+",
      "display_name": "\ud83d\udd27 Mask Bounding Box",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFix+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "erode_dilate": [
                  "INT",
                  {
                      "default": 0,
                      "min": -256,
                      "max": 256,
                      "step": 1
                  }
              ],
              "fill_holes": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 128,
                      "step": 1
                  }
              ],
              "remove_isolated_pixels": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 32,
                      "step": 1
                  }
              ],
              "smooth": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 256,
                      "step": 1
                  }
              ],
              "blur": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 256,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "erode_dilate",
              "fill_holes",
              "remove_isolated_pixels",
              "smooth",
              "blur"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFix+",
      "display_name": "\ud83d\udd27 Mask Fix",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFlip+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "axis": [
                  [
                      "x",
                      "y",
                      "xy"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "axis"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFlip+",
      "display_name": "\ud83d\udd27 Mask Flip",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFromColor+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "red": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "green": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "blue": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "threshold": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 127,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "red",
              "green",
              "blue",
              "threshold"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFromColor+",
      "display_name": "\ud83d\udd27 Mask From Color",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFromList+": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 32,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 32,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          },
          "optional": {
              "values": [
                  "*",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "str_values": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true,
                      "placeholder": "0.0, 0.5, 1.0"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height"
          ],
          "optional": [
              "values",
              "str_values"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFromList+",
      "display_name": "\ud83d\udd27 Mask From List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFromRGBCMYBW+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "threshold_r": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "threshold_g": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "threshold_b": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "threshold_r",
              "threshold_g",
              "threshold_b"
          ]
      },
      "output": [
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "red",
          "green",
          "blue",
          "cyan",
          "magenta",
          "yellow",
          "black",
          "white"
      ],
      "name": "MaskFromRGBCMYBW+",
      "display_name": "\ud83d\udd27 Mask From RGB/CMY/BW",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskFromSegmentation+": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segments": [
                  "INT",
                  {
                      "default": 6,
                      "min": 1,
                      "max": 16,
                      "step": 1
                  }
              ],
              "remove_isolated_pixels": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 32,
                      "step": 1
                  }
              ],
              "remove_small_masks": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "fill_holes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segments",
              "remove_isolated_pixels",
              "remove_small_masks",
              "fill_holes"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFromSegmentation+",
      "display_name": "\ud83d\udd27 Mask From Segmentation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskPreview+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "mask"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "MaskPreview+",
      "display_name": "\ud83d\udd27 Mask Preview",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": true
  },
  "MaskSmooth+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "amount": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 127,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "amount"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskSmooth+",
      "display_name": "\ud83d\udd27 Mask Smooth",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "TransitionMask+": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "end_frame": [
                  "INT",
                  {
                      "default": 9999,
                      "min": 0,
                      "step": 1
                  }
              ],
              "transition_type": [
                  [
                      "horizontal slide",
                      "vertical slide",
                      "horizontal bar",
                      "vertical bar",
                      "center box",
                      "horizontal door",
                      "vertical door",
                      "circle",
                      "fade"
                  ]
              ],
              "timing_function": [
                  [
                      "linear",
                      "in",
                      "out",
                      "in-out"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "frames",
              "start_frame",
              "end_frame",
              "transition_type",
              "timing_function"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "TransitionMask+",
      "display_name": "\ud83d\udd27 Transition Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask",
      "output_node": false
  },
  "MaskBatch+": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ],
              "mask2": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1",
              "mask2"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskBatch+",
      "display_name": "\ud83d\udd27 Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask batch",
      "output_node": false
  },
  "MaskExpandBatch+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "size": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "step": 1
                  }
              ],
              "method": [
                  [
                      "expand",
                      "repeat all",
                      "repeat first",
                      "repeat last"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "size",
              "method"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskExpandBatch+",
      "display_name": "\ud83d\udd27 Mask Expand Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask batch",
      "output_node": false
  },
  "MaskFromBatch+": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "start": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "length": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "start",
              "length"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskFromBatch+",
      "display_name": "\ud83d\udd27 Mask From Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/mask batch",
      "output_node": false
  },
  "KSamplerVariationsStochastic+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 25,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 7.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "sampler": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "variation_seed": [
                  "INT:seed",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05,
                      "round": 0.01
                  }
              ],
              "cfg_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "latent_image",
              "noise_seed",
              "steps",
              "cfg",
              "sampler",
              "scheduler",
              "positive",
              "negative",
              "variation_seed",
              "variation_strength",
              "cfg_scale"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSamplerVariationsStochastic+",
      "display_name": "\ud83d\udd27 KSampler Stochastic Variations",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "KSamplerVariationsWithNoise+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "main_seed": [
                  "INT:seed",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.17,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01
                  }
              ],
              "variation_seed": [
                  "INT:seed",
                  {
                      "default": 12345,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "latent_image",
              "main_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "variation_strength",
              "variation_seed",
              "denoise"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSamplerVariationsWithNoise+",
      "display_name": "\ud83d\udd27 KSampler Variations with Noise Injection",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "InjectLatentNoise+": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "noise_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01,
                      "round": 0.01
                  }
              ],
              "normalize": [
                  [
                      "false",
                      "true"
                  ],
                  {
                      "default": "false"
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "noise_seed",
              "noise_strength",
              "normalize"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "InjectLatentNoise+",
      "display_name": "\ud83d\udd27 Inject Latent Noise",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "FluxSamplerParams+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "conditioning": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "seed": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "?"
                  }
              ],
              "sampler": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "euler"
                  }
              ],
              "scheduler": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "simple"
                  }
              ],
              "steps": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "20"
                  }
              ],
              "guidance": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "3.5"
                  }
              ],
              "max_shift": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": ""
                  }
              ],
              "base_shift": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": ""
                  }
              ],
              "denoise": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "1.0"
                  }
              ]
          },
          "optional": {
              "loras": [
                  "LORA_PARAMS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "conditioning",
              "latent_image",
              "seed",
              "sampler",
              "scheduler",
              "steps",
              "guidance",
              "max_shift",
              "base_shift",
              "denoise"
          ],
          "optional": [
              "loras"
          ]
      },
      "output": [
          "LATENT",
          "SAMPLER_PARAMS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "latent",
          "params"
      ],
      "name": "FluxSamplerParams+",
      "display_name": "\ud83d\udd27 Flux Sampler Parameters",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "GuidanceTimestepping+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "value": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.05
                  }
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "value",
              "start_at",
              "end_at"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "GuidanceTimestepping+",
      "display_name": "\ud83d\udd27 Guidance Timestep (experimental)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "PlotParameters+": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "params": [
                  "SAMPLER_PARAMS"
              ],
              "order_by": [
                  [
                      "none",
                      "time",
                      "seed",
                      "steps",
                      "denoise",
                      "sampler",
                      "scheduler",
                      "guidance",
                      "max_shift",
                      "base_shift",
                      "lora_strength"
                  ]
              ],
              "cols_value": [
                  [
                      "none",
                      "time",
                      "seed",
                      "steps",
                      "denoise",
                      "sampler",
                      "scheduler",
                      "guidance",
                      "max_shift",
                      "base_shift",
                      "lora_strength"
                  ]
              ],
              "cols_num": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 1024
                  }
              ],
              "add_prompt": [
                  [
                      "false",
                      "true",
                      "excerpt"
                  ]
              ],
              "add_params": [
                  [
                      "false",
                      "true",
                      "changes only"
                  ],
                  {
                      "default": "true"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "params",
              "order_by",
              "cols_value",
              "cols_num",
              "add_prompt",
              "add_params"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "PlotParameters+",
      "display_name": "\ud83d\udd27 Plot Sampler Parameters",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "TextEncodeForSamplerParams+": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true,
                      "default": "Separate prompts with at least three dashes\n---\nLike so"
                  }
              ],
              "clip": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "clip"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "TextEncodeForSamplerParams+",
      "display_name": "\ud83d\udd27Text Encode for Sampler Params",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "SamplerSelectHelper+": {
      "input": {
          "required": {
              "euler": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "euler_cfg_pp": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "euler_ancestral": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "euler_ancestral_cfg_pp": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "heun": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "heunpp2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpm_2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpm_2_ancestral": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "lms": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpm_fast": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpm_adaptive": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2s_ancestral": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2s_ancestral_cfg_pp": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_sde": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_sde_gpu": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2m": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2m_cfg_pp": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2m_sde": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_2m_sde_gpu": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_3m_sde": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dpmpp_3m_sde_gpu": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "ddpm": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "lcm": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "ipndm": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "ipndm_v": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "deis": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "ddim": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "uni_pc": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "uni_pc_bh2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "SamplerSelectHelper+",
      "display_name": "\ud83d\udd27 Sampler Select Helper",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "SchedulerSelectHelper+": {
      "input": {
          "required": {
              "normal": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "karras": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "exponential": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "sgm_uniform": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "simple": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "ddim_uniform": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "beta": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "linear_quadratic": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "SchedulerSelectHelper+",
      "display_name": "\ud83d\udd27 Scheduler Select Helper",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "LorasForFluxParams+": {
      "input": {
          "required": {
              "lora_1": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ],
                  {
                      "tooltip": "The name of the LoRA."
                  }
              ],
              "strength_model_1": [
                  "STRING",
                  {
                      "multiline": false,
                      "dynamicPrompts": false,
                      "default": "1.0"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "lora_1",
              "strength_model_1"
          ]
      },
      "output": [
          "LORA_PARAMS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LORA_PARAMS"
      ],
      "name": "LorasForFluxParams+",
      "display_name": "\ud83d\udd27 LoRA for Flux Parameters",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "ModelSamplingSD3Advanced+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "shift": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "cut_off": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "shift_multiplier": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 10,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "shift",
              "cut_off",
              "shift_multiplier"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelSamplingSD3Advanced+",
      "display_name": "\ud83d\udd27 Model Sampling SD3 Advanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/sampling",
      "output_node": false
  },
  "ApplyCLIPSeg+": {
      "input": {
          "required": {
              "clip_seg": [
                  "CLIP_SEG"
              ],
              "image": [
                  "IMAGE"
              ],
              "prompt": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.4,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "smooth": [
                  "INT",
                  {
                      "default": 9,
                      "min": 0,
                      "max": 32,
                      "step": 1
                  }
              ],
              "dilate": [
                  "INT",
                  {
                      "default": 0,
                      "min": -32,
                      "max": 32,
                      "step": 1
                  }
              ],
              "blur": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 64,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_seg",
              "image",
              "prompt",
              "threshold",
              "smooth",
              "dilate",
              "blur"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ApplyCLIPSeg+",
      "display_name": "\ud83d\udd27 Apply CLIPSeg",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/segmentation",
      "output_node": false
  },
  "LoadCLIPSegModels+": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "CLIP_SEG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIP_SEG"
      ],
      "name": "LoadCLIPSegModels+",
      "display_name": "\ud83d\udd27 Load CLIPSeg Models",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/segmentation",
      "output_node": false
  },
  "DrawText+": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": true,
                      "default": "Hello, World!"
                  }
              ],
              "font": [
                  [
                      "ShareTechMono-Regular.ttf"
                  ]
              ],
              "size": [
                  "INT",
                  {
                      "default": 56,
                      "min": 1,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "background_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#00000000"
                  }
              ],
              "shadow_distance": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "shadow_blur": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "shadow_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "horizontal_align": [
                  [
                      "left",
                      "center",
                      "right"
                  ]
              ],
              "vertical_align": [
                  [
                      "top",
                      "center",
                      "bottom"
                  ]
              ],
              "offset_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "offset_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "direction": [
                  [
                      "ltr",
                      "rtl"
                  ]
              ]
          },
          "optional": {
              "img_composite": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "font",
              "size",
              "color",
              "background_color",
              "shadow_distance",
              "shadow_blur",
              "shadow_color",
              "horizontal_align",
              "vertical_align",
              "offset_x",
              "offset_y",
              "direction"
          ],
          "optional": [
              "img_composite"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "DrawText+",
      "display_name": "\ud83d\udd27 Draw Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/text",
      "output_node": false
  },
  "BatchCount+": {
      "input": {
          "required": {
              "batch": [
                  "*",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "batch"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "BatchCount+",
      "display_name": "\ud83d\udd27 Batch Count",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "ConsoleDebug+": {
      "input": {
          "required": {
              "value": [
                  "*",
                  {}
              ]
          },
          "optional": {
              "prefix": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Value:"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ],
          "optional": [
              "prefix"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ConsoleDebug+",
      "display_name": "\ud83d\udd27 Console Debug",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": true
  },
  "DebugTensorShape+": {
      "input": {
          "required": {
              "tensor": [
                  "*",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "tensor"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "DebugTensorShape+",
      "display_name": "\ud83d\udd27 Debug Tensor Shape",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": true
  },
  "DisplayAny": {
      "input": {
          "required": {
              "input": [
                  "*",
                  {}
              ],
              "mode": [
                  [
                      "raw value",
                      "tensor shape"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "input",
              "mode"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "DisplayAny",
      "display_name": "\ud83d\udd27 Display Any",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": true
  },
  "ModelCompile+": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "dynamic": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "mode": [
                  [
                      "default",
                      "reduce-overhead",
                      "max-autotune",
                      "max-autotune-no-cudagraphs"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "fullgraph",
              "dynamic",
              "mode"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ModelCompile+",
      "display_name": "\ud83d\udd27 Model Compile",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "RemoveLatentMask+": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RemoveLatentMask+",
      "display_name": "\ud83d\udd27 Remove Latent Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SDXLEmptyLatentSizePicker+": {
      "input": {
          "required": {
              "resolution": [
                  [
                      "704x1408 (0.5)",
                      "704x1344 (0.52)",
                      "768x1344 (0.57)",
                      "768x1280 (0.6)",
                      "832x1216 (0.68)",
                      "832x1152 (0.72)",
                      "896x1152 (0.78)",
                      "896x1088 (0.82)",
                      "960x1088 (0.88)",
                      "960x1024 (0.94)",
                      "1024x1024 (1.0)",
                      "1024x960 (1.07)",
                      "1088x960 (1.13)",
                      "1088x896 (1.21)",
                      "1152x896 (1.29)",
                      "1152x832 (1.38)",
                      "1216x832 (1.46)",
                      "1280x768 (1.67)",
                      "1344x768 (1.75)",
                      "1344x704 (1.91)",
                      "1408x704 (2.0)",
                      "1472x704 (2.09)",
                      "1536x640 (2.4)",
                      "1600x640 (2.5)",
                      "1664x576 (2.89)",
                      "1728x576 (3.0)"
                  ],
                  {
                      "default": "1024x1024 (1.0)"
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "width_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "resolution",
              "batch_size",
              "width_override",
              "height_override"
          ]
      },
      "output": [
          "LATENT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "width",
          "height"
      ],
      "name": "SDXLEmptyLatentSizePicker+",
      "display_name": "\ud83d\udd27 Empty Latent Size Picker",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleComparison+": {
      "input": {
          "required": {
              "a": [
                  "*",
                  {
                      "default": 0
                  }
              ],
              "b": [
                  "*",
                  {
                      "default": 0
                  }
              ],
              "comparison": [
                  [
                      "==",
                      "!=",
                      "<",
                      "<=",
                      ">",
                      ">="
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "a",
              "b",
              "comparison"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "SimpleComparison+",
      "display_name": "\ud83d\udd27 Simple Comparison",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleCondition+": {
      "input": {
          "required": {
              "evaluate": [
                  "*",
                  {
                      "default": 0
                  }
              ],
              "on_true": [
                  "*",
                  {
                      "default": 0
                  }
              ]
          },
          "optional": {
              "on_false": [
                  "*",
                  {
                      "default": null
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "evaluate",
              "on_true"
          ],
          "optional": [
              "on_false"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "result"
      ],
      "name": "SimpleCondition+",
      "display_name": "\ud83d\udd27 Simple Condition",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMath+": {
      "input": {
          "optional": {
              "a": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "b": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "c": [
                  "*",
                  {
                      "default": 0.0
                  }
              ]
          },
          "required": {
              "value": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "a",
              "b",
              "c"
          ],
          "required": [
              "value"
          ]
      },
      "output": [
          "INT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT"
      ],
      "name": "SimpleMath+",
      "display_name": "\ud83d\udd27 Simple Math",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathDual+": {
      "input": {
          "optional": {
              "a": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "b": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "c": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "d": [
                  "*",
                  {
                      "default": 0.0
                  }
              ]
          },
          "required": {
              "value_1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "value_2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "a",
              "b",
              "c",
              "d"
          ],
          "required": [
              "value_1",
              "value_2"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "INT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "int_1",
          "float_1",
          "int_2",
          "float_2"
      ],
      "name": "SimpleMathDual+",
      "display_name": "\ud83d\udd27 Simple Math Dual",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathCondition+": {
      "input": {
          "optional": {
              "a": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "b": [
                  "*",
                  {
                      "default": 0.0
                  }
              ],
              "c": [
                  "*",
                  {
                      "default": 0.0
                  }
              ]
          },
          "required": {
              "evaluate": [
                  "*",
                  {
                      "default": 0
                  }
              ],
              "on_true": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "on_false": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "a",
              "b",
              "c"
          ],
          "required": [
              "evaluate",
              "on_true",
              "on_false"
          ]
      },
      "output": [
          "INT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT"
      ],
      "name": "SimpleMathCondition+",
      "display_name": "\ud83d\udd27 Simple Math Condition",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathBoolean+": {
      "input": {
          "required": {
              "value": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "SimpleMathBoolean+",
      "display_name": "\ud83d\udd27 Simple Math Boolean",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathFloat+": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "SimpleMathFloat+",
      "display_name": "\ud83d\udd27 Simple Math Float",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathInt+": {
      "input": {
          "required": {
              "value": [
                  "INT",
                  {
                      "default": 0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "SimpleMathInt+",
      "display_name": "\ud83d\udd27 Simple Math Int",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathPercent+": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "SimpleMathPercent+",
      "display_name": "\ud83d\udd27 Simple Math Percent",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathSlider+": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "display": "slider",
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 0.001
                  }
              ],
              "max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 0.001
                  }
              ],
              "rounding": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "min",
              "max",
              "rounding"
          ]
      },
      "output": [
          "FLOAT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "INT"
      ],
      "name": "SimpleMathSlider+",
      "display_name": "\ud83d\udd27 Simple Math Slider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SimpleMathSliderLowRes+": {
      "input": {
          "required": {
              "value": [
                  "INT",
                  {
                      "display": "slider",
                      "default": 5,
                      "min": 0,
                      "max": 10,
                      "step": 1
                  }
              ],
              "min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 0.001
                  }
              ],
              "max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 0.001
                  }
              ],
              "rounding": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "min",
              "max",
              "rounding"
          ]
      },
      "output": [
          "FLOAT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "INT"
      ],
      "name": "SimpleMathSliderLowRes+",
      "display_name": "\ud83d\udd27 Simple Math Slider low-res",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_essentials",
      "category": "essentials/utilities",
      "output_node": false
  },
  "SaveImageWebsocket": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "images"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveImageWebsocket",
      "display_name": "SaveImageWebsocket",
      "description": "",
      "python_module": "custom_nodes.websocket_image_save",
      "category": "api/image",
      "output_node": true
  },
  "Int": {
      "input": {
          "required": {
              "Number": [
                  "STRING",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "Number"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "Int",
      "display_name": "Int",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "Literals",
      "output_node": false
  },
  "Float": {
      "input": {
          "required": {
              "Number": [
                  "STRING",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "Number"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "Float",
      "display_name": "Float",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "Literals",
      "output_node": false
  },
  "String": {
      "input": {
          "required": {
              "String": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "String"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "String",
      "display_name": "String",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "Literals",
      "output_node": false
  },
  "KepStringLiteral": {
      "input": {
          "required": {
              "String": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "String"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "KepStringLiteral",
      "display_name": "String",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "Literals",
      "output_node": false
  },
  "Operation": {
      "input": {
          "required": {
              "A Type": [
                  [
                      "Int",
                      "Float"
                  ]
              ],
              "B Type": [
                  [
                      "Int",
                      "Float"
                  ]
              ],
              "Operation": [
                  [
                      "A+B",
                      "A-B",
                      "A*B",
                      "A/B"
                  ]
              ]
          },
          "optional": {
              "A - Int": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "A - Float": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ],
              "B - Int": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "B - Float": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "A Type",
              "B Type",
              "Operation"
          ],
          "optional": [
              "A - Int",
              "A - Float",
              "B - Int",
              "B - Float"
          ]
      },
      "output": [
          "INT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT"
      ],
      "name": "Operation",
      "display_name": "Operation",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "Literals",
      "output_node": false
  },
  "Checkpoint": {
      "input": {
          "required": {
              "literal": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "CRM.pth\ncardosAnime_v20.safetensors\ndisneyrealcartoonmix_v10.safetensors\ndynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors\nepicrealism_naturalSinRC1VAE.safetensors\nflat2DAnimerge_v45Sharp.safetensors\njuggernautXL_juggXIByRundiffusion.safetensors\njuggernautXL_v9Rdphoto2Lightning.safetensors\njuggernaut_reborn.safetensors\nmodernDisneyXL_v3.safetensors\nphoton_v1.safetensors\nrealisticVisionV60B1_v51HyperVAE.safetensors\nsd_xl_base_1.0.safetensors\nsd_xl_base_1.0_0.9vae.safetensors\nsd_xl_turbo_1.0.safetensors\nturbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "literal"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "Selected Checkpoints"
      ],
      "name": "Checkpoint",
      "display_name": "Checkpoint",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "List Stuff",
      "output_node": false
  },
  "Lora": {
      "input": {
          "required": {
              "literal": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "AnimateLCM_sd15_t2v_lora.safetensors\nLego_XL_v2.1.safetensors\nRed_Bull_Canned_Drink__Flux_Lora.safetensors\nRetro_Comic_Flux_v1_renderartist.safetensors\nflux_dev_frostinglane_araminta_k.safetensors\nflux_realism_lora.safetensors\nflux_spirited_away.safetensors\nip-adapter-faceid-plusv2_sd15_lora.safetensors\nip-adapter-faceid-plusv2_sdxl_lora.safetensors\nip-adapter-faceid_sd15_lora.safetensors\nip-adapter-faceid_sdxl_lora.safetensors\nps1_style_SDXL_v2.safetensors\nsdxl_lightning_4step_lora.safetensors\nyarn_art_Flux_LoRA.safetensors"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "literal"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "Selected Loras"
      ],
      "name": "Lora",
      "display_name": "Lora",
      "description": "",
      "python_module": "custom_nodes.ComfyLiterals",
      "category": "List Stuff",
      "output_node": false
  },
  "TimestepKeyframe": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "cn_weights": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "latent_keyframe": [
                  "LATENT_KEYFRAME"
              ],
              "null_latent_kf_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "mask_optional": [
                  "MASK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent"
          ],
          "optional": [
              "prev_timestep_kf",
              "strength",
              "cn_weights",
              "latent_keyframe",
              "null_latent_kf_strength",
              "inherit_missing",
              "guarantee_steps",
              "mask_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "TIMESTEP_KF"
      ],
      "name": "TimestepKeyframe",
      "display_name": "Timestep Keyframe \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "ACN_TimestepKeyframeInterpolation": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "strength_start": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "strength_end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease-in",
                      "ease-out",
                      "ease-in-out"
                  ]
              ],
              "intervals": [
                  "INT",
                  {
                      "default": 50,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "prev_timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "cn_weights": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "latent_keyframe": [
                  "LATENT_KEYFRAME"
              ],
              "null_latent_kf_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "mask_optional": [
                  "MASK"
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent",
              "strength_start",
              "strength_end",
              "interpolation",
              "intervals"
          ],
          "optional": [
              "prev_timestep_kf",
              "cn_weights",
              "latent_keyframe",
              "null_latent_kf_strength",
              "inherit_missing",
              "mask_optional",
              "print_keyframes"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "TIMESTEP_KF"
      ],
      "name": "ACN_TimestepKeyframeInterpolation",
      "display_name": "Timestep Keyframe Interp. \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "ACN_TimestepKeyframeFromStrengthList": {
      "input": {
          "required": {
              "float_strengths": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "cn_weights": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "latent_keyframe": [
                  "LATENT_KEYFRAME"
              ],
              "null_latent_kf_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "mask_optional": [
                  "MASK"
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_strengths",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "prev_timestep_kf",
              "cn_weights",
              "latent_keyframe",
              "null_latent_kf_strength",
              "inherit_missing",
              "mask_optional",
              "print_keyframes"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "TIMESTEP_KF"
      ],
      "name": "ACN_TimestepKeyframeFromStrengthList",
      "display_name": "Timestep Keyframe From List \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "LatentKeyframe": {
      "input": {
          "required": {
              "batch_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_latent_kf": [
                  "LATENT_KEYFRAME"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_index",
              "strength"
          ],
          "optional": [
              "prev_latent_kf"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "LATENT_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_KF"
      ],
      "name": "LatentKeyframe",
      "display_name": "Latent Keyframe \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "LatentKeyframeTiming": {
      "input": {
          "required": {
              "batch_index_from": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "batch_index_to_excl": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "strength_from": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "strength_to": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease-in",
                      "ease-out",
                      "ease-in-out"
                  ]
              ]
          },
          "optional": {
              "prev_latent_kf": [
                  "LATENT_KEYFRAME"
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_index_from",
              "batch_index_to_excl",
              "strength_from",
              "strength_to",
              "interpolation"
          ],
          "optional": [
              "prev_latent_kf",
              "print_keyframes"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "LATENT_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_KF"
      ],
      "name": "LatentKeyframeTiming",
      "display_name": "Latent Keyframe Interp. \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "LatentKeyframeBatchedGroup": {
      "input": {
          "required": {
              "float_strengths": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "prev_latent_kf": [
                  "LATENT_KEYFRAME"
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_strengths"
          ],
          "optional": [
              "prev_latent_kf",
              "print_keyframes"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "LATENT_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_KF"
      ],
      "name": "LatentKeyframeBatchedGroup",
      "display_name": "Latent Keyframe From List \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "LatentKeyframeGroup": {
      "input": {
          "required": {
              "index_strengths": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ]
          },
          "optional": {
              "prev_latent_kf": [
                  "LATENT_KEYFRAME"
              ],
              "latent_optional": [
                  "LATENT"
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index_strengths"
          ],
          "optional": [
              "prev_latent_kf",
              "latent_optional",
              "print_keyframes"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "LATENT_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT_KF"
      ],
      "name": "LatentKeyframeGroup",
      "display_name": "Latent Keyframe Group \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/keyframes",
      "output_node": false
  },
  "ACN_AdvancedControlNetApply_v2": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ],
              "timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "latent_kf_override": [
                  "LATENT_KEYFRAME"
              ],
              "weights_override": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "vae_optional": [
                  "VAE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "control_net",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "mask_optional",
              "timestep_kf",
              "latent_kf_override",
              "weights_override",
              "vae_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ACN_AdvancedControlNetApply_v2",
      "display_name": "Apply Advanced ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "output_node": false
  },
  "ACN_AdvancedControlNetApplySingle_v2": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ],
              "timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "latent_kf_override": [
                  "LATENT_KEYFRAME"
              ],
              "weights_override": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "vae_optional": [
                  "VAE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "control_net",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "mask_optional",
              "timestep_kf",
              "latent_kf_override",
              "weights_override",
              "vae_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "MODEL"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "model_opt"
      ],
      "name": "ACN_AdvancedControlNetApplySingle_v2",
      "display_name": "Apply Advanced ControlNet(1) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "output_node": false
  },
  "ACN_ControlNetLoaderAdvanced": {
      "input": {
          "required": {
              "cnet": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          },
          "optional": {
              "_tk_opt": [
                  "TIMESTEP_KEYFRAME"
              ]
          }
      },
      "input_order": {
          "required": [
              "cnet"
          ],
          "optional": [
              "_tk_opt"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_ControlNetLoaderAdvanced",
      "display_name": "Load Advanced ControlNet Model \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "output_node": false
  },
  "ACN_DiffControlNetLoaderAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "cnet": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          },
          "optional": {
              "_tk_opt": [
                  "TIMESTEP_KEYFRAME"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "cnet"
          ],
          "optional": [
              "_tk_opt"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_DiffControlNetLoaderAdvanced",
      "display_name": "Load Advanced ControlNet Model (diff) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "output_node": false
  },
  "ACN_ScaledSoftControlNetWeights": {
      "input": {
          "required": {
              "base_multiplier": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "base_multiplier"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_ScaledSoftControlNetWeights",
      "display_name": "Scaled Soft Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights",
      "output_node": false
  },
  "ScaledSoftMaskedUniversalWeights": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "min_base_multiplier": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "max_base_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "min_base_multiplier",
              "max_base_multiplier"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ScaledSoftMaskedUniversalWeights",
      "display_name": "Scaled Soft Masked Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights",
      "output_node": false
  },
  "ACN_SoftControlNetWeightsSD15": {
      "input": {
          "required": {
              "output_0": [
                  "FLOAT",
                  {
                      "default": 0.09941396206337118,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_1": [
                  "FLOAT",
                  {
                      "default": 0.12050177219802567,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_2": [
                  "FLOAT",
                  {
                      "default": 0.14606275417942507,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_3": [
                  "FLOAT",
                  {
                      "default": 0.17704576264172736,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_4": [
                  "FLOAT",
                  {
                      "default": 0.214600924414215,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_5": [
                  "FLOAT",
                  {
                      "default": 0.26012233262329093,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_6": [
                  "FLOAT",
                  {
                      "default": 0.3152997971191405,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_7": [
                  "FLOAT",
                  {
                      "default": 0.3821815722656249,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_8": [
                  "FLOAT",
                  {
                      "default": 0.4632503906249999,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_9": [
                  "FLOAT",
                  {
                      "default": 0.561515625,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_10": [
                  "FLOAT",
                  {
                      "default": 0.6806249999999999,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_11": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "middle_0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "output_0",
              "output_1",
              "output_2",
              "output_3",
              "output_4",
              "output_5",
              "output_6",
              "output_7",
              "output_8",
              "output_9",
              "output_10",
              "output_11",
              "middle_0"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_SoftControlNetWeightsSD15",
      "display_name": "ControlNet Soft Weights [SD1.5] \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/ControlNet",
      "output_node": false
  },
  "ACN_CustomControlNetWeightsSD15": {
      "input": {
          "required": {
              "output_0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_4": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_5": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_6": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_7": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_8": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_9": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_10": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "output_11": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "middle_0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "output_0",
              "output_1",
              "output_2",
              "output_3",
              "output_4",
              "output_5",
              "output_6",
              "output_7",
              "output_8",
              "output_9",
              "output_10",
              "output_11",
              "middle_0"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_CustomControlNetWeightsSD15",
      "display_name": "ControlNet Custom Weights [SD1.5] \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/ControlNet",
      "output_node": false
  },
  "ACN_CustomControlNetWeightsFlux": {
      "input": {
          "required": {
              "input_0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_4": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_5": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_6": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_7": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_8": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_9": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_10": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_11": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_12": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_13": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_14": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_15": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_16": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_17": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_18": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_0",
              "input_1",
              "input_2",
              "input_3",
              "input_4",
              "input_5",
              "input_6",
              "input_7",
              "input_8",
              "input_9",
              "input_10",
              "input_11",
              "input_12",
              "input_13",
              "input_14",
              "input_15",
              "input_16",
              "input_17",
              "input_18"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_CustomControlNetWeightsFlux",
      "display_name": "ControlNet Custom Weights [Flux] \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/ControlNet",
      "output_node": false
  },
  "ACN_SoftT2IAdapterWeights": {
      "input": {
          "required": {
              "input_0": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_1": [
                  "FLOAT",
                  {
                      "default": 0.62,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_2": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_0",
              "input_1",
              "input_2",
              "input_3"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_SoftT2IAdapterWeights",
      "display_name": "T2IAdapter Soft Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/T2IAdapter",
      "output_node": false
  },
  "ACN_CustomT2IAdapterWeights": {
      "input": {
          "required": {
              "input_0": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "input_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_0",
              "input_1",
              "input_2",
              "input_3"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_CustomT2IAdapterWeights",
      "display_name": "T2IAdapter Custom Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/T2IAdapter",
      "output_node": false
  },
  "ACN_DefaultUniversalWeights": {
      "input": {
          "optional": {
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ACN_DefaultUniversalWeights",
      "display_name": "Default Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights",
      "output_node": false
  },
  "ACN_ExtrasMiddleMult": {
      "input": {
          "required": {
              "middle_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "middle_mult"
          ],
          "optional": [
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CN_WEIGHTS_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "cn_extras"
      ],
      "name": "ACN_ExtrasMiddleMult",
      "display_name": "Middle Weight Extras \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/weights/extras",
      "output_node": false
  },
  "ACN_SparseCtrlRGBPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "latent_size": [
                  "LATENT"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae",
              "latent_size"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "proc_IMAGE"
      ],
      "name": "ACN_SparseCtrlRGBPreprocessor",
      "display_name": "RGB SparseCtrl \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl/preprocess",
      "output_node": false
  },
  "ACN_SparseCtrlLoaderAdvanced": {
      "input": {
          "required": {
              "sparsectrl_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "use_motion": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "motion_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "sparse_method": [
                  "SPARSE_METHOD"
              ],
              "tk_optional": [
                  "TIMESTEP_KEYFRAME"
              ],
              "context_aware": [
                  [
                      "nearest_hint",
                      "off"
                  ]
              ],
              "sparse_hint_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "sparse_nonhint_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "sparse_mask_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sparsectrl_name",
              "use_motion",
              "motion_strength",
              "motion_scale"
          ],
          "optional": [
              "sparse_method",
              "tk_optional",
              "context_aware",
              "sparse_hint_mult",
              "sparse_nonhint_mult",
              "sparse_mask_mult"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_SparseCtrlLoaderAdvanced",
      "display_name": "Load SparseCtrl Model \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl",
      "output_node": false
  },
  "ACN_SparseCtrlMergedLoaderAdvanced": {
      "input": {
          "required": {
              "sparsectrl_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "control_net_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "use_motion": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "motion_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "sparse_method": [
                  "SPARSE_METHOD"
              ],
              "tk_optional": [
                  "TIMESTEP_KEYFRAME"
              ]
          }
      },
      "input_order": {
          "required": [
              "sparsectrl_name",
              "control_net_name",
              "use_motion",
              "motion_strength",
              "motion_scale"
          ],
          "optional": [
              "sparse_method",
              "tk_optional"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_SparseCtrlMergedLoaderAdvanced",
      "display_name": "\ud83e\uddeaLoad Merged SparseCtrl Model \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl/experimental",
      "output_node": false
  },
  "ACN_SparseCtrlIndexMethodNode": {
      "input": {
          "required": {
              "indexes": [
                  "STRING",
                  {
                      "default": "0"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "indexes"
          ]
      },
      "output": [
          "SPARSE_METHOD"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SPARSE_METHOD"
      ],
      "name": "ACN_SparseCtrlIndexMethodNode",
      "display_name": "SparseCtrl Index Method \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl",
      "output_node": false
  },
  "ACN_SparseCtrlSpreadMethodNode": {
      "input": {
          "required": {
              "spread": [
                  [
                      "uniform",
                      "starting",
                      "ending",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "spread"
          ]
      },
      "output": [
          "SPARSE_METHOD"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SPARSE_METHOD"
      ],
      "name": "ACN_SparseCtrlSpreadMethodNode",
      "display_name": "SparseCtrl Spread Method \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl",
      "output_node": false
  },
  "ACN_SparseCtrlWeightExtras": {
      "input": {
          "optional": {
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ],
              "sparse_hint_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "sparse_nonhint_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "sparse_mask_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "cn_extras",
              "sparse_hint_mult",
              "sparse_nonhint_mult",
              "sparse_mask_mult"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CN_WEIGHTS_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "cn_extras"
      ],
      "name": "ACN_SparseCtrlWeightExtras",
      "display_name": "SparseCtrl Weight Extras \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/SparseCtrl/extras",
      "output_node": false
  },
  "ACN_ControlNet++LoaderSingle": {
      "input": {
          "required": {
              "name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "control_type": [
                  [
                      "openpose",
                      "depth",
                      "hed/pidi/scribble/ted",
                      "canny/lineart/mlsd",
                      "normal",
                      "segment",
                      "tile",
                      "inpaint/outpaint",
                      "none"
                  ],
                  {
                      "default": "none"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "name",
              "control_type"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_ControlNet++LoaderSingle",
      "display_name": "Load ControlNet++ Model (Single) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/ControlNet++",
      "output_node": false
  },
  "ACN_ControlNet++LoaderAdvanced": {
      "input": {
          "required": {
              "plus_input": [
                  "PLUS_INPUT"
              ],
              "name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "plus_input",
              "name"
          ]
      },
      "output": [
          "CONTROL_NET",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONTROL_NET",
          "IMAGE"
      ],
      "name": "ACN_ControlNet++LoaderAdvanced",
      "display_name": "Load ControlNet++ Model (Multi) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/ControlNet++",
      "output_node": false
  },
  "ACN_ControlNet++InputNode": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "control_type": [
                  [
                      "openpose",
                      "depth",
                      "hed/pidi/scribble/ted",
                      "canny/lineart/mlsd",
                      "normal",
                      "segment",
                      "tile",
                      "inpaint/outpaint"
                  ]
              ]
          },
          "optional": {
              "prev_plus_input": [
                  "PLUS_INPUT"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "control_type"
          ],
          "optional": [
              "prev_plus_input"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "PLUS_INPUT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PLUS_INPUT"
      ],
      "name": "ACN_ControlNet++InputNode",
      "display_name": "ControlNet++ Input \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/ControlNet++",
      "output_node": false
  },
  "ACN_CtrLoRALoader": {
      "input": {
          "required": {
              "base": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "lora": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "base",
              "lora"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_CtrLoRALoader",
      "display_name": "Load CtrLoRA Model \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/ControlNet++",
      "output_node": false
  },
  "ACN_ReferencePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "latent_size": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae",
              "latent_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "proc_IMAGE"
      ],
      "name": "ACN_ReferencePreprocessor",
      "display_name": "Reference Preproccessor \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/Reference/preprocess",
      "output_node": false
  },
  "ACN_ReferenceControlNet": {
      "input": {
          "required": {
              "reference_type": [
                  [
                      "reference_attn",
                      "reference_adain",
                      "reference_attn+adain"
                  ]
              ],
              "style_fidelity": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "reference_type",
              "style_fidelity",
              "ref_weight"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_ReferenceControlNet",
      "display_name": "Reference ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/Reference",
      "output_node": false
  },
  "ACN_ReferenceControlNetFinetune": {
      "input": {
          "required": {
              "attn_style_fidelity": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_style_fidelity": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "attn_style_fidelity",
              "attn_ref_weight",
              "attn_strength",
              "adain_style_fidelity",
              "adain_ref_weight",
              "adain_strength"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ACN_ReferenceControlNetFinetune",
      "display_name": "Reference ControlNet (Finetune) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "Adv-ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d/Reference",
      "output_node": false
  },
  "LoadImagesFromDirectory": {
      "input": {
          "required": {
              "directory": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "directory"
          ],
          "optional": [
              "image_load_cap",
              "start_index"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "name": "LoadImagesFromDirectory",
      "display_name": "\ud83d\udeabLoad Images [DEPRECATED] \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false
  },
  "ScaledSoftControlNetWeights": {
      "input": {
          "required": {
              "base_multiplier": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "flip_weights": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "base_multiplier",
              "flip_weights"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "ScaledSoftControlNetWeights",
      "display_name": "Scaled Soft Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false
  },
  "SoftControlNetWeights": {
      "input": {
          "required": {
              "weight_00": [
                  "FLOAT",
                  {
                      "default": 0.09941396206337118,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_01": [
                  "FLOAT",
                  {
                      "default": 0.12050177219802567,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_02": [
                  "FLOAT",
                  {
                      "default": 0.14606275417942507,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_03": [
                  "FLOAT",
                  {
                      "default": 0.17704576264172736,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_04": [
                  "FLOAT",
                  {
                      "default": 0.214600924414215,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_05": [
                  "FLOAT",
                  {
                      "default": 0.26012233262329093,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_06": [
                  "FLOAT",
                  {
                      "default": 0.3152997971191405,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_07": [
                  "FLOAT",
                  {
                      "default": 0.3821815722656249,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_08": [
                  "FLOAT",
                  {
                      "default": 0.4632503906249999,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_09": [
                  "FLOAT",
                  {
                      "default": 0.561515625,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_10": [
                  "FLOAT",
                  {
                      "default": 0.6806249999999999,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_11": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_12": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "flip_weights": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weight_00",
              "weight_01",
              "weight_02",
              "weight_03",
              "weight_04",
              "weight_05",
              "weight_06",
              "weight_07",
              "weight_08",
              "weight_09",
              "weight_10",
              "weight_11",
              "weight_12",
              "flip_weights"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "SoftControlNetWeights",
      "display_name": "ControlNet Soft Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "CustomControlNetWeights": {
      "input": {
          "required": {
              "weight_00": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_01": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_02": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_03": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_04": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_05": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_06": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_07": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_08": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_09": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_10": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_11": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_12": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "flip_weights": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weight_00",
              "weight_01",
              "weight_02",
              "weight_03",
              "weight_04",
              "weight_05",
              "weight_06",
              "weight_07",
              "weight_08",
              "weight_09",
              "weight_10",
              "weight_11",
              "weight_12",
              "flip_weights"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "CustomControlNetWeights",
      "display_name": "ControlNet Custom Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "SoftT2IAdapterWeights": {
      "input": {
          "required": {
              "weight_00": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_01": [
                  "FLOAT",
                  {
                      "default": 0.62,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_02": [
                  "FLOAT",
                  {
                      "default": 0.825,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_03": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "flip_weights": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weight_00",
              "weight_01",
              "weight_02",
              "weight_03",
              "flip_weights"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "SoftT2IAdapterWeights",
      "display_name": "T2IAdapter Soft Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "CustomT2IAdapterWeights": {
      "input": {
          "required": {
              "weight_00": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_01": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_02": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "weight_03": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "flip_weights": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weight_00",
              "weight_01",
              "weight_02",
              "weight_03",
              "flip_weights"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "CustomT2IAdapterWeights",
      "display_name": "T2IAdapter Custom Weights \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ACN_AdvancedControlNetApply": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ],
              "timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "latent_kf_override": [
                  "LATENT_KEYFRAME"
              ],
              "weights_override": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "model_optional": [
                  "MODEL"
              ],
              "vae_optional": [
                  "VAE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "control_net",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "mask_optional",
              "timestep_kf",
              "latent_kf_override",
              "weights_override",
              "model_optional",
              "vae_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "MODEL"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "model_opt"
      ],
      "name": "ACN_AdvancedControlNetApply",
      "display_name": "Apply Advanced ControlNet \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ACN_AdvancedControlNetApplySingle": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ],
              "timestep_kf": [
                  "TIMESTEP_KEYFRAME"
              ],
              "latent_kf_override": [
                  "LATENT_KEYFRAME"
              ],
              "weights_override": [
                  "CONTROL_NET_WEIGHTS"
              ],
              "model_optional": [
                  "MODEL"
              ],
              "vae_optional": [
                  "VAE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "control_net",
              "image",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "mask_optional",
              "timestep_kf",
              "latent_kf_override",
              "weights_override",
              "model_optional",
              "vae_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "MODEL"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "model_opt"
      ],
      "name": "ACN_AdvancedControlNetApplySingle",
      "display_name": "Apply Advanced ControlNet(1) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ControlNetLoaderAdvanced": {
      "input": {
          "required": {
              "control_net_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          },
          "optional": {
              "tk_optional": [
                  "TIMESTEP_KEYFRAME"
              ]
          }
      },
      "input_order": {
          "required": [
              "control_net_name"
          ],
          "optional": [
              "tk_optional"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "ControlNetLoaderAdvanced",
      "display_name": "Load Advanced ControlNet Model \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "DiffControlNetLoaderAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "control_net_name": [
                  [
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ]
          },
          "optional": {
              "tk_optional": [
                  "TIMESTEP_KEYFRAME"
              ]
          },
          "hidden": {
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "control_net_name"
          ],
          "optional": [
              "tk_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "DiffControlNetLoaderAdvanced",
      "display_name": "Load Advanced ControlNet Model (diff) \ud83d\udec2\ud83c\udd50\ud83c\udd52\ud83c\udd5d",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Advanced-ControlNet",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ChatGPT Simple _O": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "model": [
                  [
                      "@cf/meta/llama-2-7b-chat-int8",
                      "gpt-3.5-turbo"
                  ],
                  {
                      "default": "@cf/meta/llama-2-7b-chat-int8"
                  }
              ],
              "behaviour": [
                  [
                      "tags",
                      "description"
                  ],
                  {
                      "default": "description"
                  }
              ]
          },
          "optional": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt",
              "model",
              "behaviour"
          ],
          "optional": [
              "seed"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ChatGPT Simple _O",
      "display_name": "ChatGPT Simple _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI",
      "output_node": false
  },
  "ChatGPT compact _O": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "initMsg": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n"
                  }
              ],
              "model": [
                  [
                      "@cf/meta/llama-2-7b-chat-int8",
                      "gpt-3.5-turbo"
                  ],
                  {
                      "default": "gpt-3.5-turbo"
                  }
              ]
          },
          "optional": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt",
              "initMsg",
              "model"
          ],
          "optional": [
              "seed"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ChatGPT compact _O",
      "display_name": "ChatGPT compact _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI",
      "output_node": false
  },
  "load_openAI _O": {
      "input": {
          "required": {
              "base_url": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "https://openai-cf.realnow.workers.dev/v1"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "base_url",
              "api_key"
          ]
      },
      "output": [
          "CLIENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CLIENT"
      ],
      "name": "load_openAI _O",
      "display_name": "load_openAI _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced",
      "output_node": false
  },
  "Chat_Message _O": {
      "input": {
          "required": {
              "role": [
                  [
                      "user",
                      "assistant",
                      "system"
                  ],
                  {
                      "default": "user"
                  }
              ],
              "content": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "\nact as prompt generator ,i will give you text and you describe an image that match that text in details use gelbooru  tags in your description also describe the high quality of the image, answer with one response only \n"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "role",
              "content"
          ]
      },
      "output": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "name": "Chat_Message _O",
      "display_name": "Chat_Message _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced/ChatGPT",
      "output_node": false
  },
  "combine_chat_messages _O": {
      "input": {
          "required": {
              "message1": [
                  "OPENAI_CHAT_MESSAGES"
              ],
              "message2": [
                  "OPENAI_CHAT_MESSAGES"
              ]
          }
      },
      "input_order": {
          "required": [
              "message1",
              "message2"
          ]
      },
      "output": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "name": "combine_chat_messages _O",
      "display_name": "combine_chat_messages _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced/ChatGPT",
      "output_node": false
  },
  "Chat completion _O": {
      "input": {
          "required": {
              "client": [
                  "CLIENT"
              ],
              "model": [
                  [
                      "@cf/meta/llama-2-7b-chat-int8",
                      "gpt-3.5-turbo"
                  ],
                  {
                      "default": "gpt-3.5-turbo"
                  }
              ],
              "messages": [
                  "OPENAI_CHAT_MESSAGES"
              ]
          },
          "optional": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "client",
              "model",
              "messages"
          ],
          "optional": [
              "seed"
          ]
      },
      "output": [
          "STRING",
          "OPENAI_CHAT_COMPLETION"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "OPENAI_CHAT_COMPLETION"
      ],
      "name": "Chat completion _O",
      "display_name": "Chat completion _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced/ChatGPT",
      "output_node": true
  },
  "create image _O": {
      "input": {
          "required": {
              "client": [
                  "CLIENT"
              ],
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "number": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ],
              "size": [
                  [
                      "256x256",
                      "512x512",
                      "1024x1024"
                  ],
                  {
                      "default": "256x256"
                  }
              ]
          },
          "optional": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "client",
              "prompt",
              "number",
              "size"
          ],
          "optional": [
              "seed"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "create image _O",
      "display_name": "create image _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced/Image",
      "output_node": true
  },
  "variation_image _O": {
      "input": {
          "required": {
              "client": [
                  "CLIENT"
              ],
              "image": [
                  "IMAGE"
              ],
              "number": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ],
              "size": [
                  [
                      "256x256",
                      "512x512",
                      "1024x1024"
                  ],
                  {
                      "default": "256x256"
                  }
              ]
          },
          "optional": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "client",
              "image",
              "number",
              "size"
          ],
          "optional": [
              "seed"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "variation_image _O",
      "display_name": "variation_image _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced/Image",
      "output_node": true
  },
  "LatentUpscaleFactor _O": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area"
                  ]
              ],
              "WidthFactor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "HeightFactor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_method",
              "WidthFactor",
              "HeightFactor",
              "crop"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentUpscaleFactor _O",
      "display_name": "LatentUpscaleFactor _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/latent",
      "output_node": false
  },
  "LatentUpscaleFactorSimple _O": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area"
                  ]
              ],
              "factor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_method",
              "factor",
              "crop"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentUpscaleFactorSimple _O",
      "display_name": "LatentUpscaleFactorSimple _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/latent",
      "output_node": false
  },
  "selectLatentFromBatch _O": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "index"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "selectLatentFromBatch _O",
      "display_name": "selectLatentFromBatch _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/latent",
      "output_node": false
  },
  "RandomNSP _O": {
      "input": {
          "required": {
              "terminology": [
                  [
                      "fantasy-creature",
                      "gen-modifier",
                      "adj-beauty",
                      "noun-beauty",
                      "noun-fantasy",
                      "adj-horror",
                      "noun-emote",
                      "noun-horror",
                      "adj-architecture",
                      "nationality",
                      "pop-location",
                      "pop-culture",
                      "site",
                      "style",
                      "hd",
                      "aspect-ratio",
                      "3d-terms",
                      "color-palette",
                      "camera",
                      "camera-manu",
                      "f-stop",
                      "iso-stop",
                      "focal-length",
                      "photo-term",
                      "adj-general",
                      "noun-general",
                      "color",
                      "artist",
                      "identity",
                      "identity-adult",
                      "identity-young",
                      "punk",
                      "hair",
                      "bodyshape",
                      "skin-color",
                      "eyecolor",
                      "fantasy-setting",
                      "details",
                      "portrait-type",
                      "occupation",
                      "celeb",
                      "neg-weight",
                      "landscape-type",
                      "animals",
                      "gender",
                      "gender-ext",
                      "movement",
                      "body-heavy",
                      "body-light",
                      "body-fit",
                      "body-poor",
                      "body-shape",
                      "body-short",
                      "body-tall",
                      "quantity",
                      "scenario-desc",
                      "games",
                      "foods",
                      "rpg-Item",
                      "trippy",
                      "cosmic-star",
                      "cosmic-nebula",
                      "cosmic-galaxy",
                      "cosmic-terms",
                      "flower",
                      "dinosaur",
                      "natl-park",
                      "fruit",
                      "tree",
                      "wh-site",
                      "forest-type",
                      "water",
                      "fish",
                      "artist-botanical",
                      "artist-surreal",
                      "bird",
                      "movie",
                      "movie-director",
                      "comic",
                      "penciller",
                      "album-cover",
                      "band"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "terminology",
              "seed"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "RandomNSP _O",
      "display_name": "RandomNSP _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/NSP",
      "output_node": false
  },
  "ConcatRandomNSP_O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "defaultBehavior": "input"
                  }
              ],
              "terminology": [
                  [
                      "fantasy-creature",
                      "gen-modifier",
                      "adj-beauty",
                      "noun-beauty",
                      "noun-fantasy",
                      "adj-horror",
                      "noun-emote",
                      "noun-horror",
                      "adj-architecture",
                      "nationality",
                      "pop-location",
                      "pop-culture",
                      "site",
                      "style",
                      "hd",
                      "aspect-ratio",
                      "3d-terms",
                      "color-palette",
                      "camera",
                      "camera-manu",
                      "f-stop",
                      "iso-stop",
                      "focal-length",
                      "photo-term",
                      "adj-general",
                      "noun-general",
                      "color",
                      "artist",
                      "identity",
                      "identity-adult",
                      "identity-young",
                      "punk",
                      "hair",
                      "bodyshape",
                      "skin-color",
                      "eyecolor",
                      "fantasy-setting",
                      "details",
                      "portrait-type",
                      "occupation",
                      "celeb",
                      "neg-weight",
                      "landscape-type",
                      "animals",
                      "gender",
                      "gender-ext",
                      "movement",
                      "body-heavy",
                      "body-light",
                      "body-fit",
                      "body-poor",
                      "body-shape",
                      "body-short",
                      "body-tall",
                      "quantity",
                      "scenario-desc",
                      "games",
                      "foods",
                      "rpg-Item",
                      "trippy",
                      "cosmic-star",
                      "cosmic-nebula",
                      "cosmic-galaxy",
                      "cosmic-terms",
                      "flower",
                      "dinosaur",
                      "natl-park",
                      "fruit",
                      "tree",
                      "wh-site",
                      "forest-type",
                      "water",
                      "fish",
                      "artist-botanical",
                      "artist-surreal",
                      "bird",
                      "movie",
                      "movie-director",
                      "comic",
                      "penciller",
                      "album-cover",
                      "band"
                  ]
              ],
              "separator": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ","
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "terminology",
              "separator",
              "seed"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ConcatRandomNSP_O",
      "display_name": "ConcatRandomNSP_O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/NSP",
      "output_node": false
  },
  "Concat Text _O": {
      "input": {
          "required": {},
          "optional": {
              "text1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "defaultBehavior": "input"
                  }
              ],
              "text2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "defaultBehavior": "input"
                  }
              ],
              "text3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "defaultBehavior": "input"
                  }
              ],
              "text4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "defaultBehavior": "input"
                  }
              ],
              "text5": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "defaultBehavior": "input"
                  }
              ],
              "text6": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text7": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text8": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text9": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text10": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text11": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text12": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text13": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "separator": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ","
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "text1",
              "text2",
              "text3",
              "text4",
              "text5",
              "text6",
              "text7",
              "text8",
              "text9",
              "text10",
              "text11",
              "text12",
              "text13",
              "separator"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Concat Text _O",
      "display_name": "Concat Text _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/operations",
      "output_node": false
  },
  "QOL Split String": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "text"
                  }
              ]
          },
          "optional": {
              "delimiter": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ","
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ],
          "optional": [
              "delimiter"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "string_1",
          "string_2",
          "string_3",
          "string_4",
          "string_5",
          "string_6",
          "string_7",
          "string_8",
          "string_9",
          "string_10",
          "string_11",
          "string_12",
          "string_13"
      ],
      "name": "QOL Split String",
      "display_name": "QOL Split String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/operations",
      "output_node": false
  },
  "Trim Text _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "defaultBehavior": "input"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Trim Text _O",
      "display_name": "Trim Text _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/operations",
      "output_node": false
  },
  "Replace Text _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "defaultBehavior": "input"
                  }
              ],
              "old": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "new": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "old",
              "new"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Replace Text _O",
      "display_name": "Replace Text _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text/operations",
      "output_node": false
  },
  "saveTextToFile _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false,
                      "defaultBehavior": "input"
                  }
              ],
              "filename": [
                  "STRING",
                  {
                      "default": "log.txt",
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "append": [
                  [
                      "true",
                      "false"
                  ],
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "filename"
          ],
          "optional": [
              "append"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "saveTextToFile _O",
      "display_name": "saveTextToFile _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text",
      "output_node": true
  },
  "Text2Image _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "font": [
                  [
                      "CALIBRI.TTF",
                      "COMIC.TTF",
                      "COMICI.TTF",
                      "COMICZ.TTF",
                      "Alkatra.ttf"
                  ],
                  {
                      "default": "CALIBRI.TTF"
                  }
              ],
              "size": [
                  "INT",
                  {
                      "default": 36,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_R": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_G": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_B": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_A": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_R": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_G": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_B": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_A": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 0,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 0,
                      "step": 1
                  }
              ],
              "expand": [
                  [
                      "true",
                      "false"
                  ],
                  {
                      "default": "true"
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -100,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "font",
              "size",
              "font_R",
              "font_G",
              "font_B",
              "font_A",
              "background_R",
              "background_G",
              "background_B",
              "background_A",
              "width",
              "height",
              "expand",
              "x",
              "y"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Text2Image _O",
      "display_name": "Text2Image _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/text",
      "output_node": false
  },
  "ImageScaleFactor _O": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area"
                  ]
              ],
              "WidthFactor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "HeightFactor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "MulOf46": [
                  [
                      "enabled",
                      "disabled"
                  ],
                  {
                      "default": "enabled"
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_method",
              "WidthFactor",
              "HeightFactor",
              "MulOf46",
              "crop"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageScaleFactor _O",
      "display_name": "ImageScaleFactor _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/image",
      "output_node": false
  },
  "ImageScaleFactorSimple _O": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area"
                  ]
              ],
              "Factor": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.28125
                  }
              ],
              "MulOf46": [
                  [
                      "enabled",
                      "disabled"
                  ],
                  {
                      "default": "enabled"
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_method",
              "Factor",
              "MulOf46",
              "crop"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageScaleFactorSimple _O",
      "display_name": "ImageScaleFactorSimple _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/image",
      "output_node": false
  },
  "Equation1param _O": {
      "input": {
          "required": {
              "x": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ],
              "equation": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "x*1"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "equation"
          ]
      },
      "output": [
          "FLOAT",
          "int"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "int"
      ],
      "name": "Equation1param _O",
      "display_name": "Equation1param _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "Equation2params _O": {
      "input": {
          "required": {
              "x": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ],
              "equation": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "x+y"
                  }
              ]
          },
          "optional": {
              "equation_2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "x+y"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "equation"
          ],
          "optional": [
              "equation_2"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "FLOAT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "INT",
          "FLOAT",
          "INT"
      ],
      "name": "Equation2params _O",
      "display_name": "Equation2params _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "floatToInt _O": {
      "input": {
          "required": {
              "float": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "floatToInt _O",
      "display_name": "floatToInt _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "intToFloat _O": {
      "input": {
          "required": {
              "int": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "int"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "intToFloat _O",
      "display_name": "intToFloat _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "floatToText _O": {
      "input": {
          "required": {
              "float": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615,
                      "defaultBehavior": "input"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "floatToText _O",
      "display_name": "floatToText _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "GetImage_(Width&Height) _O": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "INT"
      ],
      "name": "GetImage_(Width&Height) _O",
      "display_name": "GetImage_(Width&Height) _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "GetLatent_(Width&Height) _O": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "INT"
      ],
      "name": "GetLatent_(Width&Height) _O",
      "display_name": "GetLatent_(Width&Height) _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/numbers",
      "output_node": false
  },
  "debug messages_O": {
      "input": {
          "required": {
              "messages": [
                  "OPENAI_CHAT_MESSAGES"
              ]
          }
      },
      "input_order": {
          "required": [
              "messages"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "debug messages_O",
      "display_name": "debug messages_O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/debug/OpenAI/Advanced/ChatGPT",
      "output_node": true
  },
  "debug Completeion _O": {
      "input": {
          "required": {
              "completion": [
                  "OPENAI_CHAT_COMPLETION"
              ]
          }
      },
      "input_order": {
          "required": [
              "completion"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "debug Completeion _O",
      "display_name": "debug Completeion _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/debug/OpenAI/Advanced/ChatGPT",
      "output_node": true
  },
  "Debug Text _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "defaultBehavior": "input"
                  }
              ],
              "prefix": [
                  "STRING",
                  {
                      "default": "debug",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "prefix"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Debug Text _O",
      "display_name": "Debug Text _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/debug/text",
      "output_node": true
  },
  "Debug Text route _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "defaultBehavior": "input"
                  }
              ],
              "prefix": [
                  "STRING",
                  {
                      "default": "debug",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "prefix"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Debug Text route _O",
      "display_name": "Debug Text route _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/debug/text",
      "output_node": false
  },
  "Note _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Note _O",
      "display_name": "Note _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/utils",
      "output_node": true
  },
  "Text _O": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Text _O",
      "display_name": "Text _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/utils",
      "output_node": false
  },
  "seed _O": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "seed _O",
      "display_name": "seed _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/utils",
      "output_node": false
  },
  "int _O": {
      "input": {
          "required": {
              "int": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "int"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "int _O",
      "display_name": "int _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/utils",
      "output_node": false
  },
  "float _O": {
      "input": {
          "required": {
              "float": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "float _O",
      "display_name": "float _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/utils",
      "output_node": false
  },
  "ChatGPT _O": {
      "input": {
          "required": {
              "api_key_file": [
                  "STRING",
                  {
                      "file": true,
                      "default": "api_key.txt"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "api_key_file"
          ]
      },
      "output": [
          "OPENAI"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "OPENAI"
      ],
      "name": "ChatGPT _O",
      "display_name": "ChatGPT _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/OpenAI/Advanced",
      "output_node": false
  },
  "Chat_Message_fromString _O": {
      "input": {
          "required": {
              "role": [
                  [
                      "user",
                      "assistant",
                      "system"
                  ],
                  {
                      "default": "user"
                  }
              ],
              "content": [
                  "STR"
              ]
          }
      },
      "input_order": {
          "required": [
              "role",
              "content"
          ]
      },
      "output": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "name": "Chat_Message_fromString _O",
      "display_name": "Chat_Message_fromString _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
      "output_node": false
  },
  "compine_chat_messages _O": {
      "input": {
          "required": {
              "message1": [
                  "OPENAI_CHAT_MESSAGES"
              ],
              "message2": [
                  "OPENAI_CHAT_MESSAGES"
              ]
          }
      },
      "input_order": {
          "required": [
              "message1",
              "message2"
          ]
      },
      "output": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "OPENAI_CHAT_MESSAGES"
      ],
      "name": "compine_chat_messages _O",
      "display_name": "compine_chat_messages _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
      "output_node": false
  },
  "Chat_Completion _O": {
      "input": {
          "required": {
              "openai": [
                  "OPENAI"
              ],
              "model": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "gpt-3.5-turbo"
                  }
              ],
              "messages": [
                  "OPENAI_CHAT_MESSAGES"
              ]
          }
      },
      "input_order": {
          "required": [
              "openai",
              "model",
              "messages"
          ]
      },
      "output": [
          "STR",
          "OPENAI_CHAT_COMPLETION"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STR",
          "OPENAI_CHAT_COMPLETION"
      ],
      "name": "Chat_Completion _O",
      "display_name": "Chat_Completion _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/OpenAI/Advanced/ChatGPT",
      "output_node": true
  },
  "create_image _O": {
      "input": {
          "required": {
              "openai": [
                  "OPENAI"
              ],
              "prompt": [
                  "STR"
              ],
              "number": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ],
              "size": [
                  [
                      "256x256",
                      "512x512",
                      "1024x1024"
                  ],
                  {
                      "default": "256x256"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "openai",
              "prompt",
              "number",
              "size"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "create_image _O",
      "display_name": "create_image _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/OpenAI/Advanced/Image",
      "output_node": true
  },
  "String _O": {
      "input": {
          "required": {
              "string": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string"
          ]
      },
      "output": [
          "STR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STR"
      ],
      "name": "String _O",
      "display_name": "String _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string",
      "output_node": false
  },
  "Debug String _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ]
          }
      },
      "input_order": {
          "required": [
              "string"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Debug String _O",
      "display_name": "Debug String _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string",
      "output_node": true
  },
  "concat Strings _O": {
      "input": {
          "required": {
              "string1": [
                  "STR"
              ],
              "string2": [
                  "STR"
              ]
          }
      },
      "input_order": {
          "required": [
              "string1",
              "string2"
          ]
      },
      "output": [
          "STR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STR"
      ],
      "name": "concat Strings _O",
      "display_name": "concat Strings _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string/operations",
      "output_node": false
  },
  "trim String _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ]
          }
      },
      "input_order": {
          "required": [
              "string"
          ]
      },
      "output": [
          "STR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STR"
      ],
      "name": "trim String _O",
      "display_name": "trim String _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string/operations",
      "output_node": false
  },
  "replace String _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ],
              "old": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "new": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "old",
              "new"
          ]
      },
      "output": [
          "STR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STR"
      ],
      "name": "replace String _O",
      "display_name": "replace String _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string/operations",
      "output_node": false
  },
  "replace String advanced _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ],
              "old": [
                  "STR"
              ],
              "new": [
                  "STR"
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "old",
              "new"
          ]
      },
      "output": [
          "STR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STR"
      ],
      "name": "replace String advanced _O",
      "display_name": "replace String advanced _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string/operations",
      "output_node": false
  },
  "string2Image _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ],
              "font": [
                  "STRING",
                  {
                      "default": "CALIBRI.TTF",
                      "multiline": false
                  }
              ],
              "size": [
                  "INT",
                  {
                      "default": 36,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_R": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_G": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "font_B": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_R": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_G": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "background_B": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "font",
              "size",
              "font_R",
              "font_G",
              "font_B",
              "background_R",
              "background_G",
              "background_B"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "string2Image _O",
      "display_name": "string2Image _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string",
      "output_node": false
  },
  "CLIPStringEncode _O": {
      "input": {
          "required": {
              "string": [
                  "STR"
              ],
              "clip": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "clip"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPStringEncode _O",
      "display_name": "CLIPStringEncode _O",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/string",
      "output_node": false
  },
  "LatentUpscaleMultiply": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area"
                  ]
              ],
              "WidthMul": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "HeightMul": [
                  "FLOAT",
                  {
                      "default": 1.25,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_method",
              "WidthMul",
              "HeightMul",
              "crop"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentUpscaleMultiply",
      "display_name": "LatentUpscaleMultiply",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-QualityOfLifeSuit_Omar92",
      "category": "O/deprecated/latent",
      "output_node": false
  },
  "Image Text Overlay": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "Hello"
                  }
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 256,
                      "step": 1
                  }
              ],
              "x": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "font": [
                  "STRING",
                  {
                      "default": "arial.ttf"
                  }
              ],
              "alignment": [
                  [
                      "left",
                      "right",
                      "center"
                  ],
                  {
                      "default": "left"
                  }
              ],
              "color": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16777215,
                      "step": 1,
                      "display": "color"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text",
              "font_size",
              "x",
              "y",
              "font",
              "alignment",
              "color"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Image Text Overlay",
      "display_name": "Image Text Overlay",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-text-overlay",
      "category": "image/text",
      "output_node": false
  },
  "Mask By Text": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "negative_prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "precision": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "normalize": [
                  [
                      "no",
                      "yes"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "prompt",
              "negative_prompt",
              "precision",
              "normalize"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "thresholded_mask",
          "raw_mask"
      ],
      "name": "Mask By Text",
      "display_name": "Mask By Text",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Mask Morphology": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "distance": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 128,
                      "step": 1
                  }
              ],
              "op": [
                  [
                      "dilate",
                      "erode",
                      "open",
                      "close"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "distance",
              "op"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Mask Morphology",
      "display_name": "Mask Morphology",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Combine Masks": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "op": [
                  [
                      "union (max)",
                      "intersection (min)",
                      "difference",
                      "multiply",
                      "multiply_alpha",
                      "add",
                      "greater_or_equal",
                      "greater"
                  ]
              ],
              "clamp_result": [
                  [
                      "yes",
                      "no"
                  ]
              ],
              "round_result": [
                  [
                      "no",
                      "yes"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "op",
              "clamp_result",
              "round_result"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Combine Masks",
      "display_name": "Combine Masks",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Unary Mask Op": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "op": [
                  [
                      "invert",
                      "average",
                      "round",
                      "clamp",
                      "abs"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "op"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Unary Mask Op",
      "display_name": "Unary Mask Op",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Unary Image Op": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "op": [
                  [
                      "invert",
                      "average",
                      "round",
                      "clamp",
                      "abs"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "op"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Unary Image Op",
      "display_name": "Unary Image Op",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Blur": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "radius": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 48,
                      "step": 1
                  }
              ],
              "sigma_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 3.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "radius",
              "sigma_factor"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Blur",
      "display_name": "Blur",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Image To Mask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "method": [
                  [
                      "intensity",
                      "alpha"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "method"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "Image To Mask",
      "display_name": "Image To Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Mix Images By Mask": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "mask": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Mix Images By Mask",
      "display_name": "Mix Images By Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Mix Color By Mask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "r": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "g": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "b": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "mask": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "r",
              "g",
              "b",
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Mix Color By Mask",
      "display_name": "Mix Color By Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Mask To Region": {
      "input": {
          "required": {
              "mask": [
                  "IMAGE"
              ],
              "padding": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "constraints": [
                  [
                      "keep_ratio",
                      "keep_ratio_divisible",
                      "multiple_of",
                      "ignore"
                  ]
              ],
              "constraint_x": [
                  "INT",
                  {
                      "default": 64,
                      "min": 2,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "constraint_y": [
                  "INT",
                  {
                      "default": 64,
                      "min": 2,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "min_width": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "min_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "batch_behavior": [
                  [
                      "match_ratio",
                      "match_size"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "padding",
              "constraints",
              "constraint_x",
              "constraint_y",
              "min_width",
              "min_height",
              "batch_behavior"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Mask To Region",
      "display_name": "Mask To Region",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Cut By Mask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "IMAGE"
              ],
              "force_resize_width": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "force_resize_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask_mapping_optional": [
                  "MASK_MAPPING"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "mask",
              "force_resize_width",
              "force_resize_height"
          ],
          "optional": [
              "mask_mapping_optional"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Cut By Mask",
      "display_name": "Cut By Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Paste By Mask": {
      "input": {
          "required": {
              "image_base": [
                  "IMAGE"
              ],
              "image_to_paste": [
                  "IMAGE"
              ],
              "mask": [
                  "IMAGE"
              ],
              "resize_behavior": [
                  [
                      "resize",
                      "keep_ratio_fill",
                      "keep_ratio_fit",
                      "source_size",
                      "source_size_unmasked"
                  ]
              ]
          },
          "optional": {
              "mask_mapping_optional": [
                  "MASK_MAPPING"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_base",
              "image_to_paste",
              "mask",
              "resize_behavior"
          ],
          "optional": [
              "mask_mapping_optional"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Paste By Mask",
      "display_name": "Paste By Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Get Image Size": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "width",
          "height"
      ],
      "name": "Get Image Size",
      "display_name": "Get Image Size",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Change Channel Count": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "kind": [
                  [
                      "mask",
                      "RGB",
                      "RGBA"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "kind"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Change Channel Count",
      "display_name": "Change Channel Count",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Constant Mask": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -8.0,
                      "max": 8.0,
                      "step": 0.01
                  }
              ],
              "explicit_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "explicit_width": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "copy_image_size": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "explicit_height",
              "explicit_width"
          ],
          "optional": [
              "copy_image_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Constant Mask",
      "display_name": "Constant Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Prune By Mask": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Prune By Mask",
      "display_name": "Prune By Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Separate Mask Components": {
      "input": {
          "required": {
              "mask": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "IMAGE",
          "MASK_MAPPING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_mappings"
      ],
      "name": "Separate Mask Components",
      "display_name": "Separate Mask Components",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Create Rect Mask": {
      "input": {
          "required": {
              "mode": [
                  [
                      "percent",
                      "pixels"
                  ]
              ],
              "origin": [
                  [
                      "topleft",
                      "bottomleft",
                      "topright",
                      "bottomright"
                  ]
              ],
              "x": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "width": [
                  "FLOAT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "height": [
                  "FLOAT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 1048576,
                      "step": 1
                  }
              ],
              "image_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 1048576,
                      "step": 64
                  }
              ],
              "image_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 1048576,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "copy_image_size": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "origin",
              "x",
              "y",
              "width",
              "height",
              "image_width",
              "image_height"
          ],
          "optional": [
              "copy_image_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Create Rect Mask",
      "display_name": "Create Rect Mask",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Make Image Batch": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ]
          },
          "optional": {
              "image2": [
                  "IMAGE"
              ],
              "image3": [
                  "IMAGE"
              ],
              "image4": [
                  "IMAGE"
              ],
              "image5": [
                  "IMAGE"
              ],
              "image6": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1"
          ],
          "optional": [
              "image2",
              "image3",
              "image4",
              "image5",
              "image6"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Make Image Batch",
      "display_name": "Make Image Batch",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Create QR Code": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096,
                      "step": 64
                  }
              ],
              "qr_version": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 40,
                      "step": 1
                  }
              ],
              "error_correction": [
                  [
                      "L",
                      "M",
                      "Q",
                      "H"
                  ],
                  {
                      "default": "H"
                  }
              ],
              "box_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1
                  }
              ],
              "border": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "size",
              "qr_version",
              "error_correction",
              "box_size",
              "border"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Create QR Code",
      "display_name": "Create QR Code",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "Convert Color Space": {
      "input": {
          "required": {
              "in_space": [
                  [
                      "RGB",
                      "HSV",
                      "HSL"
                  ]
              ],
              "out_space": [
                  [
                      "RGB",
                      "HSV",
                      "HSL"
                  ]
              ],
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "in_space",
              "out_space",
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Convert Color Space",
      "display_name": "Convert Color Space",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "MasqueradeIncrementer": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ],
              "max_value": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "max_value"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "MasqueradeIncrementer",
      "display_name": "Incrementer",
      "description": "",
      "python_module": "custom_nodes.masquerade-nodes-comfyui",
      "category": "Masquerade Nodes",
      "output_node": false
  },
  "BOOLConstant": {
      "input": {
          "required": {
              "value": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "value"
      ],
      "name": "BOOLConstant",
      "display_name": "BOOL Constant",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "INTConstant": {
      "input": {
          "required": {
              "value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "value"
      ],
      "name": "INTConstant",
      "display_name": "INT Constant",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "FloatConstant": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615,
                      "step": 1e-05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "value"
      ],
      "name": "FloatConstant",
      "display_name": "Float Constant",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "StringConstant": {
      "input": {
          "required": {
              "string": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "StringConstant",
      "display_name": "String Constant",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "StringConstantMultiline": {
      "input": {
          "required": {
              "string": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "strip_newlines": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "strip_newlines"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "StringConstantMultiline",
      "display_name": "String Constant Multiline",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "ConditioningMultiCombine": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 20,
                      "step": 1
                  }
              ],
              "operation": [
                  [
                      "combine",
                      "concat"
                  ],
                  {
                      "default": "combine"
                  }
              ],
              "conditioning_1": [
                  "CONDITIONING"
              ],
              "conditioning_2": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "operation",
              "conditioning_1",
              "conditioning_2"
          ]
      },
      "output": [
          "CONDITIONING",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined",
          "inputcount"
      ],
      "name": "ConditioningMultiCombine",
      "display_name": "Conditioning Multi Combine",
      "description": "\nCombines multiple conditioning nodes into one\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/conditioning",
      "output_node": false
  },
  "ConditioningSetMaskAndCombine": {
      "input": {
          "required": {
              "positive_1": [
                  "CONDITIONING"
              ],
              "negative_1": [
                  "CONDITIONING"
              ],
              "positive_2": [
                  "CONDITIONING"
              ],
              "negative_2": [
                  "CONDITIONING"
              ],
              "mask_1": [
                  "MASK"
              ],
              "mask_2": [
                  "MASK"
              ],
              "mask_1_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_2_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_1",
              "negative_1",
              "positive_2",
              "negative_2",
              "mask_1",
              "mask_2",
              "mask_1_strength",
              "mask_2_strength",
              "set_cond_area"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined_positive",
          "combined_negative"
      ],
      "name": "ConditioningSetMaskAndCombine",
      "display_name": "ConditioningSetMaskAndCombine",
      "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/conditioning",
      "output_node": false
  },
  "ConditioningSetMaskAndCombine3": {
      "input": {
          "required": {
              "positive_1": [
                  "CONDITIONING"
              ],
              "negative_1": [
                  "CONDITIONING"
              ],
              "positive_2": [
                  "CONDITIONING"
              ],
              "negative_2": [
                  "CONDITIONING"
              ],
              "positive_3": [
                  "CONDITIONING"
              ],
              "negative_3": [
                  "CONDITIONING"
              ],
              "mask_1": [
                  "MASK"
              ],
              "mask_2": [
                  "MASK"
              ],
              "mask_3": [
                  "MASK"
              ],
              "mask_1_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_2_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_3_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_1",
              "negative_1",
              "positive_2",
              "negative_2",
              "positive_3",
              "negative_3",
              "mask_1",
              "mask_2",
              "mask_3",
              "mask_1_strength",
              "mask_2_strength",
              "mask_3_strength",
              "set_cond_area"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined_positive",
          "combined_negative"
      ],
      "name": "ConditioningSetMaskAndCombine3",
      "display_name": "ConditioningSetMaskAndCombine3",
      "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/conditioning",
      "output_node": false
  },
  "ConditioningSetMaskAndCombine4": {
      "input": {
          "required": {
              "positive_1": [
                  "CONDITIONING"
              ],
              "negative_1": [
                  "CONDITIONING"
              ],
              "positive_2": [
                  "CONDITIONING"
              ],
              "negative_2": [
                  "CONDITIONING"
              ],
              "positive_3": [
                  "CONDITIONING"
              ],
              "negative_3": [
                  "CONDITIONING"
              ],
              "positive_4": [
                  "CONDITIONING"
              ],
              "negative_4": [
                  "CONDITIONING"
              ],
              "mask_1": [
                  "MASK"
              ],
              "mask_2": [
                  "MASK"
              ],
              "mask_3": [
                  "MASK"
              ],
              "mask_4": [
                  "MASK"
              ],
              "mask_1_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_2_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_3_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_4_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_1",
              "negative_1",
              "positive_2",
              "negative_2",
              "positive_3",
              "negative_3",
              "positive_4",
              "negative_4",
              "mask_1",
              "mask_2",
              "mask_3",
              "mask_4",
              "mask_1_strength",
              "mask_2_strength",
              "mask_3_strength",
              "mask_4_strength",
              "set_cond_area"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined_positive",
          "combined_negative"
      ],
      "name": "ConditioningSetMaskAndCombine4",
      "display_name": "ConditioningSetMaskAndCombine4",
      "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/conditioning",
      "output_node": false
  },
  "ConditioningSetMaskAndCombine5": {
      "input": {
          "required": {
              "positive_1": [
                  "CONDITIONING"
              ],
              "negative_1": [
                  "CONDITIONING"
              ],
              "positive_2": [
                  "CONDITIONING"
              ],
              "negative_2": [
                  "CONDITIONING"
              ],
              "positive_3": [
                  "CONDITIONING"
              ],
              "negative_3": [
                  "CONDITIONING"
              ],
              "positive_4": [
                  "CONDITIONING"
              ],
              "negative_4": [
                  "CONDITIONING"
              ],
              "positive_5": [
                  "CONDITIONING"
              ],
              "negative_5": [
                  "CONDITIONING"
              ],
              "mask_1": [
                  "MASK"
              ],
              "mask_2": [
                  "MASK"
              ],
              "mask_3": [
                  "MASK"
              ],
              "mask_4": [
                  "MASK"
              ],
              "mask_5": [
                  "MASK"
              ],
              "mask_1_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_2_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_3_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_4_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "mask_5_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_1",
              "negative_1",
              "positive_2",
              "negative_2",
              "positive_3",
              "negative_3",
              "positive_4",
              "negative_4",
              "positive_5",
              "negative_5",
              "mask_1",
              "mask_2",
              "mask_3",
              "mask_4",
              "mask_5",
              "mask_1_strength",
              "mask_2_strength",
              "mask_3_strength",
              "mask_4_strength",
              "mask_5_strength",
              "set_cond_area"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined_positive",
          "combined_negative"
      ],
      "name": "ConditioningSetMaskAndCombine5",
      "display_name": "ConditioningSetMaskAndCombine5",
      "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/conditioning",
      "output_node": false
  },
  "CondPassThrough": {
      "input": {
          "required": {},
          "optional": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "positive",
              "negative"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "CondPassThrough",
      "display_name": "CondPassThrough",
      "description": "\n    Simply passes through the positive and negative conditioning,\n    workaround for Set node not allowing bypassed inputs.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": false
  },
  "DownloadAndLoadCLIPSeg": {
      "input": {
          "required": {
              "model": [
                  [
                      "Kijai/clipseg-rd64-refined-fp16",
                      "CIDAS/clipseg-rd64-refined"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "CLIPSEGMODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "clipseg_model"
      ],
      "name": "DownloadAndLoadCLIPSeg",
      "display_name": "(Down)load CLIPSeg",
      "description": "\nDownloads and loads CLIPSeg model with huggingface_hub,  \nto ComfyUI/models/clip_seg\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "BatchCLIPSeg": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "binary_mask": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "combine_mask": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "use_cuda": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "blur_sigma": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "opt_model": [
                  "CLIPSEGMODEL"
              ],
              "prev_mask": [
                  "MASK",
                  {
                      "default": null
                  }
              ],
              "image_bg_level": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "text",
              "threshold",
              "binary_mask",
              "combine_mask",
              "use_cuda"
          ],
          "optional": [
              "blur_sigma",
              "opt_model",
              "prev_mask",
              "image_bg_level",
              "invert"
          ]
      },
      "output": [
          "MASK",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "Mask",
          "Image"
      ],
      "name": "BatchCLIPSeg",
      "display_name": "Batch CLIPSeg",
      "description": "\nSegments an image or batch of images using CLIPSeg.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "ColorToMask": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "red": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "green": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "blue": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "threshold": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "invert",
              "red",
              "green",
              "blue",
              "threshold",
              "per_batch"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ColorToMask",
      "display_name": "Color To Mask",
      "description": "\nConverts chosen RGB value to a mask.  \nWith batch inputs, the **per_batch**  \ncontrols the number of images processed at once.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "CreateGradientMask": {
      "input": {
          "required": {
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "invert",
              "frames",
              "width",
              "height"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "CreateGradientMask",
      "display_name": "Create Gradient Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateTextMask": {
      "input": {
          "required": {
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "text_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "text_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 32,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font_color": [
                  "STRING",
                  {
                      "default": "white"
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "default": "HELLO!",
                      "multiline": true
                  }
              ],
              "font": [
                  [
                      "FreeMono.ttf",
                      "FreeMonoBoldOblique.otf",
                      "TTNorms-Black.otf"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "start_rotation": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 359,
                      "step": 1
                  }
              ],
              "end_rotation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -359,
                      "max": 359,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "invert",
              "frames",
              "text_x",
              "text_y",
              "font_size",
              "font_color",
              "text",
              "font",
              "width",
              "height",
              "start_rotation",
              "end_rotation"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "CreateTextMask",
      "display_name": "Create Text Mask",
      "description": "\nCreates a text image and mask.  \nLooks for fonts from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n  \nIf start_rotation and/or end_rotation are different values,  \ncreates animation between them.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "CreateAudioMask": {
      "input": {
          "required": {
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 0.01
                  }
              ],
              "audio_path": [
                  "STRING",
                  {
                      "default": "audio.wav"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "invert",
              "frames",
              "scale",
              "audio_path",
              "width",
              "height"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CreateAudioMask",
      "display_name": "Create Audio Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/deprecated",
      "output_node": false
  },
  "CreateFadeMask": {
      "input": {
          "required": {
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "start_level": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "midpoint_level": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_level": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "midpoint_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "invert",
              "frames",
              "width",
              "height",
              "interpolation",
              "start_level",
              "midpoint_level",
              "end_level",
              "midpoint_frame"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "CreateFadeMask",
      "display_name": "Create Fade Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/deprecated",
      "output_node": false
  },
  "CreateFadeMaskAdvanced": {
      "input": {
          "required": {
              "points_string": [
                  "STRING",
                  {
                      "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
                      "multiline": true
                  }
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 16,
                      "min": 2,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "points_string",
              "invert",
              "frames",
              "width",
              "height",
              "interpolation"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "CreateFadeMaskAdvanced",
      "display_name": "Create Fade Mask Advanced",
      "description": "\nCreate a batch of masks interpolated between given frames and values. \nUses same syntax as Fizz' BatchValueSchedule.\nFirst value is the frame index (not that this starts from 0, not 1) \nand the second value inside the brackets is the float value of the mask in range 0.0 - 1.0  \n\nFor example the default values:  \n0:(0.0)  \n7:(1.0)  \n15:(0.0)  \n  \nWould create a mask batch fo 16 frames, starting from black, \ninterpolating with the chosen curve to fully white at the 8th frame, \nand interpolating from that to fully black at the 16th frame.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateFluidMask": {
      "input": {
          "required": {
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "inflow_count": [
                  "INT",
                  {
                      "default": 3,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "inflow_velocity": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "inflow_radius": [
                  "INT",
                  {
                      "default": 8,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "inflow_padding": [
                  "INT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "inflow_duration": [
                  "INT",
                  {
                      "default": 60,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "invert",
              "frames",
              "width",
              "height",
              "inflow_count",
              "inflow_velocity",
              "inflow_radius",
              "inflow_padding",
              "inflow_duration"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "CreateFluidMask",
      "display_name": "Create Fluid Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateShapeMask": {
      "input": {
          "required": {
              "shape": [
                  [
                      "circle",
                      "square",
                      "triangle"
                  ],
                  {
                      "default": "circle"
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "location_x": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "location_y": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "grow": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "shape",
              "frames",
              "location_x",
              "location_y",
              "grow",
              "frame_width",
              "frame_height",
              "shape_width",
              "shape_height"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_inverted"
      ],
      "name": "CreateShapeMask",
      "display_name": "Create Shape Mask",
      "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \nGrow value is the amount to grow the shape on each frame, creating animated masks.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateVoronoiMask": {
      "input": {
          "required": {
              "frames": [
                  "INT",
                  {
                      "default": 16,
                      "min": 2,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "num_points": [
                  "INT",
                  {
                      "default": 15,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "line_width": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "speed": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "frames",
              "num_points",
              "line_width",
              "speed",
              "frame_width",
              "frame_height"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_inverted"
      ],
      "name": "CreateVoronoiMask",
      "display_name": "Create Voronoi Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateMagicMask": {
      "input": {
          "required": {
              "frames": [
                  "INT",
                  {
                      "default": 16,
                      "min": 2,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "depth": [
                  "INT",
                  {
                      "default": 12,
                      "min": 1,
                      "max": 500,
                      "step": 1
                  }
              ],
              "distortion": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 99999999,
                      "step": 1
                  }
              ],
              "transitions": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "frames",
              "depth",
              "distortion",
              "seed",
              "transitions",
              "frame_width",
              "frame_height"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_inverted"
      ],
      "name": "CreateMagicMask",
      "display_name": "Create Magic Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "GetMaskSizeAndCount": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "MASK",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "mask",
          "width",
          "height",
          "count"
      ],
      "name": "GetMaskSizeAndCount",
      "display_name": "Get Mask Size & Count",
      "description": "\nReturns the width, height and batch size of the mask,  \nand passes it through unchanged.  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "GrowMaskWithBlur": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "expand": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "incremental_expandrate": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "tapered_corners": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "flip_input": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "blur_radius": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "lerp_alpha": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "decay_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "fill_holes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "expand",
              "incremental_expandrate",
              "tapered_corners",
              "flip_input",
              "blur_radius",
              "lerp_alpha",
              "decay_factor"
          ],
          "optional": [
              "fill_holes"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_inverted"
      ],
      "name": "GrowMaskWithBlur",
      "display_name": "Grow Mask With Blur",
      "description": "\n# GrowMaskWithBlur\n- mask: Input mask or mask batch\n- expand: Expand or contract mask or mask batch by a given amount\n- incremental_expandrate: increase expand rate by a given amount per frame\n- tapered_corners: use tapered corners\n- flip_input: flip input mask\n- blur_radius: value higher than 0 will blur the mask\n- lerp_alpha: alpha value for interpolation between frames\n- decay_factor: decay value for interpolation between frames\n- fill_holes: fill holes in the mask (slow)",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "MaskBatchMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "mask_1": [
                  "MASK"
              ],
              "mask_2": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "mask_1",
              "mask_2"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "masks"
      ],
      "name": "MaskBatchMulti",
      "display_name": "Mask Batch Multi",
      "description": "\nCreates an image batch from multiple masks.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "OffsetMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "angle": [
                  "INT",
                  {
                      "default": 0,
                      "min": -360,
                      "max": 360,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "duplication_factor": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "roll": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "incremental": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "padding_mode": [
                  [
                      "empty",
                      "border",
                      "reflection"
                  ],
                  {
                      "default": "empty"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "x",
              "y",
              "angle",
              "duplication_factor",
              "roll",
              "incremental",
              "padding_mode"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "mask"
      ],
      "name": "OffsetMask",
      "display_name": "Offset Mask",
      "description": "\nOffsets the mask by the specified amount.  \n - mask: Input mask or mask batch\n - x: Horizontal offset\n - y: Vertical offset\n - angle: Angle in degrees\n - roll: roll edge wrapping\n - duplication_factor: Number of times to duplicate the mask to form a batch\n - border padding_mode: Padding mode for the mask\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "RemapMaskRange": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "min",
              "max"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "mask"
      ],
      "name": "RemapMaskRange",
      "display_name": "Remap Mask Range",
      "description": "\nSets new min and max values for the mask.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "ResizeMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8,
                      "display": "number"
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8,
                      "display": "number"
                  }
              ],
              "keep_proportions": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "width",
              "height",
              "keep_proportions",
              "upscale_method",
              "crop"
          ]
      },
      "output": [
          "MASK",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "mask",
          "width",
          "height"
      ],
      "name": "ResizeMask",
      "display_name": "Resize Mask",
      "description": "\nResizes the mask or batch of masks to the specified width and height.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "RoundMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "RoundMask",
      "display_name": "Round Mask",
      "description": "\nRounds the mask or batch of masks to a binary mask.  \n<img src=\"https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40\" width=\"300\" height=\"250\" alt=\"RoundMask example\">\n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "AddLabel": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text_x": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "text_y": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 48,
                      "min": -1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 32,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font_color": [
                  "STRING",
                  {
                      "default": "white"
                  }
              ],
              "label_color": [
                  "STRING",
                  {
                      "default": "black"
                  }
              ],
              "font": [
                  [
                      "FreeMono.ttf",
                      "FreeMonoBoldOblique.otf",
                      "TTNorms-Black.otf"
                  ]
              ],
              "text": [
                  "STRING",
                  {
                      "default": "Text"
                  }
              ],
              "direction": [
                  [
                      "up",
                      "down",
                      "left",
                      "right",
                      "overlay"
                  ],
                  {
                      "default": "up"
                  }
              ]
          },
          "optional": {
              "caption": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text_x",
              "text_y",
              "height",
              "font_size",
              "font_color",
              "label_color",
              "font",
              "text",
              "direction"
          ],
          "optional": [
              "caption"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "AddLabel",
      "display_name": "Add Label",
      "description": "\nCreates a new with the given text, and concatenates it to  \neither above or below the input image.  \nNote that this changes the input image's height!  \nFonts are loaded from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "ColorMatch": {
      "input": {
          "required": {
              "image_ref": [
                  "IMAGE"
              ],
              "image_target": [
                  "IMAGE"
              ],
              "method": [
                  [
                      "mkl",
                      "hm",
                      "reinhard",
                      "mvgd",
                      "hm-mvgd-hm",
                      "hm-mkl-hm"
                  ],
                  {
                      "default": "mkl"
                  }
              ]
          },
          "optional": {
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image_ref",
              "image_target",
              "method"
          ],
          "optional": [
              "strength"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "ColorMatch",
      "display_name": "Color Match",
      "description": "\ncolor-matcher enables color transfer across images which comes in handy for automatic  \ncolor-grading of photographs, paintings and film sequences as well as light-field  \nand stopmotion corrections.  \n\nThe methods behind the mappings are based on the approach from Reinhard et al.,  \nthe Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  \nto a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   \nmatching. As shown below our HM-MVGD-HM compound outperforms existing methods.   \nhttps://github.com/hahnec/color-matcher/\n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "CrossFadeImages": {
      "input": {
          "required": {
              "images_1": [
                  "IMAGE"
              ],
              "images_2": [
                  "IMAGE"
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out",
                      "bounce",
                      "elastic",
                      "glitchy",
                      "exponential_ease_out"
                  ]
              ],
              "transition_start_index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "transitioning_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "start_level": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_level": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images_1",
              "images_2",
              "interpolation",
              "transition_start_index",
              "transitioning_frames",
              "start_level",
              "end_level"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CrossFadeImages",
      "display_name": "Cross Fade Images",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "CrossFadeImagesMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out",
                      "bounce",
                      "elastic",
                      "glitchy",
                      "exponential_ease_out"
                  ]
              ],
              "transitioning_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "image_1",
              "image_2",
              "interpolation",
              "transitioning_frames"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CrossFadeImagesMulti",
      "display_name": "Cross Fade Images Multi",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "GetImagesFromBatchIndexed": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0, 1, 2",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "indexes"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "GetImagesFromBatchIndexed",
      "display_name": "Get Images From Batch Indexed",
      "description": "\nSelects and returns the images at the specified indices as an image batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "GetImageRangeFromBatch": {
      "input": {
          "required": {
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "images": [
                  "IMAGE"
              ],
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "start_index",
              "num_frames"
          ],
          "optional": [
              "images",
              "masks"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "GetImageRangeFromBatch",
      "display_name": "Get Image or Mask Range From Batch",
      "description": "\nRandomizes image order within a batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "GetImageSizeAndCount": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "width",
          "height",
          "count"
      ],
      "name": "GetImageSizeAndCount",
      "display_name": "Get Image Size & Count",
      "description": "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "FastPreview": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "format": [
                  [
                      "JPEG",
                      "PNG",
                      "WEBP"
                  ],
                  {
                      "default": "JPEG"
                  }
              ],
              "quality": [
                  "INT",
                  {
                      "default": 75,
                      "min": 1,
                      "max": 100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "format",
              "quality"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "FastPreview",
      "display_name": "Fast Preview",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": true
  },
  "ImageAndMaskPreview": {
      "input": {
          "required": {
              "mask_opacity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "mask_color": [
                  "STRING",
                  {
                      "default": "255, 255, 255"
                  }
              ],
              "pass_through": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "mask_opacity",
              "mask_color",
              "pass_through"
          ],
          "optional": [
              "image",
              "mask"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "composite"
      ],
      "name": "ImageAndMaskPreview",
      "display_name": "ImageAndMaskPreview",
      "description": "\nPreview an image or a mask, when both inputs are used  \ncomposites the mask on top of the image.\nwith pass_through on the preview is disabled and the  \ncomposite is returned from the composite slot instead,  \nthis allows for the preview to be passed for video combine  \nnodes for example.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": true
  },
  "ImageAddMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "blending": [
                  [
                      "add",
                      "subtract",
                      "multiply",
                      "difference"
                  ],
                  {
                      "default": "add"
                  }
              ],
              "blend_amount": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "image_1",
              "image_2",
              "blending",
              "blend_amount"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "ImageAddMulti",
      "display_name": "Image Add Multi",
      "description": "\nAdd blends multiple images together.    \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageBatchMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "image_1",
              "image_2"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "ImageBatchMulti",
      "display_name": "Image Batch Multi",
      "description": "\nCreates an image batch from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageBatchRepeatInterleaving": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "repeats": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "repeats"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatchRepeatInterleaving",
      "display_name": "ImageBatchRepeatInterleaving",
      "description": "\nRepeats each image in a batch by the specified number of times.  \nExample batch of 5 images: 0, 1 ,2, 3, 4  \nwith repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageBatchTestPattern": {
      "input": {
          "required": {
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ],
              "start_from": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "text_x": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "text_y": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font": [
                  [
                      "FreeMono.ttf",
                      "FreeMonoBoldOblique.otf",
                      "TTNorms-Black.otf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 255,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_size",
              "start_from",
              "text_x",
              "text_y",
              "width",
              "height",
              "font",
              "font_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatchTestPattern",
      "display_name": "Image Batch Test Pattern",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "ImageConcanate": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "direction": [
                  [
                      "right",
                      "down",
                      "left",
                      "up"
                  ],
                  {
                      "default": "right"
                  }
              ],
              "match_image_size": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "direction",
              "match_image_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageConcanate",
      "display_name": "Image Concatenate",
      "description": "\nConcatenates the image2 to image1 in the specified direction.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageConcatFromBatch": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "num_columns": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ],
              "match_image_size": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "max_resolution": [
                  "INT",
                  {
                      "default": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "num_columns",
              "match_image_size",
              "max_resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageConcatFromBatch",
      "display_name": "Image Concatenate From Batch",
      "description": "\n    Concatenates images from a batch into a grid with a specified number of columns.\n    ",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageConcatMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "direction": [
                  [
                      "right",
                      "down",
                      "left",
                      "up"
                  ],
                  {
                      "default": "right"
                  }
              ],
              "match_image_size": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "image_1",
              "image_2",
              "direction",
              "match_image_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "ImageConcatMulti",
      "display_name": "Image Concatenate Multi",
      "description": "\nCreates an image from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageCropByMaskAndResize": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "base_resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "padding": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "min_crop_resolution": [
                  "INT",
                  {
                      "default": 128,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "max_crop_resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "mask",
              "base_resolution",
              "padding",
              "min_crop_resolution",
              "max_crop_resolution"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "BBOX"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "images",
          "masks",
          "bbox"
      ],
      "name": "ImageCropByMaskAndResize",
      "display_name": "Image Crop By Mask And Resize",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageUncropByMask": {
      "input": {
          "required": {
              "destination": [
                  "IMAGE"
              ],
              "source": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "bbox": [
                  "BBOX"
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "mask",
              "bbox"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "ImageUncropByMask",
      "display_name": "Image Uncrop By Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageGrabPIL": {
      "input": {
          "required": {
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ],
              "delay": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "width",
              "height",
              "num_frames",
              "delay"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "ImageGrabPIL",
      "display_name": "Image Grab PIL",
      "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "ImageGridComposite2x2": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "image3": [
                  "IMAGE"
              ],
              "image4": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "image3",
              "image4"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageGridComposite2x2",
      "display_name": "Image Grid Composite 2x2",
      "description": "\nConcatenates the 4 input images into a 2x2 grid. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageGridComposite3x3": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "image3": [
                  "IMAGE"
              ],
              "image4": [
                  "IMAGE"
              ],
              "image5": [
                  "IMAGE"
              ],
              "image6": [
                  "IMAGE"
              ],
              "image7": [
                  "IMAGE"
              ],
              "image8": [
                  "IMAGE"
              ],
              "image9": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1",
              "image2",
              "image3",
              "image4",
              "image5",
              "image6",
              "image7",
              "image8",
              "image9"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageGridComposite3x3",
      "display_name": "Image Grid Composite 3x3",
      "description": "\nConcatenates the 9 input images into a 3x3 grid. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageGridtoBatch": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "columns": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 8,
                      "tooltip": "The number of columns in the grid."
                  }
              ],
              "rows": [
                  "INT",
                  {
                      "default": 0,
                      "min": 1,
                      "max": 8,
                      "tooltip": "The number of rows in the grid. Set to 0 for automatic calculation."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "columns",
              "rows"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageGridtoBatch",
      "display_name": "Image Grid To Batch",
      "description": "Converts a grid of images to a batch of images.",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageNormalize_Neg1_To_1": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "images"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageNormalize_Neg1_To_1",
      "display_name": "Image Normalize -1 to 1",
      "description": "\nNormalize the images to be in the range [-1, 1]  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImagePass": {
      "input": {
          "required": {},
          "optional": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImagePass",
      "display_name": "ImagePass",
      "description": "\nPasses the image through without modifying it.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImagePadForOutpaintMasked": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "left": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "top": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "right": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "bottom": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "feathering": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "left",
              "top",
              "right",
              "bottom",
              "feathering"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImagePadForOutpaintMasked",
      "display_name": "Image Pad For Outpaint Masked",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "image",
      "output_node": false
  },
  "ImagePadForOutpaintTargetSize": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "target_width": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "target_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "feathering": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "target_width",
              "target_height",
              "feathering",
              "upscale_method"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImagePadForOutpaintTargetSize",
      "display_name": "Image Pad For Outpaint Target Size",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "image",
      "output_node": false
  },
  "ImageResizeKJ": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "keep_proportion": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "divisible_by": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 512,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "width_input": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "height_input": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "get_image_size": [
                  "IMAGE"
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "width",
              "height",
              "upscale_method",
              "keep_proportion",
              "divisible_by"
          ],
          "optional": [
              "width_input",
              "height_input",
              "get_image_size",
              "crop"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "width",
          "height"
      ],
      "name": "ImageResizeKJ",
      "display_name": "Resize Image",
      "description": "\nResizes the image to the specified width and height.  \nSize can be retrieved from the inputs, and the final scale  \nis  determined in this order of importance:  \n- get_image_size  \n- width_input and height_input  \n- width and height widgets  \n  \nKeep proportions keeps the aspect ratio of the image, by  \nhighest dimension.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ImageUpscaleWithModelBatched": {
      "input": {
          "required": {
              "upscale_model": [
                  "UPSCALE_MODEL"
              ],
              "images": [
                  "IMAGE"
              ],
              "per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "upscale_model",
              "images",
              "per_batch"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageUpscaleWithModelBatched",
      "display_name": "Image Upscale With Model Batched",
      "description": "\nSame as ComfyUI native model upscaling node,  \nbut allows setting sub-batches for reduced VRAM usage.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "InsertImagesToBatchIndexed": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "images_to_insert": [
                  "IMAGE"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0, 1, 2",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "images_to_insert",
              "indexes"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "InsertImagesToBatchIndexed",
      "display_name": "Insert Images To Batch Indexed",
      "description": "\nInserts images at the specified indices into the original image batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "LoadAndResizeImage": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png"
                  ],
                  {
                      "image_upload": true
                  }
              ],
              "resize": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "repeat": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "keep_proportion": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "divisible_by": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 512,
                      "step": 1
                  }
              ],
              "mask_channel": [
                  [
                      "alpha",
                      "red",
                      "green",
                      "blue"
                  ],
                  {
                      "tooltip": "Channel to use for the mask output"
                  }
              ],
              "background_color": [
                  "STRING",
                  {
                      "default": "",
                      "tooltip": "Fills the alpha channel with the specified color."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "resize",
              "width",
              "height",
              "repeat",
              "keep_proportion",
              "divisible_by",
              "mask_channel",
              "background_color"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "width",
          "height",
          "image_path"
      ],
      "name": "LoadAndResizeImage",
      "display_name": "Load & Resize Image",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "LoadImagesFromFolderKJ": {
      "input": {
          "required": {
              "folder": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "folder"
          ],
          "optional": [
              "image_load_cap",
              "start_index"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "count",
          "image_path"
      ],
      "name": "LoadImagesFromFolderKJ",
      "display_name": "Load Images From Folder (KJ)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "image",
      "output_node": false
  },
  "MergeImageChannels": {
      "input": {
          "required": {
              "red": [
                  "IMAGE"
              ],
              "green": [
                  "IMAGE"
              ],
              "blue": [
                  "IMAGE"
              ]
          },
          "optional": {
              "alpha": [
                  "MASK",
                  {
                      "default": null
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "red",
              "green",
              "blue"
          ],
          "optional": [
              "alpha"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "MergeImageChannels",
      "display_name": "Merge Image Channels",
      "description": "\nMerges channel data into an image.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "PreviewAnimation": {
      "input": {
          "required": {
              "fps": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.01,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "images": [
                  "IMAGE"
              ],
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "fps"
          ],
          "optional": [
              "images",
              "masks"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "PreviewAnimation",
      "display_name": "Preview Animation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": true
  },
  "RemapImageRange": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clamp": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "min",
              "max",
              "clamp"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RemapImageRange",
      "display_name": "Remap Image Range",
      "description": "\nRemaps the image values to the specified range. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ReverseImageBatch": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "images"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ReverseImageBatch",
      "display_name": "Reverse Image Batch",
      "description": "\nReverses the order of the images in a batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "ReplaceImagesInBatch": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "replacement_images": [
                  "IMAGE"
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "replacement_images",
              "start_index"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ReplaceImagesInBatch",
      "display_name": "Replace Images In Batch",
      "description": "\nReplaces the images in a batch, starting from the specified start index,  \nwith the replacement images.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "SaveImageWithAlpha": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "mask",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveImageWithAlpha",
      "display_name": "Save Image With Alpha",
      "description": "\nSaves an image and mask as .PNG with the mask as the alpha channel. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": true
  },
  "SaveImageKJ": {
      "input": {
          "required": {
              "images": [
                  "IMAGE",
                  {
                      "tooltip": "The images to save."
                  }
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI",
                      "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
                  }
              ],
              "output_folder": [
                  "STRING",
                  {
                      "default": "output",
                      "tooltip": "The folder to save the images to."
                  }
              ]
          },
          "optional": {
              "caption_file_extension": [
                  "STRING",
                  {
                      "default": ".txt",
                      "tooltip": "The extension for the caption file."
                  }
              ],
              "caption": [
                  "STRING",
                  {
                      "forceInput": true,
                      "tooltip": "string to save as .txt file"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "filename_prefix",
              "output_folder"
          ],
          "optional": [
              "caption_file_extension",
              "caption"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "filename"
      ],
      "name": "SaveImageKJ",
      "display_name": "Save Image KJ",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": true
  },
  "ShuffleImageBatch": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "seed"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ShuffleImageBatch",
      "display_name": "Shuffle Image Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "SplitImageChannels": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "red",
          "green",
          "blue",
          "mask"
      ],
      "name": "SplitImageChannels",
      "display_name": "Split Image Channels",
      "description": "\nSplits image channels into images where the selected channel  \nis repeated for all channels, and the alpha as a mask. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "TransitionImagesMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out",
                      "bounce",
                      "elastic",
                      "glitchy",
                      "exponential_ease_out"
                  ]
              ],
              "transition_type": [
                  [
                      "horizontal slide",
                      "vertical slide",
                      "box",
                      "circle",
                      "horizontal door",
                      "vertical door",
                      "fade"
                  ]
              ],
              "transitioning_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "blur_radius": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "reverse": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "device": [
                  [
                      "CPU",
                      "GPU"
                  ],
                  {
                      "default": "CPU"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "image_1",
              "image_2",
              "interpolation",
              "transition_type",
              "transitioning_frames",
              "blur_radius",
              "reverse",
              "device"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TransitionImagesMulti",
      "display_name": "Transition Images Multi",
      "description": "\nCreates transitions between images.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "TransitionImagesInBatch": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out",
                      "bounce",
                      "elastic",
                      "glitchy",
                      "exponential_ease_out"
                  ]
              ],
              "transition_type": [
                  [
                      "horizontal slide",
                      "vertical slide",
                      "box",
                      "circle",
                      "horizontal door",
                      "vertical door",
                      "fade"
                  ]
              ],
              "transitioning_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "blur_radius": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "reverse": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "device": [
                  [
                      "CPU",
                      "GPU"
                  ],
                  {
                      "default": "CPU"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "interpolation",
              "transition_type",
              "transitioning_frames",
              "blur_radius",
              "reverse",
              "device"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TransitionImagesInBatch",
      "display_name": "Transition Images In Batch",
      "description": "\nCreates transitions between images in a batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "BatchCropFromMask": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "masks": [
                  "MASK"
              ],
              "crop_size_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "bbox_smooth_alpha": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "masks",
              "crop_size_mult",
              "bbox_smooth_alpha"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "BBOX",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "original_images",
          "cropped_images",
          "bboxes",
          "width",
          "height"
      ],
      "name": "BatchCropFromMask",
      "display_name": "Batch Crop From Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "BatchCropFromMaskAdvanced": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "masks": [
                  "MASK"
              ],
              "crop_size_mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "bbox_smooth_alpha": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "masks",
              "crop_size_mult",
              "bbox_smooth_alpha"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "MASK",
          "IMAGE",
          "MASK",
          "BBOX",
          "BBOX",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "original_images",
          "cropped_images",
          "cropped_masks",
          "combined_crop_image",
          "combined_crop_masks",
          "bboxes",
          "combined_bounding_box",
          "bbox_width",
          "bbox_height"
      ],
      "name": "BatchCropFromMaskAdvanced",
      "display_name": "Batch Crop From Mask Advanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "FilterZeroMasksAndCorrespondingImages": {
      "input": {
          "required": {
              "masks": [
                  "MASK"
              ]
          },
          "optional": {
              "original_images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "masks"
          ],
          "optional": [
              "original_images"
          ]
      },
      "output": [
          "MASK",
          "IMAGE",
          "IMAGE",
          "INDEXES"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "non_zero_masks_out",
          "non_zero_mask_images_out",
          "zero_mask_images_out",
          "zero_mask_images_out_indexes"
      ],
      "name": "FilterZeroMasksAndCorrespondingImages",
      "display_name": "FilterZeroMasksAndCorrespondingImages",
      "description": "\nFilter out all the empty (i.e. all zero) mask in masks  \nAlso filter out all the corresponding images in original_images by indexes if provide  \n  \noriginal_images (optional): If provided, need have same length as masks.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "InsertImageBatchByIndexes": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "images_to_insert": [
                  "IMAGE"
              ],
              "insert_indexes": [
                  "INDEXES"
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "images_to_insert",
              "insert_indexes"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images_after_insert"
      ],
      "name": "InsertImageBatchByIndexes",
      "display_name": "Insert Image Batch By Indexes",
      "description": "\nThis node is designed to be use with node FilterZeroMasksAndCorrespondingImages\nIt inserts the images_to_insert into images according to insert_indexes\n\nReturns:\n    images_after_insert: updated original images with origonal sequence order\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "BatchUncrop": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "cropped_images": [
                  "IMAGE"
              ],
              "bboxes": [
                  "BBOX"
              ],
              "border_blending": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_rescale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "border_top": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "border_bottom": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "border_left": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "border_right": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "cropped_images",
              "bboxes",
              "border_blending",
              "crop_rescale",
              "border_top",
              "border_bottom",
              "border_left",
              "border_right"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BatchUncrop",
      "display_name": "Batch Uncrop",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "BatchUncropAdvanced": {
      "input": {
          "required": {
              "original_images": [
                  "IMAGE"
              ],
              "cropped_images": [
                  "IMAGE"
              ],
              "cropped_masks": [
                  "MASK"
              ],
              "combined_crop_mask": [
                  "MASK"
              ],
              "bboxes": [
                  "BBOX"
              ],
              "border_blending": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_rescale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "use_combined_mask": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "use_square_mask": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "combined_bounding_box": [
                  "BBOX",
                  {
                      "default": null
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_images",
              "cropped_images",
              "cropped_masks",
              "combined_crop_mask",
              "bboxes",
              "border_blending",
              "crop_rescale",
              "use_combined_mask",
              "use_square_mask"
          ],
          "optional": [
              "combined_bounding_box"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BatchUncropAdvanced",
      "display_name": "Batch Uncrop Advanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "SplitBboxes": {
      "input": {
          "required": {
              "bboxes": [
                  "BBOX"
              ],
              "index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 99999999,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "bboxes",
              "index"
          ]
      },
      "output": [
          "BBOX",
          "BBOX"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "bboxes_a",
          "bboxes_b"
      ],
      "name": "SplitBboxes",
      "display_name": "Split Bboxes",
      "description": "\nSplits the specified bbox list at the given index into two lists.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "BboxToInt": {
      "input": {
          "required": {
              "bboxes": [
                  "BBOX"
              ],
              "index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 99999999,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "bboxes",
              "index"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "x_min",
          "y_min",
          "width",
          "height",
          "center_x",
          "center_y"
      ],
      "name": "BboxToInt",
      "display_name": "Bbox To Int",
      "description": "\nReturns selected index from bounding box list as integers.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "BboxVisualize": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "bboxes": [
                  "BBOX"
              ],
              "line_width": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "bboxes",
              "line_width"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "BboxVisualize",
      "display_name": "Bbox Visualize",
      "description": "\nVisualizes the specified bbox on the image.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking",
      "output_node": false
  },
  "GenerateNoise": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 4096,
                      "step": 0.01
                  }
              ],
              "constant_batch_noise": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "normalize": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "model": [
                  "MODEL"
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "latent_channels": [
                  [
                      "4",
                      "16"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "batch_size",
              "seed",
              "multiplier",
              "constant_batch_noise",
              "normalize"
          ],
          "optional": [
              "model",
              "sigmas",
              "latent_channels"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "GenerateNoise",
      "display_name": "Generate Noise",
      "description": "\nGenerates noise for injection or to be used as empty latents on samplers with add_noise off.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "FlipSigmasAdjusted": {
      "input": {
          "required": {
              "sigmas": [
                  "SIGMAS"
              ],
              "divide_by_last_sigma": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "divide_by": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 255,
                      "step": 0.01
                  }
              ],
              "offset_by": [
                  "INT",
                  {
                      "default": 1,
                      "min": -100,
                      "max": 100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas",
              "divide_by_last_sigma",
              "divide_by",
              "offset_by"
          ]
      },
      "output": [
          "SIGMAS",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SIGMAS",
          "sigmas_string"
      ],
      "name": "FlipSigmasAdjusted",
      "display_name": "Flip Sigmas Adjusted",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "InjectNoiseToLatent": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 200.0,
                      "step": 0.0001
                  }
              ],
              "noise": [
                  "LATENT"
              ],
              "normalize": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "average": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "mix_randn_amount": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.001
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "strength",
              "noise",
              "normalize",
              "average"
          ],
          "optional": [
              "mask",
              "mix_randn_amount",
              "seed"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "InjectNoiseToLatent",
      "display_name": "Inject Noise To Latent",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "CustomSigmas": {
      "input": {
          "required": {
              "sigmas_string": [
                  "STRING",
                  {
                      "default": "14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029",
                      "multiline": true
                  }
              ],
              "interpolate_to_steps": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas_string",
              "interpolate_to_steps"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "CustomSigmas",
      "display_name": "Custom Sigmas",
      "description": "\nCreates a sigmas tensor from a string of comma separated values.  \nExamples: \n   \nNvidia's optimized AYS 10 step schedule for SD 1.5:  \n14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  \nSDXL:   \n14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  \nSVD:  \n700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "WidgetToString": {
      "input": {
          "required": {
              "id": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "widget_name": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "return_all": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "any_input": [
                  "*",
                  {}
              ],
              "node_title": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "hidden": {
              "extra_pnginfo": "EXTRA_PNGINFO",
              "prompt": "PROMPT",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "id",
              "widget_name",
              "return_all"
          ],
          "optional": [
              "any_input",
              "node_title"
          ],
          "hidden": [
              "extra_pnginfo",
              "prompt",
              "unique_id"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "WidgetToString",
      "display_name": "Widget To String",
      "description": "\nSelects a node and it's specified widget and outputs the value as a string.  \nIf no node id or title is provided it will use the 'any_input' link and use that node.  \nTo see node id's, enable node id display from Manager badge menu.  \nAlternatively you can search with the node title. Node titles ONLY exist if they  \nare manually edited!  \nThe 'any_input' is required for making sure the node you want the value from exists in the workflow.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "DummyOut": {
      "input": {
          "required": {
              "any_input": [
                  "*",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "any_input"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "DummyOut",
      "display_name": "Dummy Out",
      "description": "\nDoes nothing, used to trigger generic workflow output.    \nA way to get previews in the UI without saving anything to disk.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": true
  },
  "GetLatentsFromBatchIndexed": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0, 1, 2",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "indexes"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "GetLatentsFromBatchIndexed",
      "display_name": "Get Latents From Batch Indexed",
      "description": "\nSelects and returns the latents at the specified indices as an latent batch.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "ScaleBatchPromptSchedule": {
      "input": {
          "required": {
              "input_str": [
                  "STRING",
                  {
                      "forceInput": true,
                      "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n"
                  }
              ],
              "old_frame_count": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "new_frame_count": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_str",
              "old_frame_count",
              "new_frame_count"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ScaleBatchPromptSchedule",
      "display_name": "Scale Batch Prompt Schedule",
      "description": "\nScales a batch schedule from Fizz' nodes BatchPromptSchedule\nto a different frame count.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "CameraPoseVisualizer": {
      "input": {
          "required": {
              "pose_file_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "base_xval": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0,
                      "max": 100,
                      "step": 0.01
                  }
              ],
              "zval": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0,
                      "max": 100,
                      "step": 0.01
                  }
              ],
              "scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "use_exact_fx": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "relative_c2w": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "use_viewer": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "cameractrl_poses": [
                  "CAMERACTRL_POSES",
                  {
                      "default": null
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pose_file_path",
              "base_xval",
              "zval",
              "scale",
              "use_exact_fx",
              "relative_c2w",
              "use_viewer"
          ],
          "optional": [
              "cameractrl_poses"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CameraPoseVisualizer",
      "display_name": "Camera Pose Visualizer",
      "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": false
  },
  "AppendStringsToList": {
      "input": {
          "required": {
              "string1": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "string2": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string1",
              "string2"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "AppendStringsToList",
      "display_name": "Append Strings To List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "JoinStrings": {
      "input": {
          "required": {
              "string1": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "string2": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "delimiter": [
                  "STRING",
                  {
                      "default": " ",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string1",
              "string2",
              "delimiter"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "JoinStrings",
      "display_name": "Join Strings",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/constants",
      "output_node": false
  },
  "JoinStringMulti": {
      "input": {
          "required": {
              "inputcount": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "string_1": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "string_2": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "delimiter": [
                  "STRING",
                  {
                      "default": " ",
                      "multiline": false
                  }
              ],
              "return_list": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "inputcount",
              "string_1",
              "string_2",
              "delimiter",
              "return_list"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "string"
      ],
      "name": "JoinStringMulti",
      "display_name": "Join String Multi",
      "description": "\nCreates single string, or a list of strings, from  \nmultiple input strings.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "SomethingToString": {
      "input": {
          "required": {
              "input": [
                  "*",
                  {}
              ]
          },
          "optional": {
              "prefix": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "suffix": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input"
          ],
          "optional": [
              "prefix",
              "suffix"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "SomethingToString",
      "display_name": "Something To String",
      "description": "\nConverts any type to a string.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "Sleep": {
      "input": {
          "required": {
              "input": [
                  "*",
                  {}
              ],
              "minutes": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1439
                  }
              ],
              "seconds": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 59.99,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input",
              "minutes",
              "seconds"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "Sleep",
      "display_name": "Sleep",
      "description": "\nDelays the execution for the input amount of time.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": false
  },
  "VRAM_Debug": {
      "input": {
          "required": {
              "empty_cache": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "gc_collect": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "unload_all_models": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "any_input": [
                  "*",
                  {}
              ],
              "image_pass": [
                  "IMAGE"
              ],
              "model_pass": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "empty_cache",
              "gc_collect",
              "unload_all_models"
          ],
          "optional": [
              "any_input",
              "image_pass",
              "model_pass"
          ]
      },
      "output": [
          "*",
          "IMAGE",
          "MODEL",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "any_output",
          "image_pass",
          "model_pass",
          "freemem_before",
          "freemem_after"
      ],
      "name": "VRAM_Debug",
      "display_name": "VRAM Debug",
      "description": "\nReturns the inputs unchanged, they are only used as triggers,  \nand performs comfy model management functions and garbage collection,  \nreports free VRAM before and after the operations.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": false
  },
  "EmptyLatentImagePresets": {
      "input": {
          "required": {
              "dimensions": [
                  [
                      "512 x 512 (1:1)",
                      "768 x 512 (1.5:1)",
                      "960 x 512 (1.875:1)",
                      "1024 x 512 (2:1)",
                      "1024 x 576 (1.778:1)",
                      "1536 x 640 (2.4:1)",
                      "1344 x 768 (1.75:1)",
                      "1216 x 832 (1.46:1)",
                      "1152 x 896 (1.286:1)",
                      "1024 x 1024 (1:1)"
                  ],
                  {
                      "default": "512 x 512 (1:1)"
                  }
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "dimensions",
              "invert",
              "batch_size"
          ]
      },
      "output": [
          "LATENT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "Latent",
          "Width",
          "Height"
      ],
      "name": "EmptyLatentImagePresets",
      "display_name": "Empty Latent Image Presets",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "EmptyLatentImageCustomPresets": {
      "input": {
          "required": {
              "dimensions": [
                  []
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "dimensions",
              "invert",
              "batch_size"
          ]
      },
      "output": [
          "LATENT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "Latent",
          "Width",
          "Height"
      ],
      "name": "EmptyLatentImageCustomPresets",
      "display_name": "Empty Latent Image Custom Presets",
      "description": "\nGenerates an empty latent image with the specified dimensions.  \nThe choices are loaded from 'custom_dimensions.json' in the nodes folder.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "ModelPassThrough": {
      "input": {
          "required": {},
          "optional": {
              "model": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "model"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "model"
      ],
      "name": "ModelPassThrough",
      "display_name": "ModelPass",
      "description": "\n    Simply passes through the model,\n    workaround for Set node not allowing bypassed inputs.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/misc",
      "output_node": false
  },
  "ModelSaveKJ": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "diffusion_models/ComfyUI"
                  }
              ],
              "model_key_prefix": [
                  "STRING",
                  {
                      "default": "model.diffusion_model."
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "model",
              "filename_prefix",
              "model_key_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ModelSaveKJ",
      "display_name": "Model Save KJ",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "advanced/model_merging",
      "output_node": true
  },
  "SetShakkerLabsUnionControlNetType": {
      "input": {
          "required": {
              "control_net": [
                  "CONTROL_NET"
              ],
              "type": [
                  [
                      "auto",
                      "canny",
                      "tile",
                      "depth",
                      "blur",
                      "pose",
                      "gray",
                      "low quality"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "control_net",
              "type"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "SetShakkerLabsUnionControlNetType",
      "display_name": "Set Shakker Labs Union ControlNet Type",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "conditioning/controlnet",
      "output_node": false
  },
  "StyleModelApplyAdvanced": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "style_model": [
                  "STYLE_MODEL"
              ],
              "clip_vision_output": [
                  "CLIP_VISION_OUTPUT"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "style_model",
              "clip_vision_output",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "StyleModelApplyAdvanced",
      "display_name": "Style Model Apply Advanced",
      "description": "StyleModelApply but with strength parameter",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "NormalizedAmplitudeToMask": {
      "input": {
          "required": {
              "normalized_amp": [
                  "NORMALIZED_AMPLITUDE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -255,
                      "max": 255,
                      "step": 1
                  }
              ],
              "location_x": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "location_y": [
                  "INT",
                  {
                      "default": 256,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "size": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape": [
                  [
                      "none",
                      "circle",
                      "square",
                      "triangle"
                  ],
                  {
                      "default": "none"
                  }
              ],
              "color": [
                  [
                      "white",
                      "amplitude"
                  ],
                  {
                      "default": "amplitude"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "normalized_amp",
              "width",
              "height",
              "frame_offset",
              "location_x",
              "location_y",
              "size",
              "shape",
              "color"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "NormalizedAmplitudeToMask",
      "display_name": "NormalizedAmplitudeToMask",
      "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates masks based on the normalized amplitude.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "NormalizedAmplitudeToFloatList": {
      "input": {
          "required": {
              "normalized_amp": [
                  "NORMALIZED_AMPLITUDE"
              ]
          }
      },
      "input_order": {
          "required": [
              "normalized_amp"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "NormalizedAmplitudeToFloatList",
      "display_name": "NormalizedAmplitudeToFloatList",
      "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates a list of floats from the normalized amplitude.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "OffsetMaskByNormalizedAmplitude": {
      "input": {
          "required": {
              "normalized_amp": [
                  "NORMALIZED_AMPLITUDE"
              ],
              "mask": [
                  "MASK"
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "rotate": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "angle_multiplier": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.001,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "normalized_amp",
              "mask",
              "x",
              "y",
              "rotate",
              "angle_multiplier"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "mask"
      ],
      "name": "OffsetMaskByNormalizedAmplitude",
      "display_name": "OffsetMaskByNormalizedAmplitude",
      "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nOffsets masks based on the normalized amplitude.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "ImageTransformByNormalizedAmplitude": {
      "input": {
          "required": {
              "normalized_amp": [
                  "NORMALIZED_AMPLITUDE"
              ],
              "zoom_scale": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.001,
                      "display": "number"
                  }
              ],
              "x_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16383,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "y_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -16383,
                      "max": 16384,
                      "step": 1,
                      "display": "number"
                  }
              ],
              "cumulative": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "normalized_amp",
              "zoom_scale",
              "x_offset",
              "y_offset",
              "cumulative",
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageTransformByNormalizedAmplitude",
      "display_name": "ImageTransformByNormalizedAmplitude",
      "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nTransforms image based on the normalized amplitude.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "AudioConcatenate": {
      "input": {
          "required": {
              "audio1": [
                  "AUDIO"
              ],
              "audio2": [
                  "AUDIO"
              ],
              "direction": [
                  [
                      "right",
                      "left"
                  ],
                  {
                      "default": "right"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "audio1",
              "audio2",
              "direction"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AUDIO"
      ],
      "name": "AudioConcatenate",
      "display_name": "AudioConcatenate",
      "description": "\nConcatenates the audio1 to audio2 in the specified direction.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "SplineEditor": {
      "input": {
          "required": {
              "points_store": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "coordinates": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "mask_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "mask_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "points_to_sample": [
                  "INT",
                  {
                      "default": 16,
                      "min": 2,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sampling_method": [
                  [
                      "path",
                      "time",
                      "controlpoints"
                  ],
                  {
                      "default": "time"
                  }
              ],
              "interpolation": [
                  [
                      "cardinal",
                      "monotone",
                      "basis",
                      "linear",
                      "step-before",
                      "step-after",
                      "polar",
                      "polar-reverse"
                  ],
                  {
                      "default": "cardinal"
                  }
              ],
              "tension": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "repeat_output": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "float_output_type": [
                  [
                      "list",
                      "pandas series",
                      "tensor"
                  ],
                  {
                      "default": "list"
                  }
              ]
          },
          "optional": {
              "min_value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10000.0,
                      "max": 10000.0,
                      "step": 0.01
                  }
              ],
              "max_value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10000.0,
                      "max": 10000.0,
                      "step": 0.01
                  }
              ],
              "bg_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "points_store",
              "coordinates",
              "mask_width",
              "mask_height",
              "points_to_sample",
              "sampling_method",
              "interpolation",
              "tension",
              "repeat_output",
              "float_output_type"
          ],
          "optional": [
              "min_value",
              "max_value",
              "bg_image"
          ]
      },
      "output": [
          "MASK",
          "STRING",
          "FLOAT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "mask",
          "coord_str",
          "float",
          "count",
          "normalized_str"
      ],
      "name": "SplineEditor",
      "display_name": "Spline Editor",
      "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create values for various   \n## schedules and/or mask batches.  \n\n**Shift + click** to add control point at end.\n**Ctrl + click** to add control point (subdivide) between two points.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end.  \n  \nRight click on canvas for context menu:  \nThese are purely visual options, doesn't affect the output:  \n - Toggle handles visibility\n - Display sample points: display the points to be returned.  \n\n**points_to_sample** value sets the number of samples  \nreturned from the **drawn spline itself**, this is independent from the  \nactual control points, so the interpolation type matters.  \nsampling_method: \n - time: samples along the time axis, used for schedules  \n - path: samples along the path itself, useful for coordinates  \n\noutput types:\n - mask batch  \n        example compatible nodes: anything that takes masks  \n - list of floats\n        example compatible nodes: IPAdapter weights  \n - pandas series\n        example compatible nodes: anything that takes Fizz'  \n        nodes Batch Value Schedule  \n - torch tensor  \n        example compatible nodes: unknown\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/weights",
      "output_node": false
  },
  "CreateShapeImageOnPath": {
      "input": {
          "required": {
              "shape": [
                  [
                      "circle",
                      "square",
                      "triangle"
                  ],
                  {
                      "default": "circle"
                  }
              ],
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 2,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 2,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_color": [
                  "STRING",
                  {
                      "default": "white"
                  }
              ],
              "bg_color": [
                  "STRING",
                  {
                      "default": "black"
                  }
              ],
              "blur_radius": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "intensity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ],
              "trailing": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "shape",
              "coordinates",
              "frame_width",
              "frame_height",
              "shape_width",
              "shape_height",
              "shape_color",
              "bg_color",
              "blur_radius",
              "intensity"
          ],
          "optional": [
              "size_multiplier",
              "trailing"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "mask"
      ],
      "name": "CreateShapeImageOnPath",
      "display_name": "Create Shape Image On Path",
      "description": "\nCreates an image or batch of images with the specified shape.  \nLocations are center locations.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "CreateShapeMaskOnPath": {
      "input": {
          "required": {
              "shape": [
                  [
                      "circle",
                      "square",
                      "triangle"
                  ],
                  {
                      "default": "circle"
                  }
              ],
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "shape_height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "shape",
              "coordinates",
              "frame_width",
              "frame_height",
              "shape_width",
              "shape_height"
          ],
          "optional": [
              "size_multiplier"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "mask",
          "mask_inverted"
      ],
      "name": "CreateShapeMaskOnPath",
      "display_name": "Create Shape Mask On Path",
      "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateTextOnPath": {
      "input": {
          "required": {
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "default": "text",
                      "multiline": true
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "font": [
                  [
                      "FreeMono.ttf",
                      "FreeMonoBoldOblique.otf",
                      "TTNorms-Black.otf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 42
                  }
              ],
              "alignment": [
                  [
                      "left",
                      "center",
                      "right"
                  ],
                  {
                      "default": "center"
                  }
              ],
              "text_color": [
                  "STRING",
                  {
                      "default": "white"
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coordinates",
              "text",
              "frame_width",
              "frame_height",
              "font",
              "font_size",
              "alignment",
              "text_color"
          ],
          "optional": [
              "size_multiplier"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "mask_inverted"
      ],
      "name": "CreateTextOnPath",
      "display_name": "Create Text On Path",
      "description": "\nCreates a mask or batch of masks with the specified text.  \nLocations are center locations.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "CreateGradientFromCoords": {
      "input": {
          "required": {
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "frame_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "frame_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "start_color": [
                  "STRING",
                  {
                      "default": "white"
                  }
              ],
              "end_color": [
                  "STRING",
                  {
                      "default": "black"
                  }
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coordinates",
              "frame_width",
              "frame_height",
              "start_color",
              "end_color",
              "multiplier"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "CreateGradientFromCoords",
      "display_name": "Create Gradient From Coords",
      "description": "\nCreates a gradient image from coordinates.    \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "GradientToFloat": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "steps": [
                  "INT",
                  {
                      "default": 10,
                      "min": 2,
                      "max": 10000,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "steps"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "float_x",
          "float_y"
      ],
      "name": "GradientToFloat",
      "display_name": "Gradient To Float",
      "description": "\nCalculates list of floats from image.    \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/image",
      "output_node": false
  },
  "WeightScheduleExtend": {
      "input": {
          "required": {
              "input_values_1": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "forceInput": true
                  }
              ],
              "input_values_2": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "forceInput": true
                  }
              ],
              "output_type": [
                  [
                      "match_input",
                      "list",
                      "pandas series",
                      "tensor"
                  ],
                  {
                      "default": "match_input"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_values_1",
              "input_values_2",
              "output_type"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "WeightScheduleExtend",
      "display_name": "Weight Schedule Extend",
      "description": "\nExtends, and converts if needed, different value lists/series  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/weights",
      "output_node": false
  },
  "MaskOrImageToWeight": {
      "input": {
          "required": {
              "output_type": [
                  [
                      "list",
                      "pandas series",
                      "tensor",
                      "string"
                  ],
                  {
                      "default": "list"
                  }
              ]
          },
          "optional": {
              "images": [
                  "IMAGE"
              ],
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "output_type"
          ],
          "optional": [
              "images",
              "masks"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "STRING"
      ],
      "name": "MaskOrImageToWeight",
      "display_name": "Mask Or Image To Weight",
      "description": "\nGets the mean values from mask or image batch  \nand returns that as the selected output type.   \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/weights",
      "output_node": false
  },
  "WeightScheduleConvert": {
      "input": {
          "required": {
              "input_values": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "forceInput": true
                  }
              ],
              "output_type": [
                  [
                      "match_input",
                      "list",
                      "pandas series",
                      "tensor"
                  ],
                  {
                      "default": "list"
                  }
              ],
              "invert": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "repeat": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "remap_to_frames": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "interpolation_curve": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ],
              "remap_values": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "remap_min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -100000,
                      "max": 100000.0,
                      "step": 0.01
                  }
              ],
              "remap_max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100000,
                      "max": 100000.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_values",
              "output_type",
              "invert",
              "repeat"
          ],
          "optional": [
              "remap_to_frames",
              "interpolation_curve",
              "remap_values",
              "remap_min",
              "remap_max"
          ]
      },
      "output": [
          "FLOAT",
          "STRING",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "STRING",
          "INT"
      ],
      "name": "WeightScheduleConvert",
      "display_name": "Weight Schedule Convert",
      "description": "\nConverts different value lists/series to another type.  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/weights",
      "output_node": false
  },
  "FloatToMask": {
      "input": {
          "required": {
              "input_values": [
                  "FLOAT",
                  {
                      "forceInput": true,
                      "default": 0
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_values",
              "width",
              "height"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "FloatToMask",
      "display_name": "Float To Mask",
      "description": "\nGenerates a batch of masks based on the input float values.\nThe batch size is determined by the length of the input float values.\nEach mask is generated with the specified width and height.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/masking/generate",
      "output_node": false
  },
  "FloatToSigmas": {
      "input": {
          "required": {
              "float_list": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_list"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "FloatToSigmas",
      "display_name": "Float To Sigmas",
      "description": "\nCreates a sigmas tensor from list of float values.  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "SigmasToFloat": {
      "input": {
          "required": {
              "sigmas": [
                  "SIGMAS"
              ]
          }
      },
      "input_order": {
          "required": [
              "sigmas"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "float"
      ],
      "name": "SigmasToFloat",
      "display_name": "Sigmas To Float",
      "description": "\nCreates a float list from sigmas tensors.  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/noise",
      "output_node": false
  },
  "PlotCoordinates": {
      "input": {
          "required": {
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "default": "title",
                      "multiline": false
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "bbox_width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "bbox_height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coordinates",
              "text",
              "width",
              "height",
              "bbox_width",
              "bbox_height"
          ],
          "optional": [
              "size_multiplier"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "images",
          "width",
          "height",
          "bbox_width",
          "bbox_height"
      ],
      "name": "PlotCoordinates",
      "display_name": "Plot Coordinates",
      "description": "\nPlots coordinates to sequence of images using Matplotlib.  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "InterpolateCoords": {
      "input": {
          "required": {
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "interpolation_curve": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coordinates",
              "interpolation_curve"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "coordinates"
      ],
      "name": "InterpolateCoords",
      "display_name": "Interpolate Coords",
      "description": "\nInterpolates coordinates based on a curve.   \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "PointsEditor": {
      "input": {
          "required": {
              "points_store": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "coordinates": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "neg_coordinates": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "bbox_store": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "bboxes": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "bbox_format": [
                  [
                      "xyxy",
                      "xywh"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "normalize": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "bg_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "points_store",
              "coordinates",
              "neg_coordinates",
              "bbox_store",
              "bboxes",
              "bbox_format",
              "width",
              "height",
              "normalize"
          ],
          "optional": [
              "bg_image"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "BBOX",
          "MASK",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "positive_coords",
          "negative_coords",
          "bbox",
          "bbox_mask",
          "cropped_image"
      ],
      "name": "PointsEditor",
      "display_name": "Points Editor",
      "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create coordinates\n\n**Shift + click** to add a positive (green) point.\n**Shift + right click** to add a negative (red) point.\n**Ctrl + click** to draw a box.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end of the points array.  \n  \nTo add an image select the node and copy/paste or drag in the image.  \nOr from the bg_image input on queue (first frame of the batch).  \n\n**THE IMAGE IS SAVED TO THE NODE AND WORKFLOW METADATA**  \nyou can clear the image from the context menu by right clicking on the canvas  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "StabilityAPI_SD3": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "n_prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 4294967294,
                      "step": 1
                  }
              ],
              "model": [
                  [
                      "sd3",
                      "sd3-turbo"
                  ],
                  {
                      "default": "sd3"
                  }
              ],
              "aspect_ratio": [
                  [
                      "1:1",
                      "16:9",
                      "21:9",
                      "2:3",
                      "3:2",
                      "4:5",
                      "5:4",
                      "9:16",
                      "9:21"
                  ],
                  {
                      "default": "1:1"
                  }
              ],
              "output_format": [
                  [
                      "png",
                      "jpeg"
                  ],
                  {
                      "default": "jpeg"
                  }
              ]
          },
          "optional": {
              "api_key": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "image": [
                  "IMAGE"
              ],
              "img2img_strength": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "disable_metadata": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt",
              "n_prompt",
              "seed",
              "model",
              "aspect_ratio",
              "output_format"
          ],
          "optional": [
              "api_key",
              "image",
              "img2img_strength",
              "disable_metadata"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "StabilityAPI_SD3",
      "display_name": "Stability API SD3",
      "description": "\n## Calls StabilityAI API\n   \nAlthough you may have multiple keys in your account,  \nyou should use the same key for all requests to this API.  \n\nGet your API key here: https://platform.stability.ai/account/keys  \nRecommended to set the key in the config.json -file under this  \nnode packs folder.  \n# WARNING:  \nOtherwise the API key may get saved in the image metadata even  \nwith \"disable_metadata\" on if the workflow includes save nodes  \nseparate from this node.  \n   \nsd3 requires 6.5 credits per generation  \nsd3-turbo requires 4 credits per generation  \n\nIf no image is provided, mode is set to text-to-image  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "SoundReactive": {
      "input": {
          "required": {
              "sound_level": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 99999,
                      "step": 0.01
                  }
              ],
              "start_range_hz": [
                  "INT",
                  {
                      "default": 150,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "end_range_hz": [
                  "INT",
                  {
                      "default": 2000,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 99999,
                      "step": 0.01
                  }
              ],
              "smoothing_factor": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "normalize": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sound_level",
              "start_range_hz",
              "end_range_hz",
              "multiplier",
              "smoothing_factor",
              "normalize"
          ]
      },
      "output": [
          "FLOAT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "sound_level",
          "sound_level_int"
      ],
      "name": "SoundReactive",
      "display_name": "Sound Reactive",
      "description": "\nReacts to the sound level of the input.  \nUses your browsers sound input options and requires.  \nMeant to be used with realtime diffusion with autoqueue.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/audio",
      "output_node": false
  },
  "StableZero123_BatchSchedule": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 256,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "azimuth_points_string": [
                  "STRING",
                  {
                      "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
                      "multiline": true
                  }
              ],
              "elevation_points_string": [
                  "STRING",
                  {
                      "default": "0:(0.0),\n7:(0.0),\n15:(0.0)\n",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "batch_size",
              "interpolation",
              "azimuth_points_string",
              "elevation_points_string"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "StableZero123_BatchSchedule",
      "display_name": "Stable Zero123 Batch Schedule",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "SV3D_BatchSchedule": {
      "input": {
          "required": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "init_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 576,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 576,
                      "min": 16,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 21,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "azimuth_points_string": [
                  "STRING",
                  {
                      "default": "0:(0.0),\n9:(180.0),\n20:(360.0)\n",
                      "multiline": true
                  }
              ],
              "elevation_points_string": [
                  "STRING",
                  {
                      "default": "0:(0.0),\n9:(0.0),\n20:(0.0)\n",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip_vision",
              "init_image",
              "vae",
              "width",
              "height",
              "batch_size",
              "interpolation",
              "azimuth_points_string",
              "elevation_points_string"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "latent"
      ],
      "name": "SV3D_BatchSchedule",
      "display_name": "SV3D Batch Schedule",
      "description": "\nAllow scheduling of the azimuth and elevation conditions for SV3D.  \nNote that SV3D is still a video model and the schedule needs to always go forward  \nhttps://huggingface.co/stabilityai/sv3d\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "LoadResAdapterNormalization": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "resadapter_path": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "resadapter_path"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "LoadResAdapterNormalization",
      "display_name": "LoadResAdapterNormalization",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "Superprompt": {
      "input": {
          "required": {
              "instruction_prompt": [
                  "STRING",
                  {
                      "default": "Expand the following prompt to add more detail",
                      "multiline": true
                  }
              ],
              "prompt": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true,
                      "forceInput": true
                  }
              ],
              "max_new_tokens": [
                  "INT",
                  {
                      "default": 128,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "instruction_prompt",
              "prompt",
              "max_new_tokens"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "Superprompt",
      "display_name": "Superprompt",
      "description": "\n# SuperPrompt\nA T5 model fine-tuned on the SuperPrompt dataset for  \nupsampling text prompts to more detailed descriptions.  \nMeant to be used as a pre-generation step for text-to-image  \nmodels that benefit from more detailed prompts.  \nhttps://huggingface.co/roborovski/superprompt-v1\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/text",
      "output_node": false
  },
  "GLIGENTextBoxApplyBatchCoords": {
      "input": {
          "required": {
              "conditioning_to": [
                  "CONDITIONING"
              ],
              "latents": [
                  "LATENT"
              ],
              "clip": [
                  "CLIP"
              ],
              "gligen_textbox_model": [
                  "GLIGEN"
              ],
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 128,
                      "min": 8,
                      "max": 4096,
                      "step": 8
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_to",
              "latents",
              "clip",
              "gligen_textbox_model",
              "coordinates",
              "text",
              "width",
              "height"
          ],
          "optional": [
              "size_multiplier"
          ]
      },
      "output": [
          "CONDITIONING",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "conditioning",
          "coord_preview"
      ],
      "name": "GLIGENTextBoxApplyBatchCoords",
      "display_name": "GLIGENTextBoxApplyBatchCoords",
      "description": "\nThis node allows scheduling GLIGEN text box positions in a batch,  \nto be used with AnimateDiff-Evolved. Intended to pair with the  \nSpline Editor -node.  \n\nGLIGEN model can be downloaded through the Manage's \"Install Models\" menu.  \nOr directly from here:  \nhttps://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/tree/main  \n  \nInputs:  \n- **latents** input is used to calculate batch size  \n- **clip** is your standard text encoder, use same as for the main prompt  \n- **gligen_textbox_model** connects to GLIGEN Loader  \n- **coordinates** takes a json string of points, directly compatible  \nwith the spline editor node.\n- **text** is the part of the prompt to set position for  \n- **width** and **height** are the size of the GLIGEN bounding box  \n  \nOutputs:\n- **conditioning** goes between to clip text encode and the sampler  \n- **coord_preview** is an optional preview of the coordinates and  \nbounding boxes.\n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "Intrinsic_lora_sampling": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "lora_name": [
                  [
                      "intrinsic_lora_sd15_albedo.safetensors",
                      "intrinsic_lora_sd15_depth.safetensors",
                      "intrinsic_lora_sd15_normal.safetensors",
                      "intrinsic_lora_sd15_shading.safetensors",
                      "intrinsic_loras.txt"
                  ]
              ],
              "task": [
                  [
                      "depth map",
                      "surface normals",
                      "albedo",
                      "shading"
                  ],
                  {
                      "default": "depth map"
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "optional_latent": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "lora_name",
              "task",
              "text",
              "clip",
              "vae",
              "per_batch"
          ],
          "optional": [
              "image",
              "optional_latent"
          ]
      },
      "output": [
          "IMAGE",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "LATENT"
      ],
      "name": "Intrinsic_lora_sampling",
      "display_name": "Intrinsic Lora Sampling",
      "description": "\nSampler to use the intrinsic loras:  \nhttps://github.com/duxiaodan/intrinsic-lora  \nThese LoRAs are tiny and thus included  \nwith this node pack.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes",
      "output_node": false
  },
  "CheckpointPerturbWeights": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "joint_blocks": [
                  "FLOAT",
                  {
                      "default": 0.02,
                      "min": 0.001,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "final_layer": [
                  "FLOAT",
                  {
                      "default": 0.02,
                      "min": 0.001,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "rest_of_the_blocks": [
                  "FLOAT",
                  {
                      "default": 0.02,
                      "min": 0.001,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 123,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "joint_blocks",
              "final_layer",
              "rest_of_the_blocks",
              "seed"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "CheckpointPerturbWeights",
      "display_name": "CheckpointPerturbWeights",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": true
  },
  "Screencap_mss": {
      "input": {
          "required": {
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 255,
                      "step": 1
                  }
              ],
              "delay": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "width",
              "height",
              "num_frames",
              "delay"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "Screencap_mss",
      "display_name": "Screencap mss",
      "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "WebcamCaptureCV2": {
      "input": {
          "required": {
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "cam_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "release": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "width",
              "height",
              "cam_index",
              "release"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "WebcamCaptureCV2",
      "display_name": "Webcam Capture CV2",
      "description": "\nCaptures a frame from a webcam using CV2.  \nCan be used for realtime diffusion with autoqueue.\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false
  },
  "DifferentialDiffusionAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "samples": [
                  "LATENT"
              ],
              "mask": [
                  "MASK"
              ],
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "samples",
              "mask",
              "multiplier"
          ]
      },
      "output": [
          "MODEL",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "LATENT"
      ],
      "name": "DifferentialDiffusionAdvanced",
      "display_name": "Differential Diffusion Advanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "_for_testing",
      "output_node": false
  },
  "FluxBlockLoraLoader": {
      "input": {
          "required": {
              "model": [
                  "MODEL",
                  {
                      "tooltip": "The diffusion model the LoRA will be applied to."
                  }
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01,
                      "tooltip": "How strongly to modify the diffusion model. This value can be negative."
                  }
              ]
          },
          "optional": {
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ],
                  {
                      "tooltip": "The name of the LoRA."
                  }
              ],
              "opt_lora_path": [
                  "STRING",
                  {
                      "forceInput": true,
                      "tooltip": "Absolute path of the LoRA."
                  }
              ],
              "blocks": [
                  "SELECTEDBLOCKS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "strength_model"
          ],
          "optional": [
              "lora_name",
              "opt_lora_path",
              "blocks"
          ]
      },
      "output": [
          "MODEL",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "model",
          "rank"
      ],
      "name": "FluxBlockLoraLoader",
      "display_name": "Flux Block Lora Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "output_tooltips": [
          "The modified diffusion model.",
          "possible rank of the LoRA."
      ]
  },
  "FluxBlockLoraSelect": {
      "input": {
          "required": {
              "double_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "double_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.0.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.1.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.2.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.3.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.4.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.5.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.6.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.7.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.8.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.9.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.10.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.11.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.12.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.13.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.14.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.15.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.16.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.17.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.18.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.19.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.20.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.21.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.22.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.23.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.24.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.25.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.26.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.27.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.28.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.29.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.30.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.31.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.32.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.33.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.34.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.35.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.36.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ],
              "single_blocks.37.": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "double_blocks.0.",
              "double_blocks.1.",
              "double_blocks.2.",
              "double_blocks.3.",
              "double_blocks.4.",
              "double_blocks.5.",
              "double_blocks.6.",
              "double_blocks.7.",
              "double_blocks.8.",
              "double_blocks.9.",
              "double_blocks.10.",
              "double_blocks.11.",
              "double_blocks.12.",
              "double_blocks.13.",
              "double_blocks.14.",
              "double_blocks.15.",
              "double_blocks.16.",
              "double_blocks.17.",
              "double_blocks.18.",
              "single_blocks.0.",
              "single_blocks.1.",
              "single_blocks.2.",
              "single_blocks.3.",
              "single_blocks.4.",
              "single_blocks.5.",
              "single_blocks.6.",
              "single_blocks.7.",
              "single_blocks.8.",
              "single_blocks.9.",
              "single_blocks.10.",
              "single_blocks.11.",
              "single_blocks.12.",
              "single_blocks.13.",
              "single_blocks.14.",
              "single_blocks.15.",
              "single_blocks.16.",
              "single_blocks.17.",
              "single_blocks.18.",
              "single_blocks.19.",
              "single_blocks.20.",
              "single_blocks.21.",
              "single_blocks.22.",
              "single_blocks.23.",
              "single_blocks.24.",
              "single_blocks.25.",
              "single_blocks.26.",
              "single_blocks.27.",
              "single_blocks.28.",
              "single_blocks.29.",
              "single_blocks.30.",
              "single_blocks.31.",
              "single_blocks.32.",
              "single_blocks.33.",
              "single_blocks.34.",
              "single_blocks.35.",
              "single_blocks.36.",
              "single_blocks.37."
          ]
      },
      "output": [
          "SELECTEDBLOCKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "blocks"
      ],
      "name": "FluxBlockLoraSelect",
      "display_name": "Flux Block Lora Select",
      "description": "Select individual block alpha values, value of 0 removes the block altogether",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "output_tooltips": [
          "The modified diffusion model."
      ]
  },
  "CustomControlNetWeightsFluxFromList": {
      "input": {
          "required": {
              "list_of_floats": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "uncond_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "cn_extras": [
                  "CN_WEIGHTS_EXTRAS"
              ],
              "autosize": [
                  "ACNAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "list_of_floats"
          ],
          "optional": [
              "uncond_multiplier",
              "cn_extras",
              "autosize"
          ]
      },
      "output": [
          "CONTROL_NET_WEIGHTS",
          "TIMESTEP_KEYFRAME"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CN_WEIGHTS",
          "TK_SHORTCUT"
      ],
      "name": "CustomControlNetWeightsFluxFromList",
      "display_name": "Custom ControlNet Weights Flux From List",
      "description": "Creates controlnet weights from a list of floats for Advanced-ControlNet",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/controlnet",
      "output_node": false
  },
  "CheckpointLoaderKJ": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ],
                  {
                      "tooltip": "The name of the checkpoint (model) to load."
                  }
              ],
              "patch_cublaslinear": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
                  }
              ],
              "sage_attention": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Patch comfy attention to use sageattn."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "patch_cublaslinear",
              "sage_attention"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "name": "CheckpointLoaderKJ",
      "display_name": "CheckpointLoaderKJ",
      "description": "Experimental node for patching torch.nn.Linear with CublasLinear.",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": true,
      "experimental": true
  },
  "DiffusionModelLoaderKJ": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "IC-Light/iclight_sd15_fc.safetensors",
                      "flux1-dev-fp8.safetensors",
                      "flux1-dev.safetensors",
                      "flux1-schnell.safetensors"
                  ],
                  {
                      "tooltip": "The name of the checkpoint (model) to load."
                  }
              ],
              "weight_dtype": [
                  [
                      "default",
                      "fp8_e4m3fn",
                      "fp8_e4m3fn_fast",
                      "fp8_e5m2"
                  ]
              ],
              "patch_cublaslinear": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
                  }
              ],
              "sage_attention": [
                  [
                      "disabled",
                      "auto",
                      "sageattn_qk_int8_pv_fp16_cuda",
                      "sageattn_qk_int8_pv_fp16_triton",
                      "sageattn_qk_int8_pv_fp8_cuda"
                  ],
                  {
                      "default": false,
                      "tooltip": "Patch comfy attention to use sageattn."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "weight_dtype",
              "patch_cublaslinear",
              "sage_attention"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "DiffusionModelLoaderKJ",
      "display_name": "Diffusion Model Loader KJ",
      "description": "Node for patching torch.nn.Linear with CublasLinear.",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": true,
      "experimental": true
  },
  "TorchCompileModelFluxAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ]
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable full graph mode"
                  }
              ],
              "mode": [
                  [
                      "default",
                      "max-autotune",
                      "max-autotune-no-cudagraphs",
                      "reduce-overhead"
                  ],
                  {
                      "default": "default"
                  }
              ],
              "double_blocks": [
                  "STRING",
                  {
                      "default": "0-18",
                      "multiline": true
                  }
              ],
              "single_blocks": [
                  "STRING",
                  {
                      "default": "0-37",
                      "multiline": true
                  }
              ],
              "dynamic": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable dynamic mode"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "backend",
              "fullgraph",
              "mode",
              "double_blocks",
              "single_blocks",
              "dynamic"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "TorchCompileModelFluxAdvanced",
      "display_name": "TorchCompileModelFluxAdvanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "experimental": true
  },
  "TorchCompileVAE": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ]
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable full graph mode"
                  }
              ],
              "mode": [
                  [
                      "default",
                      "max-autotune",
                      "max-autotune-no-cudagraphs",
                      "reduce-overhead"
                  ],
                  {
                      "default": "default"
                  }
              ],
              "compile_encoder": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Compile encoder"
                  }
              ],
              "compile_decoder": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Compile decoder"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "vae",
              "backend",
              "fullgraph",
              "mode",
              "compile_encoder",
              "compile_decoder"
          ]
      },
      "output": [
          "VAE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VAE"
      ],
      "name": "TorchCompileVAE",
      "display_name": "TorchCompileVAE",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "experimental": true
  },
  "TorchCompileControlNet": {
      "input": {
          "required": {
              "controlnet": [
                  "CONTROL_NET"
              ],
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ]
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable full graph mode"
                  }
              ],
              "mode": [
                  [
                      "default",
                      "max-autotune",
                      "max-autotune-no-cudagraphs",
                      "reduce-overhead"
                  ],
                  {
                      "default": "default"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "controlnet",
              "backend",
              "fullgraph",
              "mode"
          ]
      },
      "output": [
          "CONTROL_NET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTROL_NET"
      ],
      "name": "TorchCompileControlNet",
      "display_name": "TorchCompileControlNet",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "experimental": true
  },
  "PatchModelPatcherOrder": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "patch_order": [
                  [
                      "object_patch_first",
                      "weight_patch_first"
                  ],
                  {
                      "default": "weight_patch_first",
                      "tooltip": "Patch the comfy patch_model function to load weight patches (LoRAs) before compiling the model"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "patch_order"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "PatchModelPatcherOrder",
      "display_name": "Patch Model Patcher Order",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "experimental": true
  },
  "TorchCompileLTXModel": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ]
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable full graph mode"
                  }
              ],
              "mode": [
                  [
                      "default",
                      "max-autotune",
                      "max-autotune-no-cudagraphs",
                      "reduce-overhead"
                  ],
                  {
                      "default": "default"
                  }
              ],
              "dynamic": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable dynamic mode"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "backend",
              "fullgraph",
              "mode",
              "dynamic"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "TorchCompileLTXModel",
      "display_name": "TorchCompileLTXModel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/experimental",
      "output_node": false,
      "experimental": true
  },
  "CreateInstanceDiffusionTracking": {
      "input": {
          "required": {
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "bbox_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "bbox_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 16,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "class_name": [
                  "STRING",
                  {
                      "default": "class_name"
                  }
              ],
              "class_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "prompt": [
                  "STRING",
                  {
                      "default": "prompt",
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "size_multiplier": [
                  "FLOAT",
                  {
                      "default": [
                          1.0
                      ],
                      "forceInput": true
                  }
              ],
              "fit_in_frame": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coordinates",
              "width",
              "height",
              "bbox_width",
              "bbox_height",
              "class_name",
              "class_id",
              "prompt"
          ],
          "optional": [
              "size_multiplier",
              "fit_in_frame"
          ]
      },
      "output": [
          "TRACKING",
          "STRING",
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "tracking",
          "prompt",
          "width",
          "height",
          "bbox_width",
          "bbox_height"
      ],
      "name": "CreateInstanceDiffusionTracking",
      "display_name": "CreateInstanceDiffusionTracking",
      "description": "\nCreates tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n  \nInstanceDiffusion prompt format:  \n\"class_id.class_name\": \"prompt\",  \nfor example:  \n\"1.head\": \"((head))\",  \n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/InstanceDiffusion",
      "output_node": false
  },
  "AppendInstanceDiffusionTracking": {
      "input": {
          "required": {
              "tracking_1": [
                  "TRACKING",
                  {
                      "forceInput": true
                  }
              ],
              "tracking_2": [
                  "TRACKING",
                  {
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "prompt_1": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ],
              "prompt_2": [
                  "STRING",
                  {
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "tracking_1",
              "tracking_2"
          ],
          "optional": [
              "prompt_1",
              "prompt_2"
          ]
      },
      "output": [
          "TRACKING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "tracking",
          "prompt"
      ],
      "name": "AppendInstanceDiffusionTracking",
      "display_name": "AppendInstanceDiffusionTracking",
      "description": "\nAppends tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/InstanceDiffusion",
      "output_node": false
  },
  "DrawInstanceDiffusionTracking": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "tracking": [
                  "TRACKING",
                  {
                      "forceInput": true
                  }
              ],
              "box_line_width": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ],
              "draw_text": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "font": [
                  [
                      "FreeMono.ttf",
                      "FreeMonoBoldOblique.otf",
                      "TTNorms-Black.otf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 20
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "tracking",
              "box_line_width",
              "draw_text",
              "font",
              "font_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "DrawInstanceDiffusionTracking",
      "display_name": "DrawInstanceDiffusionTracking",
      "description": "\nDraws the tracking data from  \nCreateInstanceDiffusionTracking -node.\n\n",
      "python_module": "custom_nodes.ComfyUI-KJNodes",
      "category": "KJNodes/InstanceDiffusion",
      "output_node": false
  },
  "HDR Effects (SuperBeasts.AI)": {
      "input": {
          "required": {
              "image": [
                  "IMAGE",
                  {
                      "default": null
                  }
              ],
              "hdr_intensity": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 5.0,
                      "step": 0.01
                  }
              ],
              "shadow_intensity": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "highlight_intensity": [
                  "FLOAT",
                  {
                      "default": 0.75,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "gamma_intensity": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "contrast": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "enhance_color": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "hdr_intensity",
              "shadow_intensity",
              "highlight_intensity",
              "gamma_intensity",
              "contrast",
              "enhance_color"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "result_img"
      ],
      "name": "HDR Effects (SuperBeasts.AI)",
      "display_name": "HDR Effects (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Image",
      "output_node": false
  },
  "Make Resized Mask Batch (SuperBeasts.AI)": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 1,
                      "step": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 768,
                      "min": 1,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask1": [
                  "MASK"
              ],
              "mask2": [
                  "MASK"
              ],
              "mask3": [
                  "MASK"
              ],
              "mask4": [
                  "MASK"
              ],
              "mask5": [
                  "MASK"
              ],
              "mask6": [
                  "MASK"
              ],
              "mask7": [
                  "MASK"
              ],
              "mask8": [
                  "MASK"
              ],
              "mask9": [
                  "MASK"
              ],
              "mask10": [
                  "MASK"
              ],
              "mask11": [
                  "MASK"
              ],
              "mask12": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height"
          ],
          "optional": [
              "mask1",
              "mask2",
              "mask3",
              "mask4",
              "mask5",
              "mask6",
              "mask7",
              "mask8",
              "mask9",
              "mask10",
              "mask11",
              "mask12"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "Make Resized Mask Batch (SuperBeasts.AI)",
      "display_name": "Make Resized Mask Batch (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Masks",
      "output_node": false
  },
  "Mask Batch Manager (SuperBeasts.AI)": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 768
                  }
              ]
          },
          "optional": {
              "new_order": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height"
          ],
          "optional": [
              "new_order"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "Mask Batch Manager (SuperBeasts.AI)",
      "display_name": "Mask Batch Manager (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Masks",
      "output_node": false
  },
  "Image Batch Manager (SuperBeasts.AI)": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "order": 1
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 768
                  }
              ],
              "max_images": [
                  "INT",
                  {
                      "default": 10
                  }
              ],
              "random_order": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "new_manual_order": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "max_images",
              "random_order"
          ],
          "optional": [
              "new_manual_order"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "STRING"
      ],
      "name": "Image Batch Manager (SuperBeasts.AI)",
      "display_name": "Image Batch Manager (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Image",
      "output_node": false
  },
  "String List Manager (SuperBeasts.AI)": {
      "input": {
          "required": {
              "frames_per_image": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "new_order": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "frames_per_image"
          ],
          "optional": [
              "new_order"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "String List Manager (SuperBeasts.AI)",
      "display_name": "String List Manager (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Utils",
      "output_node": false
  },
  "Deflicker - Experimental (SuperBeasts.AI)": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "context_length": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "brightness_threshold": [
                  "FLOAT",
                  {
                      "default": 0.05,
                      "min": 0.01,
                      "max": 0.5,
                      "step": 0.01
                  }
              ],
              "blending_strength": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_reduction_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 5.0,
                      "step": 0.1
                  }
              ],
              "gradient_smoothing_strength": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 3,
                      "step": 1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "context_length",
              "brightness_threshold",
              "blending_strength",
              "noise_reduction_strength",
              "gradient_smoothing_strength",
              "batch_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Deflicker - Experimental (SuperBeasts.AI)",
      "display_name": "Deflicker - Experimental (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Animation",
      "output_node": false
  },
  "Pixel Deflicker - Experimental (SuperBeasts.AI)": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "window_size": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "blending_strength": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "window_size",
              "blending_strength",
              "batch_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Pixel Deflicker - Experimental (SuperBeasts.AI)",
      "display_name": "Pixel Deflicker - Experimental (SuperBeasts.AI)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-SuperBeasts",
      "category": "SuperBeastsAI/Animation",
      "output_node": false
  },
  "SAMLoader": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mobile_sam.pt",
                      "sam_vit_b_01ec64.pth",
                      "sam_vit_h_4b8939.pth",
                      "sam_vit_l_0b3195.pth",
                      "ESAM"
                  ],
                  {
                      "tooltip": "The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."
                  }
              ],
              "device_mode": [
                  [
                      "AUTO",
                      "Prefer GPU",
                      "CPU"
                  ],
                  {
                      "tooltip": "AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name",
              "device_mode"
          ]
      },
      "output": [
          "SAM_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAM_MODEL"
      ],
      "name": "SAMLoader",
      "display_name": "SAMLoader (Impact)",
      "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack",
      "output_node": false
  },
  "CLIPSegDetectorProvider": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "tooltip": "Enter the targets to be detected, separated by commas"
                  }
              ],
              "blur": [
                  "FLOAT",
                  {
                      "min": 0,
                      "max": 15,
                      "step": 0.1,
                      "default": 7,
                      "tooltip": "Blurs the detected mask"
                  }
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "min": 0,
                      "max": 1,
                      "step": 0.05,
                      "default": 0.4,
                      "tooltip": "Detects only areas that are certain above the threshold."
                  }
              ],
              "dilation_factor": [
                  "INT",
                  {
                      "min": 0,
                      "max": 10,
                      "step": 1,
                      "default": 4,
                      "tooltip": "Dilates the detected mask."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "blur",
              "threshold",
              "dilation_factor"
          ]
      },
      "output": [
          "BBOX_DETECTOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BBOX_DETECTOR"
      ],
      "name": "CLIPSegDetectorProvider",
      "display_name": "CLIPSegDetectorProvider",
      "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ONNXDetectorProvider": {
      "input": {
          "required": {
              "model_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ]
      },
      "output": [
          "BBOX_DETECTOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BBOX_DETECTOR"
      ],
      "name": "ONNXDetectorProvider",
      "display_name": "ONNXDetectorProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack",
      "output_node": false
  },
  "BitwiseAndMaskForEach": {
      "input": {
          "required": {
              "base_segs": [
                  "SEGS"
              ],
              "mask_segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "base_segs",
              "mask_segs"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "BitwiseAndMaskForEach",
      "display_name": "Pixelwise(SEGS & SEGS)",
      "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "SubtractMaskForEach": {
      "input": {
          "required": {
              "base_segs": [
                  "SEGS"
              ],
              "mask_segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "base_segs",
              "mask_segs"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "SubtractMaskForEach",
      "display_name": "Pixelwise(SEGS - SEGS)",
      "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "DetailerForEach": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "model",
              "clip",
              "vae",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "wildcard",
              "cycle"
          ],
          "optional": [
              "detailer_hook",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DetailerForEach",
      "display_name": "Detailer (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "DetailerForEachDebug": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "model",
              "clip",
              "vae",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "wildcard",
              "cycle"
          ],
          "optional": [
              "detailer_hook",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          true,
          true,
          true,
          true
      ],
      "output_name": [
          "image",
          "cropped",
          "cropped_refined",
          "cropped_refined_alpha",
          "cnet_images"
      ],
      "name": "DetailerForEachDebug",
      "display_name": "DetailerDebug (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "DetailerForEachPipe": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "basic_pipe",
              "wildcard",
              "refiner_ratio",
              "cycle"
          ],
          "optional": [
              "detailer_hook",
              "refiner_basic_pipe_opt",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "SEGS",
          "BASIC_PIPE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          true
      ],
      "output_name": [
          "image",
          "segs",
          "basic_pipe",
          "cnet_images"
      ],
      "name": "DetailerForEachPipe",
      "display_name": "Detailer (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "DetailerForEachDebugPipe": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "basic_pipe",
              "wildcard",
              "refiner_ratio",
              "cycle"
          ],
          "optional": [
              "detailer_hook",
              "refiner_basic_pipe_opt",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "SEGS",
          "BASIC_PIPE",
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          true,
          true,
          true,
          true
      ],
      "output_name": [
          "image",
          "segs",
          "basic_pipe",
          "cropped",
          "cropped_refined",
          "cropped_refined_alpha",
          "cnet_images"
      ],
      "name": "DetailerForEachDebugPipe",
      "display_name": "DetailerDebug (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "DetailerForEachPipeForAnimateDiff": {
      "input": {
          "required": {
              "image_frames": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_frames",
              "segs",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "basic_pipe",
              "refiner_ratio"
          ],
          "optional": [
              "detailer_hook",
              "refiner_basic_pipe_opt",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "SEGS",
          "BASIC_PIPE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          true
      ],
      "output_name": [
          "image",
          "segs",
          "basic_pipe",
          "cnet_images"
      ],
      "name": "DetailerForEachPipeForAnimateDiff",
      "display_name": "Detailer For AnimateDiff (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "SAMDetectorCombined": {
      "input": {
          "required": {
              "sam_model": [
                  "SAM_MODEL",
                  {
                      "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
                  }
              ],
              "segs": [
                  "SEGS",
                  {
                      "tooltip": "This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."
                  }
              ],
              "image": [
                  "IMAGE",
                  {
                      "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
                  }
              ],
              "detection_hint": [
                  [
                      "center-1",
                      "horizontal-2",
                      "vertical-2",
                      "rect-4",
                      "diamond-4",
                      "mask-area",
                      "mask-points",
                      "mask-point-bbox",
                      "none"
                  ],
                  {
                      "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1,
                      "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
                  }
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.93,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."
                  }
              ],
              "bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1,
                      "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
                  }
              ],
              "mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
                  }
              ],
              "mask_hint_use_negative": [
                  [
                      "False",
                      "Small",
                      "Outter"
                  ],
                  {
                      "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sam_model",
              "segs",
              "image",
              "detection_hint",
              "dilation",
              "threshold",
              "bbox_expansion",
              "mask_hint_threshold",
              "mask_hint_use_negative"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SAMDetectorCombined",
      "display_name": "SAMDetector (combined)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "SAMDetectorSegmented": {
      "input": {
          "required": {
              "sam_model": [
                  "SAM_MODEL",
                  {
                      "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
                  }
              ],
              "segs": [
                  "SEGS",
                  {
                      "tooltip": "This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."
                  }
              ],
              "image": [
                  "IMAGE",
                  {
                      "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
                  }
              ],
              "detection_hint": [
                  [
                      "center-1",
                      "horizontal-2",
                      "vertical-2",
                      "rect-4",
                      "diamond-4",
                      "mask-area",
                      "mask-points",
                      "mask-point-bbox",
                      "none"
                  ],
                  {
                      "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1,
                      "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
                  }
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.93,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1,
                      "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
                  }
              ],
              "mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
                  }
              ],
              "mask_hint_use_negative": [
                  [
                      "False",
                      "Small",
                      "Outter"
                  ],
                  {
                      "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sam_model",
              "segs",
              "image",
              "detection_hint",
              "dilation",
              "threshold",
              "bbox_expansion",
              "mask_hint_threshold",
              "mask_hint_use_negative"
          ]
      },
      "output": [
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "combined_mask",
          "batch_masks"
      ],
      "name": "SAMDetectorSegmented",
      "display_name": "SAMDetector (segmented)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "FaceDetailer": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "bbox_crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 10,
                      "step": 0.1
                  }
              ],
              "sam_detection_hint": [
                  [
                      "center-1",
                      "horizontal-2",
                      "vertical-2",
                      "rect-4",
                      "diamond-4",
                      "mask-area",
                      "mask-points",
                      "mask-point-bbox",
                      "none"
                  ]
              ],
              "sam_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "sam_threshold": [
                  "FLOAT",
                  {
                      "default": 0.93,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sam_bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sam_mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sam_mask_hint_use_negative": [
                  [
                      "False",
                      "Small",
                      "Outter"
                  ]
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "sam_model_opt": [
                  "SAM_MODEL"
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "model",
              "clip",
              "vae",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "bbox_threshold",
              "bbox_dilation",
              "bbox_crop_factor",
              "sam_detection_hint",
              "sam_dilation",
              "sam_threshold",
              "sam_bbox_expansion",
              "sam_mask_hint_threshold",
              "sam_mask_hint_use_negative",
              "drop_size",
              "bbox_detector",
              "wildcard",
              "cycle"
          ],
          "optional": [
              "sam_model_opt",
              "segm_detector_opt",
              "detailer_hook",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "MASK",
          "DETAILER_PIPE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          true,
          true,
          false,
          false,
          true
      ],
      "output_name": [
          "image",
          "cropped_refined",
          "cropped_enhanced_alpha",
          "mask",
          "detailer_pipe",
          "cnet_images"
      ],
      "name": "FaceDetailer",
      "display_name": "FaceDetailer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Simple",
      "output_node": false
  },
  "FaceDetailerPipe": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "bbox_crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 10,
                      "step": 0.1
                  }
              ],
              "sam_detection_hint": [
                  [
                      "center-1",
                      "horizontal-2",
                      "vertical-2",
                      "rect-4",
                      "diamond-4",
                      "mask-area",
                      "mask-points",
                      "mask-point-bbox",
                      "none"
                  ]
              ],
              "sam_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "sam_threshold": [
                  "FLOAT",
                  {
                      "default": 0.93,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sam_bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sam_mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sam_mask_hint_use_negative": [
                  [
                      "False",
                      "Small",
                      "Outter"
                  ]
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "detailer_pipe",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "noise_mask",
              "force_inpaint",
              "bbox_threshold",
              "bbox_dilation",
              "bbox_crop_factor",
              "sam_detection_hint",
              "sam_dilation",
              "sam_threshold",
              "sam_bbox_expansion",
              "sam_mask_hint_threshold",
              "sam_mask_hint_use_negative",
              "drop_size",
              "refiner_ratio",
              "cycle"
          ],
          "optional": [
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "MASK",
          "DETAILER_PIPE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          true,
          true,
          false,
          false,
          true
      ],
      "output_name": [
          "image",
          "cropped_refined",
          "cropped_enhanced_alpha",
          "mask",
          "detailer_pipe",
          "cnet_images"
      ],
      "name": "FaceDetailerPipe",
      "display_name": "FaceDetailer (pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Simple",
      "output_node": false
  },
  "MaskDetailerPipe": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "mask bbox",
                      "label_off": "crop region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "mask_mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "masked only",
                      "label_off": "whole"
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 10,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "bbox_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "contour_fill": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "mask",
              "basic_pipe",
              "guide_size",
              "guide_size_for",
              "max_size",
              "mask_mode",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "crop_factor",
              "drop_size",
              "refiner_ratio",
              "batch_size",
              "cycle"
          ],
          "optional": [
              "refiner_basic_pipe_opt",
              "detailer_hook",
              "inpaint_model",
              "noise_mask_feather",
              "bbox_fill",
              "contour_fill",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE",
          "BASIC_PIPE",
          "BASIC_PIPE"
      ],
      "output_is_list": [
          false,
          true,
          true,
          false,
          false
      ],
      "output_name": [
          "image",
          "cropped_refined",
          "cropped_enhanced_alpha",
          "basic_pipe",
          "refiner_basic_pipe_opt"
      ],
      "name": "MaskDetailerPipe",
      "display_name": "MaskDetailer (pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "ToDetailerPipe": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "sam_model_opt": [
                  "SAM_MODEL"
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "bbox_detector",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "sam_model_opt",
              "segm_detector_opt",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "ToDetailerPipe",
      "display_name": "ToDetailerPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "ToDetailerPipeSDXL": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "refiner_model": [
                  "MODEL"
              ],
              "refiner_clip": [
                  "CLIP"
              ],
              "refiner_positive": [
                  "CONDITIONING"
              ],
              "refiner_negative": [
                  "CONDITIONING"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "sam_model_opt": [
                  "SAM_MODEL"
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "refiner_model",
              "refiner_clip",
              "refiner_positive",
              "refiner_negative",
              "bbox_detector",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "sam_model_opt",
              "segm_detector_opt",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "ToDetailerPipeSDXL",
      "display_name": "ToDetailerPipeSDXL",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "FromDetailerPipe": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "BBOX_DETECTOR",
          "SAM_MODEL",
          "SEGM_DETECTOR",
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "vae",
          "positive",
          "negative",
          "bbox_detector",
          "sam_model_opt",
          "segm_detector_opt",
          "detailer_hook"
      ],
      "name": "FromDetailerPipe",
      "display_name": "FromDetailerPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "FromDetailerPipe_v2": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe"
          ]
      },
      "output": [
          "DETAILER_PIPE",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "BBOX_DETECTOR",
          "SAM_MODEL",
          "SEGM_DETECTOR",
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "detailer_pipe",
          "model",
          "clip",
          "vae",
          "positive",
          "negative",
          "bbox_detector",
          "sam_model_opt",
          "segm_detector_opt",
          "detailer_hook"
      ],
      "name": "FromDetailerPipe_v2",
      "display_name": "FromDetailerPipe_v2",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "FromDetailerPipeSDXL": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe"
          ]
      },
      "output": [
          "DETAILER_PIPE",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "BBOX_DETECTOR",
          "SAM_MODEL",
          "SEGM_DETECTOR",
          "DETAILER_HOOK",
          "MODEL",
          "CLIP",
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "detailer_pipe",
          "model",
          "clip",
          "vae",
          "positive",
          "negative",
          "bbox_detector",
          "sam_model_opt",
          "segm_detector_opt",
          "detailer_hook",
          "refiner_model",
          "refiner_clip",
          "refiner_positive",
          "refiner_negative"
      ],
      "name": "FromDetailerPipeSDXL",
      "display_name": "FromDetailer (SDXL/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "AnyPipeToBasic": {
      "input": {
          "required": {
              "any_pipe": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "any_pipe"
          ]
      },
      "output": [
          "BASIC_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "basic_pipe"
      ],
      "name": "AnyPipeToBasic",
      "display_name": "Any PIPE -> BasicPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "ToBasicPipe": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative"
          ]
      },
      "output": [
          "BASIC_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "basic_pipe"
      ],
      "name": "ToBasicPipe",
      "display_name": "ToBasicPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "FromBasicPipe": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "vae",
          "positive",
          "negative"
      ],
      "name": "FromBasicPipe",
      "display_name": "FromBasicPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "FromBasicPipe_v2": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe"
          ]
      },
      "output": [
          "BASIC_PIPE",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "basic_pipe",
          "model",
          "clip",
          "vae",
          "positive",
          "negative"
      ],
      "name": "FromBasicPipe_v2",
      "display_name": "FromBasicPipe_v2",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "BasicPipeToDetailerPipe": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "sam_model_opt": [
                  "SAM_MODEL"
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "bbox_detector",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "sam_model_opt",
              "segm_detector_opt",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "BasicPipeToDetailerPipe",
      "display_name": "BasicPipe -> DetailerPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "BasicPipeToDetailerPipeSDXL": {
      "input": {
          "required": {
              "base_basic_pipe": [
                  "BASIC_PIPE"
              ],
              "refiner_basic_pipe": [
                  "BASIC_PIPE"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "sam_model_opt": [
                  "SAM_MODEL"
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "base_basic_pipe",
              "refiner_basic_pipe",
              "bbox_detector",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "sam_model_opt",
              "segm_detector_opt",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "BasicPipeToDetailerPipeSDXL",
      "display_name": "BasicPipe -> DetailerPipe (SDXL)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "DetailerPipeToBasicPipe": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe"
          ]
      },
      "output": [
          "BASIC_PIPE",
          "BASIC_PIPE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "base_basic_pipe",
          "refiner_basic_pipe"
      ],
      "name": "DetailerPipeToBasicPipe",
      "display_name": "DetailerPipe -> BasicPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "EditBasicPipe": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ]
          },
          "optional": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe"
          ],
          "optional": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative"
          ]
      },
      "output": [
          "BASIC_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "basic_pipe"
      ],
      "name": "EditBasicPipe",
      "display_name": "Edit BasicPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "EditDetailerPipe": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "sam_model": [
                  "SAM_MODEL"
              ],
              "segm_detector": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "bbox_detector",
              "sam_model",
              "segm_detector",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "EditDetailerPipe",
      "display_name": "Edit DetailerPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "EditDetailerPipeSDXL": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ],
              "wildcard": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          },
          "optional": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "refiner_model": [
                  "MODEL"
              ],
              "refiner_clip": [
                  "CLIP"
              ],
              "refiner_positive": [
                  "CONDITIONING"
              ],
              "refiner_negative": [
                  "CONDITIONING"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "sam_model": [
                  "SAM_MODEL"
              ],
              "segm_detector": [
                  "SEGM_DETECTOR"
              ],
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe",
              "wildcard",
              "Select to add LoRA",
              "Select to add Wildcard"
          ],
          "optional": [
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "refiner_model",
              "refiner_clip",
              "refiner_positive",
              "refiner_negative",
              "bbox_detector",
              "sam_model",
              "segm_detector",
              "detailer_hook"
          ]
      },
      "output": [
          "DETAILER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "detailer_pipe"
      ],
      "name": "EditDetailerPipeSDXL",
      "display_name": "Edit DetailerPipe (SDXL)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Pipe",
      "output_node": false
  },
  "LatentPixelScale": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 0.1,
                      "max": 10000,
                      "step": 0.1
                  }
              ],
              "vae": [
                  "VAE"
              ],
              "use_tiled_vae": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "scale_method",
              "scale_factor",
              "vae",
              "use_tiled_vae"
          ],
          "optional": [
              "upscale_model_opt"
          ]
      },
      "output": [
          "LATENT",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "IMAGE"
      ],
      "name": "LatentPixelScale",
      "display_name": "Latent Scale (on Pixel Space)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "PixelKSampleUpscalerProvider": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "model": [
                  "MODEL"
              ],
              "vae": [
                  "VAE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "use_tiled_vae": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_opt": [
                  "PK_HOOK"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "model",
              "vae",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "use_tiled_vae",
              "tile_size"
          ],
          "optional": [
              "upscale_model_opt",
              "pk_hook_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "PixelKSampleUpscalerProvider",
      "display_name": "PixelKSampleUpscalerProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "PixelKSampleUpscalerProviderPipe": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "use_tiled_vae": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_opt": [
                  "PK_HOOK"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ],
              "tile_cnet_opt": [
                  "CONTROL_NET"
              ],
              "tile_cnet_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "use_tiled_vae",
              "basic_pipe",
              "tile_size"
          ],
          "optional": [
              "upscale_model_opt",
              "pk_hook_opt",
              "scheduler_func_opt",
              "tile_cnet_opt",
              "tile_cnet_strength"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "PixelKSampleUpscalerProviderPipe",
      "display_name": "PixelKSampleUpscalerProviderPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "IterativeLatentUpscale": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 1,
                      "max": 10000,
                      "step": 0.1
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "temp_prefix": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "upscaler": [
                  "UPSCALER"
              ],
              "step_mode": [
                  [
                      "simple",
                      "geometric"
                  ],
                  {
                      "default": "simple"
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "samples",
              "upscale_factor",
              "steps",
              "temp_prefix",
              "upscaler",
              "step_mode"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "latent",
          "vae"
      ],
      "name": "IterativeLatentUpscale",
      "display_name": "Iterative Upscale (Latent/on Pixel Space)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "IterativeImageUpscale": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 1,
                      "max": 10000,
                      "step": 0.1
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 10000,
                      "step": 1
                  }
              ],
              "temp_prefix": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "upscaler": [
                  "UPSCALER"
              ],
              "vae": [
                  "VAE"
              ],
              "step_mode": [
                  [
                      "simple",
                      "geometric"
                  ],
                  {
                      "default": "simple"
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "upscale_factor",
              "steps",
              "temp_prefix",
              "upscaler",
              "vae",
              "step_mode"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "IterativeImageUpscale",
      "display_name": "Iterative Upscale (Image)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "PixelTiledKSampleUpscalerProvider": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "model": [
                  "MODEL"
              ],
              "vae": [
                  "VAE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "tile_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "tile_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "tiling_strategy": [
                  [
                      "random",
                      "padded",
                      "simple"
                  ]
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_opt": [
                  "PK_HOOK"
              ],
              "tile_cnet_opt": [
                  "CONTROL_NET"
              ],
              "tile_cnet_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "model",
              "vae",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "tile_width",
              "tile_height",
              "tiling_strategy"
          ],
          "optional": [
              "upscale_model_opt",
              "pk_hook_opt",
              "tile_cnet_opt",
              "tile_cnet_strength"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "PixelTiledKSampleUpscalerProvider",
      "display_name": "PixelTiledKSampleUpscalerProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "PixelTiledKSampleUpscalerProviderPipe": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "tile_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "tile_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "tiling_strategy": [
                  [
                      "random",
                      "padded",
                      "simple"
                  ]
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_opt": [
                  "PK_HOOK"
              ],
              "tile_cnet_opt": [
                  "CONTROL_NET"
              ],
              "tile_cnet_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "tile_width",
              "tile_height",
              "tiling_strategy",
              "basic_pipe"
          ],
          "optional": [
              "upscale_model_opt",
              "pk_hook_opt",
              "tile_cnet_opt",
              "tile_cnet_strength"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "PixelTiledKSampleUpscalerProviderPipe",
      "display_name": "PixelTiledKSampleUpscalerProviderPipe",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "TwoSamplersForMaskUpscalerProvider": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "full_sample_schedule": [
                  [
                      "none",
                      "interleave1",
                      "interleave2",
                      "interleave3",
                      "last1",
                      "last2",
                      "interleave1+last1",
                      "interleave2+last1",
                      "interleave3+last1"
                  ]
              ],
              "use_tiled_vae": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER"
              ],
              "mask_sampler": [
                  "KSAMPLER"
              ],
              "mask": [
                  "MASK"
              ],
              "vae": [
                  "VAE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "full_sampler_opt": [
                  "KSAMPLER"
              ],
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_base_opt": [
                  "PK_HOOK"
              ],
              "pk_hook_mask_opt": [
                  "PK_HOOK"
              ],
              "pk_hook_full_opt": [
                  "PK_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "full_sample_schedule",
              "use_tiled_vae",
              "base_sampler",
              "mask_sampler",
              "mask",
              "vae",
              "tile_size"
          ],
          "optional": [
              "full_sampler_opt",
              "upscale_model_opt",
              "pk_hook_base_opt",
              "pk_hook_mask_opt",
              "pk_hook_full_opt"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "TwoSamplersForMaskUpscalerProvider",
      "display_name": "TwoSamplersForMask Upscaler Provider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "TwoSamplersForMaskUpscalerProviderPipe": {
      "input": {
          "required": {
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "lanczos",
                      "area"
                  ]
              ],
              "full_sample_schedule": [
                  [
                      "none",
                      "interleave1",
                      "interleave2",
                      "interleave3",
                      "last1",
                      "last2",
                      "interleave1+last1",
                      "interleave2+last1",
                      "interleave3+last1"
                  ]
              ],
              "use_tiled_vae": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER"
              ],
              "mask_sampler": [
                  "KSAMPLER"
              ],
              "mask": [
                  "MASK"
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          },
          "optional": {
              "full_sampler_opt": [
                  "KSAMPLER"
              ],
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "pk_hook_base_opt": [
                  "PK_HOOK"
              ],
              "pk_hook_mask_opt": [
                  "PK_HOOK"
              ],
              "pk_hook_full_opt": [
                  "PK_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_method",
              "full_sample_schedule",
              "use_tiled_vae",
              "base_sampler",
              "mask_sampler",
              "mask",
              "basic_pipe",
              "tile_size"
          ],
          "optional": [
              "full_sampler_opt",
              "upscale_model_opt",
              "pk_hook_base_opt",
              "pk_hook_mask_opt",
              "pk_hook_full_opt"
          ]
      },
      "output": [
          "UPSCALER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "UPSCALER"
      ],
      "name": "TwoSamplersForMaskUpscalerProviderPipe",
      "display_name": "TwoSamplersForMask Upscaler Provider (pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "PixelKSampleHookCombine": {
      "input": {
          "required": {
              "hook1": [
                  "PK_HOOK"
              ],
              "hook2": [
                  "PK_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "hook1",
              "hook2"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "PixelKSampleHookCombine",
      "display_name": "PixelKSampleHookCombine",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "DenoiseScheduleHookProvider": {
      "input": {
          "required": {
              "schedule_for_iteration": [
                  [
                      "simple"
                  ]
              ],
              "target_denoise": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_iteration",
              "target_denoise"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "DenoiseScheduleHookProvider",
      "display_name": "DenoiseScheduleHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "StepsScheduleHookProvider": {
      "input": {
          "required": {
              "schedule_for_iteration": [
                  [
                      "simple"
                  ]
              ],
              "target_steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_iteration",
              "target_steps"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "StepsScheduleHookProvider",
      "display_name": "StepsScheduleHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "CfgScheduleHookProvider": {
      "input": {
          "required": {
              "schedule_for_iteration": [
                  [
                      "simple"
                  ]
              ],
              "target_cfg": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_iteration",
              "target_cfg"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "CfgScheduleHookProvider",
      "display_name": "CfgScheduleHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "NoiseInjectionHookProvider": {
      "input": {
          "required": {
              "schedule_for_iteration": [
                  [
                      "simple"
                  ]
              ],
              "source": [
                  [
                      "CPU",
                      "GPU"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "start_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 200.0,
                      "step": 0.01
                  }
              ],
              "end_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 200.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_iteration",
              "source",
              "seed",
              "start_strength",
              "end_strength"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "NoiseInjectionHookProvider",
      "display_name": "NoiseInjectionHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "UnsamplerHookProvider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "steps": [
                  "INT",
                  {
                      "default": 25,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "start_end_at_step": [
                  "INT",
                  {
                      "default": 21,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_end_at_step": [
                  "INT",
                  {
                      "default": 24,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "normalize": [
                  [
                      "disable",
                      "enable"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "schedule_for_iteration": [
                  [
                      "simple"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "steps",
              "start_end_at_step",
              "end_end_at_step",
              "cfg",
              "sampler_name",
              "scheduler",
              "normalize",
              "positive",
              "negative",
              "schedule_for_iteration"
          ]
      },
      "output": [
          "PK_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PK_HOOK"
      ],
      "name": "UnsamplerHookProvider",
      "display_name": "UnsamplerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "CoreMLDetailerHookProvider": {
      "input": {
          "required": {
              "mode": [
                  [
                      "512x512",
                      "768x768",
                      "512x768",
                      "768x512"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mode"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "CoreMLDetailerHookProvider",
      "display_name": "CoreMLDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "PreviewDetailerHookProvider": {
      "input": {
          "required": {
              "quality": [
                  "INT",
                  {
                      "default": 95,
                      "min": 20,
                      "max": 100
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "quality"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "DETAILER_HOOK",
          "UPSCALER_HOOK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "DETAILER_HOOK",
          "UPSCALER_HOOK"
      ],
      "name": "PreviewDetailerHookProvider",
      "display_name": "PreviewDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "DetailerHookCombine": {
      "input": {
          "required": {
              "hook1": [
                  "DETAILER_HOOK"
              ],
              "hook2": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "hook1",
              "hook2"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "DetailerHookCombine",
      "display_name": "DetailerHookCombine",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "NoiseInjectionDetailerHookProvider": {
      "input": {
          "required": {
              "schedule_for_cycle": [
                  [
                      "skip_start",
                      "from_start"
                  ]
              ],
              "source": [
                  [
                      "CPU",
                      "GPU"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "start_strength": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 0.0,
                      "max": 200.0,
                      "step": 0.01
                  }
              ],
              "end_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 200.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_cycle",
              "source",
              "seed",
              "start_strength",
              "end_strength"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "NoiseInjectionDetailerHookProvider",
      "display_name": "NoiseInjectionDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "UnsamplerDetailerHookProvider": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "steps": [
                  "INT",
                  {
                      "default": 25,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "start_end_at_step": [
                  "INT",
                  {
                      "default": 21,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_end_at_step": [
                  "INT",
                  {
                      "default": 24,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "normalize": [
                  [
                      "disable",
                      "enable"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "schedule_for_cycle": [
                  [
                      "skip_start",
                      "from_start"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "steps",
              "start_end_at_step",
              "end_end_at_step",
              "cfg",
              "sampler_name",
              "scheduler",
              "normalize",
              "positive",
              "negative",
              "schedule_for_cycle"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "UnsamplerDetailerHookProvider",
      "display_name": "UnsamplerDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "DenoiseSchedulerDetailerHookProvider": {
      "input": {
          "required": {
              "schedule_for_cycle": [
                  [
                      "simple"
                  ]
              ],
              "target_denoise": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_for_cycle",
              "target_denoise"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "DenoiseSchedulerDetailerHookProvider",
      "display_name": "DenoiseSchedulerDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "SEGSOrderedFilterDetailerHookProvider": {
      "input": {
          "required": {
              "target": [
                  [
                      "area(=w*h)",
                      "width",
                      "height",
                      "x1",
                      "y1",
                      "x2",
                      "y2"
                  ]
              ],
              "order": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "descending",
                      "label_off": "ascending"
                  }
              ],
              "take_start": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "take_count": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "target",
              "order",
              "take_start",
              "take_count"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "SEGSOrderedFilterDetailerHookProvider",
      "display_name": "SEGSOrderedFilterDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "SEGSRangeFilterDetailerHookProvider": {
      "input": {
          "required": {
              "target": [
                  [
                      "area(=w*h)",
                      "width",
                      "height",
                      "x1",
                      "y1",
                      "x2",
                      "y2",
                      "length_percent"
                  ]
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "inside",
                      "label_off": "outside"
                  }
              ],
              "min_value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "max_value": [
                  "INT",
                  {
                      "default": 67108864,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "target",
              "mode",
              "min_value",
              "max_value"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "SEGSRangeFilterDetailerHookProvider",
      "display_name": "SEGSRangeFilterDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "SEGSLabelFilterDetailerHookProvider": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "preset": [
                  [
                      "all",
                      "hand",
                      "face",
                      "mouth",
                      "eyes",
                      "eyebrows",
                      "pupils",
                      "left_eyebrow",
                      "left_eye",
                      "left_pupil",
                      "right_eyebrow",
                      "right_eye",
                      "right_pupil",
                      "short_sleeved_shirt",
                      "long_sleeved_shirt",
                      "short_sleeved_outwear",
                      "long_sleeved_outwear",
                      "vest",
                      "sling",
                      "shorts",
                      "trousers",
                      "skirt",
                      "short_sleeved_dress",
                      "long_sleeved_dress",
                      "vest_dress",
                      "sling_dress",
                      "person",
                      "bicycle",
                      "car",
                      "motorcycle",
                      "airplane",
                      "bus",
                      "train",
                      "truck",
                      "boat",
                      "traffic light",
                      "fire hydrant",
                      "stop sign",
                      "parking meter",
                      "bench",
                      "bird",
                      "cat",
                      "dog",
                      "horse",
                      "sheep",
                      "cow",
                      "elephant",
                      "bear",
                      "zebra",
                      "giraffe",
                      "backpack",
                      "umbrella",
                      "handbag",
                      "tie",
                      "suitcase",
                      "frisbee",
                      "skis",
                      "snowboard",
                      "sports ball",
                      "kite",
                      "baseball bat",
                      "baseball glove",
                      "skateboard",
                      "surfboard",
                      "tennis racket",
                      "bottle",
                      "wine glass",
                      "cup",
                      "fork",
                      "knife",
                      "spoon",
                      "bowl",
                      "banana",
                      "apple",
                      "sandwich",
                      "orange",
                      "broccoli",
                      "carrot",
                      "hot dog",
                      "pizza",
                      "donut",
                      "cake",
                      "chair",
                      "couch",
                      "potted plant",
                      "bed",
                      "dining table",
                      "toilet",
                      "tv",
                      "laptop",
                      "mouse",
                      "remote",
                      "keyboard",
                      "cell phone",
                      "microwave",
                      "oven",
                      "toaster",
                      "sink",
                      "refrigerator",
                      "book",
                      "clock",
                      "vase",
                      "scissors",
                      "teddy bear",
                      "hair drier",
                      "toothbrush"
                  ]
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "List the types of segments to be allowed, separated by commas"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "preset",
              "labels"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "SEGSLabelFilterDetailerHookProvider",
      "display_name": "SEGSLabelFilterDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "VariationNoiseDetailerHookProvider": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "strength"
          ]
      },
      "output": [
          "DETAILER_HOOK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "DETAILER_HOOK"
      ],
      "name": "VariationNoiseDetailerHookProvider",
      "display_name": "VariationNoiseDetailerHookProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "BitwiseAndMask": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ],
              "mask2": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1",
              "mask2"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "BitwiseAndMask",
      "display_name": "Pixelwise(MASK & MASK)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "SubtractMask": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ],
              "mask2": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1",
              "mask2"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SubtractMask",
      "display_name": "Pixelwise(MASK - MASK)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "AddMask": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ],
              "mask2": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1",
              "mask2"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "AddMask",
      "display_name": "Pixelwise(MASK + MASK)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "ImpactSegsAndMask": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "mask"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSegsAndMask",
      "display_name": "Pixelwise(SEGS & MASK)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "ImpactSegsAndMaskForEach": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "masks"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSegsAndMaskForEach",
      "display_name": "Pixelwise(SEGS & MASKS ForEach)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "EmptySegs": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "EmptySegs",
      "display_name": "EmptySegs",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactFlattenMask": {
      "input": {
          "required": {
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "masks"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactFlattenMask",
      "display_name": "Flatten Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "MediaPipeFaceMeshToSEGS": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "bbox_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "crop_min_size": [
                  "INT",
                  {
                      "min": 10,
                      "max": 16384,
                      "step": 1,
                      "default": 50
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 1
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "face": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "mouth": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "left_eyebrow": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "left_eye": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "left_pupil": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "right_eyebrow": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "right_eye": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ],
              "right_pupil": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Enabled",
                      "label_off": "Disabled"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "crop_factor",
              "bbox_fill",
              "crop_min_size",
              "drop_size",
              "dilation",
              "face",
              "mouth",
              "left_eyebrow",
              "left_eye",
              "left_pupil",
              "right_eyebrow",
              "right_eye",
              "right_pupil"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "MediaPipeFaceMeshToSEGS",
      "display_name": "MediaPipe FaceMesh to SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "MaskToSEGS": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "combined": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "bbox_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "contour_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "combined",
              "crop_factor",
              "bbox_fill",
              "drop_size",
              "contour_fill"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "MaskToSEGS",
      "display_name": "MASK to SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "MaskToSEGS_for_AnimateDiff": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "combined": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "bbox_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "contour_fill": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "combined",
              "crop_factor",
              "bbox_fill",
              "drop_size",
              "contour_fill"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "MaskToSEGS_for_AnimateDiff",
      "display_name": "MASK to SEGS for AnimateDiff",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "ToBinaryMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "threshold": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 255
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "threshold"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ToBinaryMask",
      "display_name": "ToBinaryMask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "MasksToMaskList": {
      "input": {
          "required": {
              "masks": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "masks"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MasksToMaskList",
      "display_name": "Mask Batch to Mask List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "MaskListToMaskBatch": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "MaskListToMaskBatch",
      "display_name": "Mask List to Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "ImageListToImageBatch": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "images"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageListToImageBatch",
      "display_name": "Image List to Image Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "SetDefaultImageForSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "image": [
                  "IMAGE"
              ],
              "override": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "image",
              "override"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "SetDefaultImageForSEGS",
      "display_name": "Set Default Image for SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "RemoveImageFromSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "RemoveImageFromSEGS",
      "display_name": "Remove Image from SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "BboxDetectorSEGS": {
      "input": {
          "required": {
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "all",
                      "placeholder": "List the types of segments to be allowed, separated by commas"
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox_detector",
              "image",
              "threshold",
              "dilation",
              "crop_factor",
              "drop_size",
              "labels"
          ],
          "optional": [
              "detailer_hook"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "BboxDetectorSEGS",
      "display_name": "BBOX Detector (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "SegmDetectorSEGS": {
      "input": {
          "required": {
              "segm_detector": [
                  "SEGM_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "all",
                      "placeholder": "List the types of segments to be allowed, separated by commas"
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "segm_detector",
              "image",
              "threshold",
              "dilation",
              "crop_factor",
              "drop_size",
              "labels"
          ],
          "optional": [
              "detailer_hook"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "SegmDetectorSEGS",
      "display_name": "SEGM Detector (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "ONNXDetectorSEGS": {
      "input": {
          "required": {
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "all",
                      "placeholder": "List the types of segments to be allowed, separated by commas"
                  }
              ]
          },
          "optional": {
              "detailer_hook": [
                  "DETAILER_HOOK"
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox_detector",
              "image",
              "threshold",
              "dilation",
              "crop_factor",
              "drop_size",
              "labels"
          ],
          "optional": [
              "detailer_hook"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ONNXDetectorSEGS",
      "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "ImpactSimpleDetectorSEGS_for_AD": {
      "input": {
          "required": {
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "image_frames": [
                  "IMAGE"
              ],
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -255,
                      "max": 255,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "sub_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sub_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -255,
                      "max": 255,
                      "step": 1
                  }
              ],
              "sub_bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sam_mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "masking_mode": [
                  [
                      "Pivot SEGS",
                      "Combine neighboring frames",
                      "Don't combine"
                  ]
              ],
              "segs_pivot": [
                  [
                      "Combined mask",
                      "1st frame mask"
                  ]
              ],
              "sam_model_opt": [
                  "SAM_MODEL",
                  {
                      "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
                  }
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox_detector",
              "image_frames",
              "bbox_threshold",
              "bbox_dilation",
              "crop_factor",
              "drop_size",
              "sub_threshold",
              "sub_dilation",
              "sub_bbox_expansion",
              "sam_mask_hint_threshold"
          ],
          "optional": [
              "masking_mode",
              "segs_pivot",
              "sam_model_opt",
              "segm_detector_opt"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSimpleDetectorSEGS_for_AD",
      "display_name": "Simple Detector for AnimateDiff (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "ImpactSimpleDetectorSEGS": {
      "input": {
          "required": {
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "sub_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sub_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "sub_bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sam_mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "post_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "sam_model_opt": [
                  "SAM_MODEL",
                  {
                      "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
                  }
              ],
              "segm_detector_opt": [
                  "SEGM_DETECTOR"
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox_detector",
              "image",
              "bbox_threshold",
              "bbox_dilation",
              "crop_factor",
              "drop_size",
              "sub_threshold",
              "sub_dilation",
              "sub_bbox_expansion",
              "sam_mask_hint_threshold"
          ],
          "optional": [
              "post_dilation",
              "sam_model_opt",
              "segm_detector_opt"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSimpleDetectorSEGS",
      "display_name": "Simple Detector (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "ImpactSimpleDetectorSEGSPipe": {
      "input": {
          "required": {
              "detailer_pipe": [
                  "DETAILER_PIPE"
              ],
              "image": [
                  "IMAGE"
              ],
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "min": 1,
                      "max": 16384,
                      "step": 1,
                      "default": 10
                  }
              ],
              "sub_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "sub_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "sub_bbox_expansion": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "sam_mask_hint_threshold": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "post_dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "detailer_pipe",
              "image",
              "bbox_threshold",
              "bbox_dilation",
              "crop_factor",
              "drop_size",
              "sub_threshold",
              "sub_dilation",
              "sub_bbox_expansion",
              "sam_mask_hint_threshold"
          ],
          "optional": [
              "post_dilation"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSimpleDetectorSEGSPipe",
      "display_name": "Simple Detector (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "ImpactControlNetApplySEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "segs_preprocessor": [
                  "SEGS_PREPROCESSOR"
              ],
              "control_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "control_net",
              "strength"
          ],
          "optional": [
              "segs_preprocessor",
              "control_image"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactControlNetApplySEGS",
      "display_name": "ControlNetApply (SEGS) - DEPRECATED",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "deprecated": true
  },
  "ImpactControlNetApplyAdvancedSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "segs_preprocessor": [
                  "SEGS_PREPROCESSOR"
              ],
              "control_image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "control_net",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "segs_preprocessor",
              "control_image",
              "vae"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactControlNetApplyAdvancedSEGS",
      "display_name": "ControlNetApply (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactControlNetClearSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactControlNetClearSEGS",
      "display_name": "ImpactControlNetClearSEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactIPAdapterApplySEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "ipadapter_pipe": [
                  "IPADAPTER_PIPE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "noise": [
                  "FLOAT",
                  {
                      "default": 0.4,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "weight_type": [
                  [
                      "original",
                      "linear",
                      "channel penalty"
                  ],
                  {
                      "default": "channel penalty"
                  }
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 0.9,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "unfold_batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "faceid_v2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "weight_v2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "context_crop_factor": [
                  "FLOAT",
                  {
                      "default": 1.2,
                      "min": 1.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "reference_image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "neg_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "ipadapter_pipe",
              "weight",
              "noise",
              "weight_type",
              "start_at",
              "end_at",
              "unfold_batch",
              "faceid_v2",
              "weight_v2",
              "context_crop_factor",
              "reference_image"
          ],
          "optional": [
              "combine_embeds",
              "neg_image"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactIPAdapterApplySEGS",
      "display_name": "IPAdapterApply (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactDecomposeSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "SEGS_HEADER",
          "SEG_ELT"
      ],
      "output_is_list": [
          false,
          true
      ],
      "output_name": [
          "SEGS_HEADER",
          "SEG_ELT"
      ],
      "name": "ImpactDecomposeSEGS",
      "display_name": "Decompose (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactAssembleSEGS": {
      "input": {
          "required": {
              "seg_header": [
                  "SEGS_HEADER"
              ],
              "seg_elt": [
                  "SEG_ELT"
              ]
          }
      },
      "input_order": {
          "required": [
              "seg_header",
              "seg_elt"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactAssembleSEGS",
      "display_name": "Assemble (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactFrom_SEG_ELT": {
      "input": {
          "required": {
              "seg_elt": [
                  "SEG_ELT"
              ]
          }
      },
      "input_order": {
          "required": [
              "seg_elt"
          ]
      },
      "output": [
          "SEG_ELT",
          "IMAGE",
          "MASK",
          "SEG_ELT_crop_region",
          "SEG_ELT_bbox",
          "SEG_ELT_control_net_wrapper",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "seg_elt",
          "cropped_image",
          "cropped_mask",
          "crop_region",
          "bbox",
          "control_net_wrapper",
          "confidence",
          "label"
      ],
      "name": "ImpactFrom_SEG_ELT",
      "display_name": "From SEG_ELT",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactEdit_SEG_ELT": {
      "input": {
          "required": {
              "seg_elt": [
                  "SEG_ELT"
              ]
          },
          "optional": {
              "cropped_image_opt": [
                  "IMAGE"
              ],
              "cropped_mask_opt": [
                  "MASK"
              ],
              "crop_region_opt": [
                  "SEG_ELT_crop_region"
              ],
              "bbox_opt": [
                  "SEG_ELT_bbox"
              ],
              "control_net_wrapper_opt": [
                  "SEG_ELT_control_net_wrapper"
              ],
              "confidence_opt": [
                  "FLOAT",
                  {
                      "min": 0,
                      "max": 1.0,
                      "step": 0.1,
                      "forceInput": true
                  }
              ],
              "label_opt": [
                  "STRING",
                  {
                      "multiline": false,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seg_elt"
          ],
          "optional": [
              "cropped_image_opt",
              "cropped_mask_opt",
              "crop_region_opt",
              "bbox_opt",
              "control_net_wrapper_opt",
              "confidence_opt",
              "label_opt"
          ]
      },
      "output": [
          "SEG_ELT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEG_ELT"
      ],
      "name": "ImpactEdit_SEG_ELT",
      "display_name": "Edit SEG_ELT",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactDilate_Mask_SEG_ELT": {
      "input": {
          "required": {
              "seg_elt": [
                  "SEG_ELT"
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seg_elt",
              "dilation"
          ]
      },
      "output": [
          "SEG_ELT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEG_ELT"
      ],
      "name": "ImpactDilate_Mask_SEG_ELT",
      "display_name": "Dilate Mask (SEG_ELT)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactDilateMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "dilation"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactDilateMask",
      "display_name": "Dilate Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactGaussianBlurMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "kernel_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "sigma": [
                  "FLOAT",
                  {
                      "default": 10.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "kernel_size",
              "sigma"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactGaussianBlurMask",
      "display_name": "Gaussian Blur Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactDilateMaskInSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "dilation"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactDilateMaskInSEGS",
      "display_name": "Dilate Mask (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactGaussianBlurMaskInSEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "kernel_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "sigma": [
                  "FLOAT",
                  {
                      "default": 10.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "kernel_size",
              "sigma"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactGaussianBlurMaskInSEGS",
      "display_name": "Gaussian Blur Mask (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactScaleBy_BBOX_SEG_ELT": {
      "input": {
          "required": {
              "seg": [
                  "SEG_ELT"
              ],
              "scale_by": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 8.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seg",
              "scale_by"
          ]
      },
      "output": [
          "SEG_ELT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEG_ELT"
      ],
      "name": "ImpactScaleBy_BBOX_SEG_ELT",
      "display_name": "ScaleBy BBOX (SEG_ELT)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactFrom_SEG_ELT_bbox": {
      "input": {
          "required": {
              "bbox": [
                  "SEG_ELT_bbox"
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "left",
          "top",
          "right",
          "bottom"
      ],
      "name": "ImpactFrom_SEG_ELT_bbox",
      "display_name": "From SEG_ELT bbox",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactFrom_SEG_ELT_crop_region": {
      "input": {
          "required": {
              "crop_region": [
                  "SEG_ELT_crop_region"
              ]
          }
      },
      "input_order": {
          "required": [
              "crop_region"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "left",
          "top",
          "right",
          "bottom"
      ],
      "name": "ImpactFrom_SEG_ELT_crop_region",
      "display_name": "From SEG_ELT crop_region",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactCount_Elts_in_SEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "ImpactCount_Elts_in_SEGS",
      "display_name": "Count Elts in SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "BboxDetectorCombined_v2": {
      "input": {
          "required": {
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 4,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "bbox_detector",
              "image",
              "threshold",
              "dilation"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "BboxDetectorCombined_v2",
      "display_name": "BBOX Detector (combined)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "SegmDetectorCombined_v2": {
      "input": {
          "required": {
              "segm_detector": [
                  "SEGM_DETECTOR"
              ],
              "image": [
                  "IMAGE"
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segm_detector",
              "image",
              "threshold",
              "dilation"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SegmDetectorCombined_v2",
      "display_name": "SEGM Detector (combined)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detector",
      "output_node": false
  },
  "SegsToCombinedMask": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SegsToCombinedMask",
      "display_name": "SEGS to MASK (combined)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Operation",
      "output_node": false
  },
  "KSamplerProvider": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "tooltip": "classifier free guidance value"
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "tooltip": "sampler"
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ],
                  {
                      "tooltip": "noise schedule"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE",
                  {
                      "tooltip": "basic_pipe input for sampling"
                  }
              ]
          },
          "optional": {
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC",
                  {
                      "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "basic_pipe"
          ],
          "optional": [
              "scheduler_func_opt"
          ]
      },
      "output": [
          "KSAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "KSAMPLER"
      ],
      "name": "KSamplerProvider",
      "display_name": "KSamplerProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Sampler",
      "output_node": false,
      "output_tooltips": [
          "sampler wrapper. (Can be used when generating a regional_prompt.)"
      ]
  },
  "TwoSamplersForMask": {
      "input": {
          "required": {
              "latent_image": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER",
                  {
                      "tooltip": "Sampler to apply to the region outside the mask."
                  }
              ],
              "mask_sampler": [
                  "KSAMPLER",
                  {
                      "tooltip": "Sampler to apply to the masked region."
                  }
              ],
              "mask": [
                  "MASK",
                  {
                      "tooltip": "region mask"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latent_image",
              "base_sampler",
              "mask_sampler",
              "mask"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "TwoSamplersForMask",
      "display_name": "TwoSamplersForMask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Sampler",
      "output_node": false,
      "output_tooltips": [
          "result latent"
      ]
  },
  "TiledKSamplerProvider": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "tooltip": "classifier free guidance value"
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "tooltip": "sampler"
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ],
                  {
                      "tooltip": "noise schedule"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
                  }
              ],
              "tile_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64,
                      "tooltip": "Sets the width of the tile to be used in TiledKSampler."
                  }
              ],
              "tile_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 16384,
                      "step": 64,
                      "tooltip": "Sets the height of the tile to be used in TiledKSampler."
                  }
              ],
              "tiling_strategy": [
                  [
                      "random",
                      "padded",
                      "simple"
                  ],
                  {
                      "tooltip": "Sets the tiling strategy for TiledKSampler."
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE",
                  {
                      "tooltip": "basic_pipe input for sampling"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "tile_width",
              "tile_height",
              "tiling_strategy",
              "basic_pipe"
          ]
      },
      "output": [
          "KSAMPLER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "KSAMPLER"
      ],
      "name": "TiledKSamplerProvider",
      "display_name": "TiledKSamplerProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Sampler",
      "output_node": false,
      "output_tooltips": [
          "sampler wrapper. (Can be used when generating a regional_prompt.)"
      ]
  },
  "KSamplerAdvancedProvider": {
      "input": {
          "required": {
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "toolip": "classifier free guidance value"
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "toolip": "sampler"
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ],
                  {
                      "toolip": "noise schedule"
                  }
              ],
              "sigma_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01,
                      "toolip": "Multiplier of noise schedule"
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE",
                  {
                      "toolip": "basic_pipe input for sampling"
                  }
              ]
          },
          "optional": {
              "sampler_opt": [
                  "SAMPLER",
                  {
                      "toolip": "[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC",
                  {
                      "toolip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cfg",
              "sampler_name",
              "scheduler",
              "sigma_factor",
              "basic_pipe"
          ],
          "optional": [
              "sampler_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "KSAMPLER_ADVANCED"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "KSAMPLER_ADVANCED"
      ],
      "name": "KSamplerAdvancedProvider",
      "display_name": "KSamplerAdvancedProvider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Sampler",
      "output_node": false,
      "output_tooltips": [
          "sampler wrapper. (Can be used when generating a regional_prompt.)"
      ]
  },
  "TwoAdvancedSamplersForMask": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
                  }
              ],
              "samples": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER_ADVANCED",
                  {
                      "tooltip": "Sampler to apply to the region outside the mask."
                  }
              ],
              "mask_sampler": [
                  "KSAMPLER_ADVANCED",
                  {
                      "tooltip": "Sampler to apply to the masked region."
                  }
              ],
              "mask": [
                  "MASK",
                  {
                      "tooltip": "region mask"
                  }
              ],
              "overlap_factor": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "steps",
              "denoise",
              "samples",
              "base_sampler",
              "mask_sampler",
              "mask",
              "overlap_factor"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "TwoAdvancedSamplersForMask",
      "display_name": "TwoAdvancedSamplersForMask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Sampler",
      "output_node": false,
      "output_tooltips": [
          "result latent"
      ]
  },
  "ImpactNegativeConditioningPlaceholder": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ImpactNegativeConditioningPlaceholder",
      "display_name": "Negative Cond Placeholder",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/sampling",
      "output_node": false,
      "output_tooltips": [
          "This is a Placeholder for the FLUX model that does not use Negative Conditioning."
      ]
  },
  "PreviewBridge": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "image": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          },
          "optional": {
              "block": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "if_empty_mask",
                      "label_off": "never",
                      "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."
                  }
              ],
              "restore_mask": [
                  [
                      "never",
                      "always",
                      "if_same_size"
                  ],
                  {
                      "tooltip": "if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "image"
          ],
          "optional": [
              "block",
              "restore_mask"
          ],
          "hidden": [
              "unique_id",
              "extra_pnginfo"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "PreviewBridge",
      "display_name": "Preview Bridge (Image)",
      "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "PreviewBridgeLatent": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "image": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "preview_method": [
                  [
                      "Latent2RGB-FLUX.1",
                      "Latent2RGB-SDXL",
                      "Latent2RGB-SD15",
                      "Latent2RGB-SD3",
                      "Latent2RGB-SD-X4",
                      "Latent2RGB-Playground-2.5",
                      "Latent2RGB-SC-Prior",
                      "Latent2RGB-SC-B",
                      "Latent2RGB-LTXV",
                      "TAEF1",
                      "TAESDXL",
                      "TAESD15",
                      "TAESD3"
                  ]
              ]
          },
          "optional": {
              "vae_opt": [
                  "VAE"
              ],
              "block": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "if_empty_mask",
                      "label_off": "never",
                      "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."
                  }
              ],
              "restore_mask": [
                  [
                      "never",
                      "always",
                      "if_same_size"
                  ],
                  {
                      "tooltip": "if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "latent",
              "image",
              "preview_method"
          ],
          "optional": [
              "vae_opt",
              "block",
              "restore_mask"
          ],
          "hidden": [
              "unique_id",
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "LATENT",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "MASK"
      ],
      "name": "PreviewBridgeLatent",
      "display_name": "Preview Bridge (Latent)",
      "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "ImageSender": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ImgSender"
                  }
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "filename_prefix",
              "link_id"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImageSender",
      "display_name": "Image Sender",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "ImageReceiver": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png"
                  ]
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "save_to_workflow": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "image_data": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "trigger_always": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "link_id",
              "save_to_workflow",
              "image_data",
              "trigger_always"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImageReceiver",
      "display_name": "Image Receiver",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "LatentSender": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "latents/LatentSender"
                  }
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "preview_method": [
                  [
                      "Latent2RGB-FLUX.1",
                      "Latent2RGB-SDXL",
                      "Latent2RGB-SD15",
                      "Latent2RGB-SD3",
                      "Latent2RGB-SD-X4",
                      "Latent2RGB-Playground-2.5",
                      "Latent2RGB-SC-Prior",
                      "Latent2RGB-SC-B",
                      "Latent2RGB-LTXV",
                      "TAEF1",
                      "TAESDXL",
                      "TAESD15",
                      "TAESD3"
                  ]
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "samples",
              "filename_prefix",
              "link_id",
              "preview_method"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "LatentSender",
      "display_name": "LatentSender",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "LatentReceiver": {
      "input": {
          "required": {
              "latent": [
                  []
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "trigger_always": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "link_id",
              "trigger_always"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentReceiver",
      "display_name": "LatentReceiver",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImageMaskSwitch": {
      "input": {
          "required": {
              "select": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4,
                      "step": 1
                  }
              ],
              "images1": [
                  "IMAGE"
              ]
          },
          "optional": {
              "mask1_opt": [
                  "MASK"
              ],
              "images2_opt": [
                  "IMAGE"
              ],
              "mask2_opt": [
                  "MASK"
              ],
              "images3_opt": [
                  "IMAGE"
              ],
              "mask3_opt": [
                  "MASK"
              ],
              "images4_opt": [
                  "IMAGE"
              ],
              "mask4_opt": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "select",
              "images1"
          ],
          "optional": [
              "mask1_opt",
              "images2_opt",
              "mask2_opt",
              "images3_opt",
              "mask3_opt",
              "images4_opt",
              "mask4_opt"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImageMaskSwitch",
      "display_name": "Switch (images, mask)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "LatentSwitch": {
      "input": {
          "required": {
              "select": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999999,
                      "step": 1,
                      "tooltip": "The input number you want to output among the inputs"
                  }
              ],
              "sel_mode": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "select_on_prompt",
                      "label_off": "select_on_execution",
                      "forceInput": false,
                      "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
                  }
              ]
          },
          "optional": {
              "input1": [
                  "*",
                  {
                      "lazy": true,
                      "tooltip": "Any input. When connected, one more input slot is added."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "select",
              "sel_mode"
          ],
          "optional": [
              "input1"
          ],
          "hidden": [
              "unique_id",
              "extra_pnginfo"
          ]
      },
      "output": [
          "*",
          "STRING",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "selected_value",
          "selected_label",
          "selected_index"
      ],
      "name": "LatentSwitch",
      "display_name": "Switch (latent/legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Output is generated only from the input chosen by the 'select' value.",
          "Slot label of the selected input slot",
          "Outputs the select value as is"
      ]
  },
  "SEGSSwitch": {
      "input": {
          "required": {
              "select": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999999,
                      "step": 1,
                      "tooltip": "The input number you want to output among the inputs"
                  }
              ],
              "sel_mode": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "select_on_prompt",
                      "label_off": "select_on_execution",
                      "forceInput": false,
                      "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
                  }
              ]
          },
          "optional": {
              "input1": [
                  "*",
                  {
                      "lazy": true,
                      "tooltip": "Any input. When connected, one more input slot is added."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "select",
              "sel_mode"
          ],
          "optional": [
              "input1"
          ],
          "hidden": [
              "unique_id",
              "extra_pnginfo"
          ]
      },
      "output": [
          "*",
          "STRING",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "selected_value",
          "selected_label",
          "selected_index"
      ],
      "name": "SEGSSwitch",
      "display_name": "Switch (SEGS/legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Output is generated only from the input chosen by the 'select' value.",
          "Slot label of the selected input slot",
          "Outputs the select value as is"
      ]
  },
  "ImpactSwitch": {
      "input": {
          "required": {
              "select": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999999,
                      "step": 1,
                      "tooltip": "The input number you want to output among the inputs"
                  }
              ],
              "sel_mode": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "select_on_prompt",
                      "label_off": "select_on_execution",
                      "forceInput": false,
                      "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
                  }
              ]
          },
          "optional": {
              "input1": [
                  "*",
                  {
                      "lazy": true,
                      "tooltip": "Any input. When connected, one more input slot is added."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "select",
              "sel_mode"
          ],
          "optional": [
              "input1"
          ],
          "hidden": [
              "unique_id",
              "extra_pnginfo"
          ]
      },
      "output": [
          "*",
          "STRING",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "selected_value",
          "selected_label",
          "selected_index"
      ],
      "name": "ImpactSwitch",
      "display_name": "Switch (Any)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Output is generated only from the input chosen by the 'select' value.",
          "Slot label of the selected input slot",
          "Outputs the select value as is"
      ]
  },
  "ImpactInversedSwitch": {
      "input": {
          "required": {
              "select": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999999,
                      "step": 1,
                      "tooltip": "The output number you want to send from the input"
                  }
              ],
              "input": [
                  "*",
                  {
                      "tooltip": "Any input. When connected, one more input slot is added."
                  }
              ]
          },
          "optional": {
              "sel_mode": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "select_on_prompt",
                      "label_off": "select_on_execution",
                      "forceInput": false,
                      "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "select",
              "input"
          ],
          "optional": [
              "sel_mode"
          ],
          "hidden": [
              "prompt",
              "unique_id"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactInversedSwitch",
      "display_name": "Inversed Switch (Any)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."
      ]
  },
  "ImpactWildcardProcessor": {
      "input": {
          "required": {
              "wildcard_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "tooltip": "Enter a prompt using wildcard syntax."
                  }
              ],
              "populated_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "tooltip": "The actual value passed during the execution of 'ImpactWildcardProcessor' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
                  }
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Populate",
                      "label_off": "Fixed",
                      "tooltip": "Populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nFixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode."
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Determines the random seed to be used for wildcard processing."
                  }
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "wildcard_text",
              "populated_text",
              "mode",
              "seed",
              "Select to add Wildcard"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ImpactWildcardProcessor",
      "display_name": "ImpactWildcardProcessor",
      "description": "The 'ImpactWildcardProcessor' processes text prompts written in wildcard syntax and outputs the processed text prompt.\n\nTIP: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'Fixed'.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Prompt",
      "output_node": false
  },
  "ImpactWildcardEncode": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "wildcard_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "tooltip": "Enter a prompt using wildcard syntax."
                  }
              ],
              "populated_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "tooltip": "The actual value passed during the execution of 'ImpactWildcardEncode' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
                  }
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Populate",
                      "label_off": "Fixed",
                      "tooltip": "Populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nFixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode."
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Determines the random seed to be used for wildcard processing."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "wildcard_text",
              "populated_text",
              "mode",
              "Select to add LoRA",
              "Select to add Wildcard",
              "seed"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "conditioning",
          "populated_text"
      ],
      "name": "ImpactWildcardEncode",
      "display_name": "ImpactWildcardEncode",
      "description": "The 'ImpactWildcardEncode' node processes text prompts written in wildcard syntax and outputs them as conditioning. It also supports LoRA syntax, with the applied LoRA reflected in the model's output.\n\nTIP1: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'Fixed'.\nTIP2: If the 'Inspire Pack' is installed, LBW(LoRA Block Weight) syntax can also be applied.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Prompt",
      "output_node": false
  },
  "SEGSUpscaler": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "rescale_factor": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "resampling_method": [
                  [
                      "lanczos",
                      "nearest",
                      "bilinear",
                      "bicubic"
                  ]
              ],
              "supersample": [
                  [
                      "true",
                      "false"
                  ]
              ],
              "rounding_modulus": [
                  "INT",
                  {
                      "default": 8,
                      "min": 8,
                      "max": 1024,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "upscaler_hook_opt": [
                  "UPSCALER_HOOK"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "model",
              "clip",
              "vae",
              "rescale_factor",
              "resampling_method",
              "supersample",
              "rounding_modulus",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "denoise",
              "feather",
              "inpaint_model",
              "noise_mask_feather"
          ],
          "optional": [
              "upscale_model_opt",
              "upscaler_hook_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSUpscaler",
      "display_name": "Upscaler (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "SEGSUpscalerPipe": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "rescale_factor": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "resampling_method": [
                  [
                      "lanczos",
                      "nearest",
                      "bilinear",
                      "bicubic"
                  ]
              ],
              "supersample": [
                  [
                      "true",
                      "false"
                  ]
              ],
              "rounding_modulus": [
                  "INT",
                  {
                      "default": 8,
                      "min": 8,
                      "max": 1024,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "upscale_model_opt": [
                  "UPSCALE_MODEL"
              ],
              "upscaler_hook_opt": [
                  "UPSCALER_HOOK"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "basic_pipe",
              "rescale_factor",
              "resampling_method",
              "supersample",
              "rounding_modulus",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "feather",
              "inpaint_model",
              "noise_mask_feather"
          ],
          "optional": [
              "upscale_model_opt",
              "upscaler_hook_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSUpscalerPipe",
      "display_name": "Upscaler (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Upscale",
      "output_node": false
  },
  "SEGSDetailer": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 768,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mask": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "force_inpaint": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100
                  }
              ],
              "cycle": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "inpaint_model": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "noise_mask",
              "force_inpaint",
              "basic_pipe",
              "refiner_ratio",
              "batch_size",
              "cycle"
          ],
          "optional": [
              "refiner_basic_pipe_opt",
              "inpaint_model",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "SEGS",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          true
      ],
      "output_name": [
          "segs",
          "cnet_images"
      ],
      "name": "SEGSDetailer",
      "display_name": "SEGSDetailer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "SEGSPaste": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "feather": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "alpha": [
                  "INT",
                  {
                      "default": 255,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "ref_image_opt": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "segs",
              "feather",
              "alpha"
          ],
          "optional": [
              "ref_image_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSPaste",
      "display_name": "SEGSPaste",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "SEGSPreview": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "alpha_mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "min_alpha": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "fallback_image_opt": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "alpha_mode",
              "min_alpha"
          ],
          "optional": [
              "fallback_image_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSPreview",
      "display_name": "SEGSPreview",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "SEGSPreviewCNet": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSPreviewCNet",
      "display_name": "SEGSPreview (CNET Image)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": true
  },
  "SEGSToImageList": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          },
          "optional": {
              "fallback_image_opt": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ],
          "optional": [
              "fallback_image_opt"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SEGSToImageList",
      "display_name": "SEGSToImageList",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSToMaskList": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactSEGSToMaskList",
      "display_name": "SEGS to Mask List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSToMaskBatch": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactSEGSToMaskBatch",
      "display_name": "SEGS to Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSConcat": {
      "input": {
          "required": {
              "segs1": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs1"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSEGSConcat",
      "display_name": "SEGS Concat",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSPicker": {
      "input": {
          "required": {
              "picks": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "pysssss.autocomplete": false
                  }
              ],
              "segs": [
                  "SEGS"
              ]
          },
          "optional": {
              "fallback_image_opt": [
                  "IMAGE"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "picks",
              "segs"
          ],
          "optional": [
              "fallback_image_opt"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSEGSPicker",
      "display_name": "Picker (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeTileSEGS": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "bbox_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096,
                      "step": 8
                  }
              ],
              "crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 10,
                      "step": 0.01
                  }
              ],
              "min_overlap": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 512,
                      "step": 1
                  }
              ],
              "filter_segs_dilation": [
                  "INT",
                  {
                      "default": 20,
                      "min": -255,
                      "max": 255,
                      "step": 1
                  }
              ],
              "mask_irregularity": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "irregular_mask_mode": [
                  [
                      "Reuse fast",
                      "Reuse quality",
                      "All random fast",
                      "All random quality"
                  ]
              ]
          },
          "optional": {
              "filter_in_segs_opt": [
                  "SEGS"
              ],
              "filter_out_segs_opt": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "bbox_size",
              "crop_factor",
              "min_overlap",
              "filter_segs_dilation",
              "mask_irregularity",
              "irregular_mask_mode"
          ],
          "optional": [
              "filter_in_segs_opt",
              "filter_out_segs_opt"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactMakeTileSEGS",
      "display_name": "Make Tile SEGS",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/__for_testing",
      "output_node": false
  },
  "ImpactSEGSMerge": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSEGSMerge",
      "display_name": "SEGS Merge",
      "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "SEGSDetailerForAnimateDiff": {
      "input": {
          "required": {
              "image_frames": [
                  "IMAGE"
              ],
              "segs": [
                  "SEGS"
              ],
              "guide_size": [
                  "FLOAT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "guide_size_for": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "bbox",
                      "label_off": "crop_region"
                  }
              ],
              "max_size": [
                  "FLOAT",
                  {
                      "default": 768,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0001,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "refiner_ratio": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0
                  }
              ]
          },
          "optional": {
              "refiner_basic_pipe_opt": [
                  "BASIC_PIPE"
              ],
              "noise_mask_feather": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_frames",
              "segs",
              "guide_size",
              "guide_size_for",
              "max_size",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "denoise",
              "basic_pipe",
              "refiner_ratio"
          ],
          "optional": [
              "refiner_basic_pipe_opt",
              "noise_mask_feather",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "SEGS",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          true
      ],
      "output_name": [
          "segs",
          "cnet_images"
      ],
      "name": "SEGSDetailerForAnimateDiff",
      "display_name": "SEGSDetailer For AnimateDiff (SEGS/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Detailer",
      "output_node": false
  },
  "ImpactKSamplerBasicPipe": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE",
                  {
                      "tooltip": "basic_pipe input for sampling"
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "tooltip": "classifier free guidance value"
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "tooltip": "sampler"
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ],
                  {
                      "tooltip": "noise schedule"
                  }
              ],
              "latent_image": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
                  }
              ]
          },
          "optional": {
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC",
                  {
                      "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "latent_image",
              "denoise"
          ],
          "optional": [
              "scheduler_func_opt"
          ]
      },
      "output": [
          "BASIC_PIPE",
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "BASIC_PIPE",
          "LATENT",
          "VAE"
      ],
      "name": "ImpactKSamplerBasicPipe",
      "display_name": "KSampler (pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/sampling",
      "output_node": false,
      "output_tooltips": [
          "passthrough input basic_pipe",
          "result latent",
          "VAE in basic_pipe"
      ]
  },
  "ImpactKSamplerAdvancedBasicPipe": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE",
                  {
                      "tooltip": "basic_pipe input for sampling"
                  }
              ],
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable",
                      "tooltip": "Whether to add noise"
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "tooltip": "classifier free guidance value"
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "tooltip": "sampler"
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ],
                  {
                      "tooltip": "noise schedule"
                  }
              ],
              "latent_image": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
                  }
              ],
              "return_with_leftover_noise": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable",
                      "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
                  }
              ]
          },
          "optional": {
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC",
                  {
                      "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "add_noise",
              "noise_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "latent_image",
              "start_at_step",
              "end_at_step",
              "return_with_leftover_noise"
          ],
          "optional": [
              "scheduler_func_opt"
          ]
      },
      "output": [
          "BASIC_PIPE",
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "BASIC_PIPE",
          "LATENT",
          "VAE"
      ],
      "name": "ImpactKSamplerAdvancedBasicPipe",
      "display_name": "KSampler (Advanced/pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/sampling",
      "output_node": false,
      "output_tooltips": [
          "passthrough input basic_pipe",
          "result latent",
          "VAE in basic_pipe"
      ]
  },
  "ReencodeLatent": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "tile_mode": [
                  [
                      "None",
                      "Both",
                      "Decode(input) only",
                      "Encode(output) only"
                  ]
              ],
              "input_vae": [
                  "VAE"
              ],
              "output_vae": [
                  "VAE"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 512,
                      "min": 320,
                      "max": 4096,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "tile_mode",
              "input_vae",
              "output_vae",
              "tile_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "ReencodeLatent",
      "display_name": "Reencode Latent",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ReencodeLatentPipe": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "tile_mode": [
                  [
                      "None",
                      "Both",
                      "Decode(input) only",
                      "Encode(output) only"
                  ]
              ],
              "input_basic_pipe": [
                  "BASIC_PIPE"
              ],
              "output_basic_pipe": [
                  "BASIC_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "tile_mode",
              "input_basic_pipe",
              "output_basic_pipe"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "ReencodeLatentPipe",
      "display_name": "Reencode Latent (pipe)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactImageBatchToImageList": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImpactImageBatchToImageList",
      "display_name": "Image Batch to Image List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeImageList": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImpactMakeImageList",
      "display_name": "Make Image List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeImageBatch": {
      "input": {
          "required": {
              "image1": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image1"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImpactMakeImageBatch",
      "display_name": "Make Image Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeAnyList": {
      "input": {
          "required": {},
          "optional": {
              "value1": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "value1"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactMakeAnyList",
      "display_name": "Make List (Any)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeMaskList": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactMakeMaskList",
      "display_name": "Make Mask List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactMakeMaskBatch": {
      "input": {
          "required": {
              "mask1": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask1"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ImpactMakeMaskBatch",
      "display_name": "Make Mask Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "RegionalSampler": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "seed_2nd": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Additional noise seed. The behavior is determined by seed_2nd_mode."
                  }
              ],
              "seed_2nd_mode": [
                  [
                      "ignore",
                      "fixed",
                      "seed+seed_2nd",
                      "seed-seed_2nd",
                      "increment",
                      "decrement",
                      "randomize"
                  ],
                  {
                      "tooltip": "application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "base_only_steps": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
                  }
              ],
              "samples": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER_ADVANCED",
                  {
                      "tooltip": "The sampler applied outside the area set by the regional_prompt."
                  }
              ],
              "regional_prompts": [
                  "REGIONAL_PROMPTS",
                  {
                      "tooltip": "The prompt applied to each region"
                  }
              ],
              "overlap_factor": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
                  }
              ],
              "restore_latent": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled",
                      "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
                  }
              ],
              "additional_mode": [
                  [
                      "DISABLE",
                      "ratio additional",
                      "ratio between"
                  ],
                  {
                      "default": "ratio between",
                      "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
                  }
              ],
              "additional_sampler": [
                  [
                      "AUTO",
                      "euler",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_fast",
                      "dpmpp_2m",
                      "ddpm"
                  ],
                  {
                      "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
                  }
              ],
              "additional_sigma_ratio": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "seed",
              "seed_2nd",
              "seed_2nd_mode",
              "steps",
              "base_only_steps",
              "denoise",
              "samples",
              "base_sampler",
              "regional_prompts",
              "overlap_factor",
              "restore_latent",
              "additional_mode",
              "additional_sampler",
              "additional_sigma_ratio"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RegionalSampler",
      "display_name": "RegionalSampler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Regional",
      "output_node": false,
      "output_tooltips": [
          "result latent"
      ]
  },
  "RegionalSamplerAdvanced": {
      "input": {
          "required": {
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled",
                      "tooltip": "Whether to add noise"
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Random seed to use for generating CPU noise for sampling."
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000,
                      "tooltip": "total sampling steps"
                  }
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
                  }
              ],
              "overlap_factor": [
                  "INT",
                  {
                      "default": 10,
                      "min": 0,
                      "max": 10000,
                      "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
                  }
              ],
              "restore_latent": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enabled",
                      "label_off": "disabled",
                      "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
                  }
              ],
              "return_with_leftover_noise": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled",
                      "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
                  }
              ],
              "latent_image": [
                  "LATENT",
                  {
                      "tooltip": "input latent image"
                  }
              ],
              "base_sampler": [
                  "KSAMPLER_ADVANCED",
                  {
                      "tooltip": "The sampler applied outside the area set by the regional_prompt."
                  }
              ],
              "regional_prompts": [
                  "REGIONAL_PROMPTS",
                  {
                      "tooltip": "The prompt applied to each region"
                  }
              ],
              "additional_mode": [
                  [
                      "DISABLE",
                      "ratio additional",
                      "ratio between"
                  ],
                  {
                      "default": "ratio between",
                      "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
                  }
              ],
              "additional_sampler": [
                  [
                      "AUTO",
                      "euler",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_fast",
                      "dpmpp_2m",
                      "ddpm"
                  ],
                  {
                      "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
                  }
              ],
              "additional_sigma_ratio": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "add_noise",
              "noise_seed",
              "steps",
              "start_at_step",
              "end_at_step",
              "overlap_factor",
              "restore_latent",
              "return_with_leftover_noise",
              "latent_image",
              "base_sampler",
              "regional_prompts",
              "additional_mode",
              "additional_sampler",
              "additional_sigma_ratio"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RegionalSamplerAdvanced",
      "display_name": "RegionalSamplerAdvanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Regional",
      "output_node": false,
      "output_tooltips": [
          "result latent"
      ]
  },
  "CombineRegionalPrompts": {
      "input": {
          "required": {
              "regional_prompts1": [
                  "REGIONAL_PROMPTS",
                  {
                      "tooltip": "input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "regional_prompts1"
          ]
      },
      "output": [
          "REGIONAL_PROMPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_PROMPTS"
      ],
      "name": "CombineRegionalPrompts",
      "display_name": "CombineRegionalPrompts",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Regional",
      "output_node": false,
      "output_tooltips": [
          "Combined REGIONAL_PROMPTS"
      ]
  },
  "RegionalPrompt": {
      "input": {
          "required": {
              "mask": [
                  "MASK",
                  {
                      "tooltip": "region mask"
                  }
              ],
              "advanced_sampler": [
                  "KSAMPLER_ADVANCED",
                  {
                      "tooltip": "sampler for specified region"
                  }
              ]
          },
          "optional": {
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": "Sets the extra seed to be used for noise variation."
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "Sets the strength of the noise variation."
                  }
              ],
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ],
                  {
                      "tooltip": "Sets how the original noise and extra noise are blended together."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "advanced_sampler"
          ],
          "optional": [
              "variation_seed",
              "variation_strength",
              "variation_method"
          ]
      },
      "output": [
          "REGIONAL_PROMPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_PROMPTS"
      ],
      "name": "RegionalPrompt",
      "display_name": "RegionalPrompt",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Regional",
      "output_node": false,
      "output_tooltips": [
          "regional prompts. (Can be used in the RegionalSampler.)"
      ]
  },
  "ImpactCombineConditionings": {
      "input": {
          "required": {
              "conditioning1": [
                  "CONDITIONING",
                  {
                      "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning1"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ImpactCombineConditionings",
      "display_name": "Combine Conditionings",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Combined conditioning"
      ]
  },
  "ImpactConcatConditionings": {
      "input": {
          "required": {
              "conditioning1": [
                  "CONDITIONING",
                  {
                      "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning1"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ImpactConcatConditionings",
      "display_name": "Concat Conditionings",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false,
      "output_tooltips": [
          "Concatenated conditioning"
      ]
  },
  "ImpactSEGSLabelAssign": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "List the label to be assigned in order of segs, separated by commas"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "labels"
          ]
      },
      "output": [
          "SEGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS"
      ],
      "name": "ImpactSEGSLabelAssign",
      "display_name": "SEGS Assign (label)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSLabelFilter": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "preset": [
                  [
                      "all",
                      "hand",
                      "face",
                      "mouth",
                      "eyes",
                      "eyebrows",
                      "pupils",
                      "left_eyebrow",
                      "left_eye",
                      "left_pupil",
                      "right_eyebrow",
                      "right_eye",
                      "right_pupil",
                      "short_sleeved_shirt",
                      "long_sleeved_shirt",
                      "short_sleeved_outwear",
                      "long_sleeved_outwear",
                      "vest",
                      "sling",
                      "shorts",
                      "trousers",
                      "skirt",
                      "short_sleeved_dress",
                      "long_sleeved_dress",
                      "vest_dress",
                      "sling_dress",
                      "person",
                      "bicycle",
                      "car",
                      "motorcycle",
                      "airplane",
                      "bus",
                      "train",
                      "truck",
                      "boat",
                      "traffic light",
                      "fire hydrant",
                      "stop sign",
                      "parking meter",
                      "bench",
                      "bird",
                      "cat",
                      "dog",
                      "horse",
                      "sheep",
                      "cow",
                      "elephant",
                      "bear",
                      "zebra",
                      "giraffe",
                      "backpack",
                      "umbrella",
                      "handbag",
                      "tie",
                      "suitcase",
                      "frisbee",
                      "skis",
                      "snowboard",
                      "sports ball",
                      "kite",
                      "baseball bat",
                      "baseball glove",
                      "skateboard",
                      "surfboard",
                      "tennis racket",
                      "bottle",
                      "wine glass",
                      "cup",
                      "fork",
                      "knife",
                      "spoon",
                      "bowl",
                      "banana",
                      "apple",
                      "sandwich",
                      "orange",
                      "broccoli",
                      "carrot",
                      "hot dog",
                      "pizza",
                      "donut",
                      "cake",
                      "chair",
                      "couch",
                      "potted plant",
                      "bed",
                      "dining table",
                      "toilet",
                      "tv",
                      "laptop",
                      "mouse",
                      "remote",
                      "keyboard",
                      "cell phone",
                      "microwave",
                      "oven",
                      "toaster",
                      "sink",
                      "refrigerator",
                      "book",
                      "clock",
                      "vase",
                      "scissors",
                      "teddy bear",
                      "hair drier",
                      "toothbrush"
                  ]
              ],
              "labels": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "List the types of segments to be allowed, separated by commas"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "preset",
              "labels"
          ]
      },
      "output": [
          "SEGS",
          "SEGS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "filtered_SEGS",
          "remained_SEGS"
      ],
      "name": "ImpactSEGSLabelFilter",
      "display_name": "SEGS Filter (label)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSRangeFilter": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "target": [
                  [
                      "area(=w*h)",
                      "width",
                      "height",
                      "x1",
                      "y1",
                      "x2",
                      "y2",
                      "length_percent",
                      "confidence(0-100)"
                  ]
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "inside",
                      "label_off": "outside"
                  }
              ],
              "min_value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "max_value": [
                  "INT",
                  {
                      "default": 67108864,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "target",
              "mode",
              "min_value",
              "max_value"
          ]
      },
      "output": [
          "SEGS",
          "SEGS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "filtered_SEGS",
          "remained_SEGS"
      ],
      "name": "ImpactSEGSRangeFilter",
      "display_name": "SEGS Filter (range)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactSEGSOrderedFilter": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ],
              "target": [
                  [
                      "area(=w*h)",
                      "width",
                      "height",
                      "x1",
                      "y1",
                      "x2",
                      "y2",
                      "confidence"
                  ]
              ],
              "order": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "descending",
                      "label_off": "ascending"
                  }
              ],
              "take_start": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ],
              "take_count": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "segs",
              "target",
              "order",
              "take_start",
              "take_count"
          ]
      },
      "output": [
          "SEGS",
          "SEGS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "filtered_SEGS",
          "remained_SEGS"
      ],
      "name": "ImpactSEGSOrderedFilter",
      "display_name": "SEGS Filter (ordered)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactCompare": {
      "input": {
          "required": {
              "cmp": [
                  [
                      "a = b",
                      "a <> b",
                      "a > b",
                      "a < b",
                      "a >= b",
                      "a <= b",
                      "tt",
                      "ff"
                  ]
              ],
              "a": [
                  "*"
              ],
              "b": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "cmp",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "ImpactCompare",
      "display_name": "ImpactCompare",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactConditionalBranch": {
      "input": {
          "required": {
              "cond": [
                  "BOOLEAN"
              ],
              "tt_value": [
                  "*",
                  {
                      "lazy": true
                  }
              ],
              "ff_value": [
                  "*",
                  {
                      "lazy": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond",
              "tt_value",
              "ff_value"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactConditionalBranch",
      "display_name": "ImpactConditionalBranch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactConditionalBranchSelMode": {
      "input": {
          "required": {
              "cond": [
                  "BOOLEAN"
              ]
          },
          "optional": {
              "tt_value": [
                  "*"
              ],
              "ff_value": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "cond"
          ],
          "optional": [
              "tt_value",
              "ff_value"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactConditionalBranchSelMode",
      "display_name": "ImpactConditionalBranchSelMode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactIfNone": {
      "input": {
          "required": {},
          "optional": {
              "signal": [
                  "*"
              ],
              "any_input": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "signal",
              "any_input"
          ]
      },
      "output": [
          "*",
          "BOOLEAN"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "signal_opt",
          "bool"
      ],
      "name": "ImpactIfNone",
      "display_name": "ImpactIfNone",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactConvertDataType": {
      "input": {
          "required": {
              "value": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "STRING",
          "FLOAT",
          "INT",
          "BOOLEAN"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "STRING",
          "FLOAT",
          "INT",
          "BOOLEAN"
      ],
      "name": "ImpactConvertDataType",
      "display_name": "ImpactConvertDataType",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactLogicalOperators": {
      "input": {
          "required": {
              "operator": [
                  [
                      "and",
                      "or",
                      "xor"
                  ]
              ],
              "bool_a": [
                  "BOOLEAN",
                  {
                      "forceInput": true
                  }
              ],
              "bool_b": [
                  "BOOLEAN",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "operator",
              "bool_a",
              "bool_b"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "ImpactLogicalOperators",
      "display_name": "ImpactLogicalOperators",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactInt": {
      "input": {
          "required": {
              "value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "ImpactInt",
      "display_name": "ImpactInt",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactFloat": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -3.402823466e+38,
                      "max": 3.402823466e+38
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "ImpactFloat",
      "display_name": "ImpactFloat",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactBoolean": {
      "input": {
          "required": {
              "value": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "ImpactBoolean",
      "display_name": "ImpactBoolean",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactValueSender": {
      "input": {
          "required": {
              "value": [
                  "*"
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "signal_opt": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "link_id"
          ],
          "optional": [
              "signal_opt"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal"
      ],
      "name": "ImpactValueSender",
      "display_name": "ImpactValueSender",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": true
  },
  "ImpactValueReceiver": {
      "input": {
          "required": {
              "typ": [
                  [
                      "STRING",
                      "INT",
                      "FLOAT",
                      "BOOLEAN"
                  ]
              ],
              "value": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "link_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "typ",
              "value",
              "link_id"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactValueReceiver",
      "display_name": "ImpactValueReceiver",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactImageInfo": {
      "input": {
          "required": {
              "value": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "batch",
          "height",
          "width",
          "channel"
      ],
      "name": "ImpactImageInfo",
      "display_name": "ImpactImageInfo",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": false
  },
  "ImpactLatentInfo": {
      "input": {
          "required": {
              "value": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "INT",
          "INT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "batch",
          "height",
          "width",
          "channel"
      ],
      "name": "ImpactLatentInfo",
      "display_name": "ImpactLatentInfo",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": false
  },
  "ImpactMinMax": {
      "input": {
          "required": {
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "max",
                      "label_off": "min"
                  }
              ],
              "a": [
                  "*"
              ],
              "b": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "a",
              "b"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "ImpactMinMax",
      "display_name": "ImpactMinMax",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": false
  },
  "ImpactNeg": {
      "input": {
          "required": {
              "value": [
                  "BOOLEAN",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "ImpactNeg",
      "display_name": "ImpactNeg",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactConditionalStopIteration": {
      "input": {
          "required": {
              "cond": [
                  "BOOLEAN",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImpactConditionalStopIteration",
      "display_name": "ImpactConditionalStopIteration",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": true
  },
  "ImpactStringSelector": {
      "input": {
          "required": {
              "strings": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "multiline": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ],
              "select": [
                  "INT",
                  {
                      "min": 0,
                      "max": 9223372036854775807,
                      "step": 1,
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "strings",
              "multiline",
              "select"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "ImpactStringSelector",
      "display_name": "String Selector",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "StringListToString": {
      "input": {
          "required": {
              "join_with": [
                  "STRING",
                  {
                      "default": "\\n"
                  }
              ],
              "string_list": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "join_with",
              "string_list"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "StringListToString",
      "display_name": "String List to String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "WildcardPromptFromString": {
      "input": {
          "required": {
              "string": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "delimiter": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "\\n"
                  }
              ],
              "prefix_all": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "postfix_all": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "restrict_to_tags": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "exclude_tags": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "string",
              "delimiter",
              "prefix_all",
              "postfix_all",
              "restrict_to_tags",
              "exclude_tags"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "wildcard",
          "segs_labels"
      ],
      "name": "WildcardPromptFromString",
      "display_name": "Wildcard Prompt from String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactExecutionOrderController": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "value": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "signal",
              "value"
          ]
      },
      "output": [
          "*",
          "*"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "signal",
          "value"
      ],
      "name": "ImpactExecutionOrderController",
      "display_name": "Execution Order Controller",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactListBridge": {
      "input": {
          "required": {
              "list_input": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "list_input"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "list_output"
      ],
      "name": "ImpactListBridge",
      "display_name": "List Bridge",
      "description": "When passing the list output through this node, it collects and organizes the data before forwarding it, which ensures that the previous stage's sub-workflow has been completed.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "RemoveNoiseMask": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "samples"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "RemoveNoiseMask",
      "display_name": "Remove Noise Mask",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "ImpactLogger": {
      "input": {
          "required": {
              "data": [
                  "*"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "data",
              "text"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo",
              "unique_id"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImpactLogger",
      "display_name": "ImpactLogger",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Debug",
      "output_node": true
  },
  "ImpactDummyInput": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "ImpactDummyInput",
      "display_name": "ImpactDummyInput",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Debug",
      "output_node": false
  },
  "ImpactQueueTrigger": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Trigger",
                      "label_off": "Don't trigger"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "signal",
              "mode"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal_opt"
      ],
      "name": "ImpactQueueTrigger",
      "display_name": "Queue Trigger",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactQueueTriggerCountdown": {
      "input": {
          "required": {
              "count": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "total": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 18446744073709551615
                  }
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Trigger",
                      "label_off": "Don't trigger"
                  }
              ]
          },
          "optional": {
              "signal": [
                  "*"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "count",
              "total",
              "mode"
          ],
          "optional": [
              "signal"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "*",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "signal_opt",
          "count",
          "total"
      ],
      "name": "ImpactQueueTriggerCountdown",
      "display_name": "Queue Trigger (Countdown)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactSetWidgetValue": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "node_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "widget_name": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "boolean_value": [
                  "BOOLEAN",
                  {
                      "forceInput": true
                  }
              ],
              "int_value": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "float_value": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ],
              "string_value": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "signal",
              "node_id",
              "widget_name"
          ],
          "optional": [
              "boolean_value",
              "int_value",
              "float_value",
              "string_value"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal_opt"
      ],
      "name": "ImpactSetWidgetValue",
      "display_name": "Set Widget Value",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactNodeSetMuteState": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "node_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "set_state": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "active",
                      "label_off": "mute"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "signal",
              "node_id",
              "set_state"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal_opt"
      ],
      "name": "ImpactNodeSetMuteState",
      "display_name": "Set Mute State",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactControlBridge": {
      "input": {
          "required": {
              "value": [
                  "*"
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Active",
                      "label_off": "Stop/Mute/Bypass"
                  }
              ],
              "behavior": [
                  [
                      "Stop",
                      "Mute",
                      "Bypass"
                  ]
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID",
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "value",
              "mode",
              "behavior"
          ],
          "hidden": [
              "unique_id",
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "value"
      ],
      "name": "ImpactControlBridge",
      "display_name": "Control Bridge",
      "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state.",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": true
  },
  "ImpactIsNotEmptySEGS": {
      "input": {
          "required": {
              "segs": [
                  "SEGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "segs"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "ImpactIsNotEmptySEGS",
      "display_name": "SEGS isn't Empty",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic",
      "output_node": false
  },
  "ImpactSleep": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "seconds": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 3600
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "signal",
              "seconds"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal_opt"
      ],
      "name": "ImpactSleep",
      "display_name": "Sleep",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactRemoteBoolean": {
      "input": {
          "required": {
              "node_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "widget_name": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "value": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "node_id",
              "widget_name",
              "value"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImpactRemoteBoolean",
      "display_name": "Remote Boolean (on prompt)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactRemoteInt": {
      "input": {
          "required": {
              "node_id": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "widget_name": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "value": [
                  "INT",
                  {
                      "default": 0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "node_id",
              "widget_name",
              "value"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ImpactRemoteInt",
      "display_name": "Remote Int (on prompt)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Logic/_for_test",
      "output_node": true
  },
  "ImpactHFTransformersClassifierProvider": {
      "input": {
          "required": {
              "preset_repo_id": [
                  [
                      "rizvandwiki/gender-classification-2",
                      "NTQAI/pedestrian_gender_recognition",
                      "Leilab/gender_class",
                      "ProjectPersonal/GenderClassifier",
                      "crangana/trained-gender",
                      "cledoux42/GenderNew_v002",
                      "ivensamdh/genderage2",
                      "Manual repo id"
                  ]
              ],
              "manual_repo_id": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "device_mode": [
                  [
                      "AUTO",
                      "Prefer GPU",
                      "CPU"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "preset_repo_id",
              "manual_repo_id",
              "device_mode"
          ]
      },
      "output": [
          "TRANSFORMERS_CLASSIFIER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "TRANSFORMERS_CLASSIFIER"
      ],
      "name": "ImpactHFTransformersClassifierProvider",
      "display_name": "HF Transformers Classifier Provider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/HuggingFace",
      "output_node": false
  },
  "ImpactSEGSClassify": {
      "input": {
          "required": {
              "classifier": [
                  "TRANSFORMERS_CLASSIFIER"
              ],
              "segs": [
                  "SEGS"
              ],
              "preset_expr": [
                  [
                      "#Female > #Male",
                      "#Female < #Male",
                      "female > 0.5",
                      "male > 0.5",
                      "Age16to25 > 0.1",
                      "Age50to69 > 0.1",
                      "Manual expr"
                  ]
              ],
              "manual_expr": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "ref_image_opt": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "classifier",
              "segs",
              "preset_expr",
              "manual_expr"
          ],
          "optional": [
              "ref_image_opt"
          ]
      },
      "output": [
          "SEGS",
          "SEGS",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          true
      ],
      "output_name": [
          "filtered_SEGS",
          "remained_SEGS",
          "detected_labels"
      ],
      "name": "ImpactSEGSClassify",
      "display_name": "SEGS Classify",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/HuggingFace",
      "output_node": false
  },
  "ImpactSchedulerAdapter": {
      "input": {
          "required": {
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ],
                  {
                      "defaultInput": true
                  }
              ],
              "extra_scheduler": [
                  [
                      "None",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]",
                      "LTXV[default]"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "scheduler",
              "extra_scheduler"
          ]
      },
      "output": [
          [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic",
              "AYS SDXL",
              "AYS SD1",
              "AYS SVD",
              "GITS[coeff=1.2]",
              "LTXV[default]"
          ]
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "scheduler"
      ],
      "name": "ImpactSchedulerAdapter",
      "display_name": "Impact Scheduler Adapter",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/Util",
      "output_node": false
  },
  "GITSSchedulerFuncProvider": {
      "input": {
          "required": {
              "coeff": [
                  "FLOAT",
                  {
                      "default": 1.2,
                      "min": 0.8,
                      "max": 1.5,
                      "step": 0.05,
                      "tooltip": "coeff factor of GITS Scheduler"
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "tooltip": "denoise amount for noise schedule"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coeff",
              "denoise"
          ]
      },
      "output": [
          "SCHEDULER_FUNC"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SCHEDULER_FUNC"
      ],
      "name": "GITSSchedulerFuncProvider",
      "display_name": "GITSScheduler Func Provider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Impact-Pack",
      "category": "ImpactPack/sampling",
      "output_node": false,
      "output_tooltips": [
          "Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."
      ]
  },
  "XY Input: Lora Block Weight //Inspire": {
      "input": {
          "required": {
              "category_filter": [
                  [
                      "All",
                      ""
                  ]
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "inverse": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "A": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "B": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "preset": [
                  [
                      "Preset",
                      "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
                      "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
                      "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
                      "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
                      "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
                      "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
                      "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
                      "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
                      "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
                      "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
                      "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
                      "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
                      "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
                      "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
                      "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
                      "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
                      "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "@SD-FULL-TEST:17",
                      "@SD-BLOCK1-TEST:17,12,1",
                      "@SD-BLOCK2-TEST:17,12,2",
                      "@SD-BLOCK3-TEST:17,12,3",
                      "@SD-BLOCK4-TEST:17,12,4",
                      "@SD-BLOCK5-TEST:17,12,5",
                      "@SD-BLOCK6-TEST:17,12,6",
                      "@SD-BLOCK7-TEST:17,12,7",
                      "@SD-BLOCK8-TEST:17,12,8",
                      "@SD-BLOCK9-TEST:17,12,9",
                      "@SD-BLOCK10-TEST:17,12,10",
                      "@SD-BLOCK11-TEST:17,12,11",
                      "@SD-BLOCK12-TEST:17,12,12",
                      "@SD-BLOCK13-TEST:17,12,13",
                      "@SD-BLOCK14-TEST:17,12,14",
                      "@SD-BLOCK15-TEST:17,12,15",
                      "@SD-BLOCK16-TEST:17,12,16",
                      "@SD-BLOCK17-TEST:17,12,17",
                      "@SD-LyC-FULL-TEST:27",
                      "@SDXL-FULL-TEST:12",
                      "@SDXL-LyC-FULL-TEST:21",
                      "@FLUX-DBL-FULL:19",
                      "@FLUX-DBL-SGL-FULL:58",
                      "@FLUX-DBL0-TEST:19,14,2",
                      "@FLUX-DBL1-TEST:19,14,3",
                      "@FLUX-DBL2-TEST:19,14,4",
                      "@FLUX-DBL3-TEST:19,14,5",
                      "@FLUX-DBL4-TEST:19,14,6",
                      "@FLUX-DBL5-TEST:19,14,7",
                      "@FLUX-DBL6-TEST:19,14,8",
                      "@FLUX-DBL7-TEST:19,14,9",
                      "@FLUX-DBL8-TEST:19,14,10",
                      "@FLUX-DBL9-TEST:19,14,11",
                      "@FLUX-DBL10-TEST:19,14,12",
                      "@FLUX-DBL11-TEST:19,14,13",
                      "@FLUX-DBL12-TEST:19,14,14",
                      "@FLUX-DBL13-TEST:19,14,15",
                      "@FLUX-DBL14-TEST:19,14,16",
                      "@FLUX-DBL15-TEST:19,14,17",
                      "@FLUX-DBL16-TEST:19,14,18",
                      "@FLUX-DBL17-TEST:19,14,19",
                      "@FLUX-DBL18-TEST:19,14,20",
                      "@FLUX-SGL0-TEST:58,6,21",
                      "@FLUX-SGL1-TEST:58,6,22",
                      "@FLUX-SGL2-TEST:58,6,23",
                      "@FLUX-SGL3-TEST:58,6,24",
                      "@FLUX-SGL4-TEST:58,6,25",
                      "@FLUX-SGL5-TEST:58,6,26",
                      "@FLUX-SGL6-TEST:58,6,27",
                      "@FLUX-SGL7-TEST:58,6,28",
                      "@FLUX-SGL8-TEST:58,6,29",
                      "@FLUX-SGL9-TEST:58,6,30",
                      "@FLUX-SGL10-TEST:58,6,31",
                      "@FLUX-SGL11-TEST:58,6,32",
                      "@FLUX-SGL12-TEST:58,6,33",
                      "@FLUX-SGL13-TEST:58,6,34",
                      "@FLUX-SGL14-TEST:58,6,35",
                      "@FLUX-SGL15-TEST:58,6,36",
                      "@FLUX-SGL16-TEST:58,6,37",
                      "@FLUX-SGL17-TEST:58,6,38",
                      "@FLUX-SGL18-TEST:58,6,39",
                      "@FLUX-SGL19-TEST:58,6,40",
                      "@FLUX-SGL20-TEST:58,6,41",
                      "@FLUX-SGL21-TEST:58,6,42",
                      "@FLUX-SGL22-TEST:58,6,43",
                      "@FLUX-SGL23-TEST:58,6,44",
                      "@FLUX-SGL24-TEST:58,6,45",
                      "@FLUX-SGL25-TEST:58,6,46",
                      "@FLUX-SGL26-TEST:58,6,47",
                      "@FLUX-SGL27-TEST:58,6,48",
                      "@FLUX-SGL28-TEST:58,6,49",
                      "@FLUX-SGL29-TEST:58,6,50",
                      "@FLUX-SGL30-TEST:58,6,51",
                      "@FLUX-SGL31-TEST:58,6,52",
                      "@FLUX-SGL32-TEST:58,6,53",
                      "@FLUX-SGL33-TEST:58,6,54",
                      "@FLUX-SGL34-TEST:58,6,55",
                      "@FLUX-SGL35-TEST:58,6,56",
                      "@FLUX-SGL36-TEST:58,6,57",
                      "@FLUX-SGL37-TEST:58,6,58",
                      "@FLUX-SGL38-TEST:58,6,59"
                  ]
              ],
              "block_vectors": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "SD-NONE/SD-ALL\nSD-ALL/SD-ALL\nSD-INS/SD-ALL\nSD-IND/SD-ALL\nSD-INALL/SD-ALL\nSD-MIDD/SD-ALL\nSD-MIDD0.2/SD-ALL\nSD-MIDD0.8/SD-ALL\nSD-MOUT/SD-ALL\nSD-OUTD/SD-ALL\nSD-OUTS/SD-ALL\nSD-OUTALL/SD-ALL",
                      "placeholder": "{target vector}/{reference vector}",
                      "pysssss.autocomplete": false
                  }
              ],
              "heatmap_palette": [
                  [
                      "viridis",
                      "magma",
                      "plasma",
                      "inferno",
                      "cividis"
                  ]
              ],
              "heatmap_alpha": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "heatmap_strength": [
                  "FLOAT",
                  {
                      "default": 1.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "xyplot_mode": [
                  [
                      "Simple",
                      "Diff",
                      "Diff+Heatmap"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "category_filter",
              "lora_name",
              "strength_model",
              "strength_clip",
              "inverse",
              "seed",
              "A",
              "B",
              "preset",
              "block_vectors",
              "heatmap_palette",
              "heatmap_alpha",
              "heatmap_strength",
              "xyplot_mode"
          ]
      },
      "output": [
          "XY",
          "XY"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "X (vectors)",
          "Y (effect_compares)"
      ],
      "name": "XY Input: Lora Block Weight //Inspire",
      "display_name": "XY Input: LoRA Block Weight",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": false
  },
  "LoraLoaderBlockWeight //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "category_filter": [
                  [
                      "All",
                      ""
                  ]
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "inverse": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False",
                      "tooltip": "Apply the following weights for each block:\nTrue: 1 - weight\nFalse: weight"
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": ""
                  }
              ],
              "A": [
                  "FLOAT",
                  {
                      "default": 4.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "B": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "preset": [
                  [
                      "Preset",
                      "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
                      "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
                      "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
                      "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
                      "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
                      "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
                      "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
                      "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
                      "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
                      "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
                      "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
                      "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
                      "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
                      "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
                      "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
                      "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
                      "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                  ]
              ],
              "block_vector": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "block weight vectors",
                      "default": "1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "pysssss.autocomplete": false
                  }
              ],
              "bypass": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "category_filter",
              "lora_name",
              "strength_model",
              "strength_clip",
              "inverse",
              "seed",
              "A",
              "B",
              "preset",
              "block_vector",
              "bypass"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "populated_vector"
      ],
      "name": "LoraLoaderBlockWeight //Inspire",
      "display_name": "LoRA Loader (Block Weight)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": false
  },
  "LoraBlockInfo //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "block_info": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "lora_name",
              "block_info"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "LoraBlockInfo //Inspire",
      "display_name": "LoRA Block Info",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": true
  },
  "MakeLBW //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "category_filter": [
                  [
                      "All",
                      ""
                  ]
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "inverse": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False",
                      "tooltip": "Apply the following weights for each block:\nTrue: 1 - weight\nFalse: weight"
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "tooltip": ""
                  }
              ],
              "A": [
                  "FLOAT",
                  {
                      "default": 4.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "B": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "preset": [
                  [
                      "Preset",
                      "SD-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-INS:1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-IND:1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-INALL:1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0",
                      "SD-MIDD:1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0",
                      "SD-MIDD0.2:1,0,0,0,0,0,0.2,0.4,0.4,0.2,0,0,0,0,0,0,0",
                      "SD-MIDD0.8:1,0,0,0,0,0.5,0.8,0.8,0.4,0,0,0,0,0,0,0,0",
                      "SD-MOUT:1,0,0,0,0,0,1,1,1,1,1,1,1,1,0.5,0,0",
                      "SD-OUTD:1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0",
                      "SD-OUTS:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1",
                      "SD-OUTALL:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "SD-ROUT:1,1,1,1,1,1,1,1,R,R,R,R,R,R,R,R,R",
                      "SD-AOUT:A,1,1,1,1,1,1,1,1,1,1,1,A,A,A,A,A",
                      "SD-AB:A,B,B,B,B,B,B,B,B,B,B,B,A,A,A,A,A",
                      "SD-ALL0.5:0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5",
                      "SD-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SD-LyC-INALL:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-MIDALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SD-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-NONE:0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-ALL:1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-INALL:1,1,1,1,1,0,0,0,0,0,0,0",
                      "SDXL-MIDALL:1,0,0,0,0,1,0,0,0,0,0,0",
                      "SDXL-OUTALL:1,0,0,0,0,0,1,1,1,1,1,1",
                      "SDXL-LyC-NONE:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "SDXL-LyC-INALL:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-MIDALL:1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0",
                      "SDXL-LyC-OUTALL:1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-DBL-FRONT7:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-DBL-MID6:1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0",
                      "FLUX-DBL-TAIL6:1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1",
                      "FLUX-SINGLE-ALL:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
                      "FLUX-SINGLE-1to10:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-11to20:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-21to30:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0",
                      "FLUX-SINGLE-31to37:1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1",
                      "FLUX-ALL:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                  ]
              ],
              "block_vector": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "block weight vectors",
                      "default": "1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1",
                      "pysssss.autocomplete": false
                  }
              ],
              "bypass": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "category_filter",
              "lora_name",
              "inverse",
              "seed",
              "A",
              "B",
              "preset",
              "block_vector",
              "bypass"
          ]
      },
      "output": [
          "LBW_MODEL",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "lbw_model",
          "populated_vector"
      ],
      "name": "MakeLBW //Inspire",
      "display_name": "Make LoRA Block Weight",
      "description": "Instead of directly applying the LoRA Block Weight to the MODEL, it is generated in a separate LBW_MODEL form.",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": false
  },
  "ApplyLBW //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lbw_model": [
                  "LBW_MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "strength_model",
              "strength_clip",
              "lbw_model"
          ]
      },
      "output": [
          "MODEL",
          "CLIP"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP"
      ],
      "name": "ApplyLBW //Inspire",
      "display_name": "Apply LoRA Block Weight",
      "description": "Apply LBW_MODEL to MODEL and CLIP",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": false
  },
  "SaveLBW //Inspire": {
      "input": {
          "required": {
              "lbw_model": [
                  "LBW_MODEL"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "ComfyUI"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "lbw_model",
              "filename_prefix"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SaveLBW //Inspire",
      "display_name": "Save LoRA Block Weight",
      "description": "Save LBW_MODEL as a .lbw.safetensors file",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": true
  },
  "LoadLBW //Inspire": {
      "input": {
          "required": {
              "lbw_model": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "lbw_model"
          ]
      },
      "output": [
          "LBW_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LBW_MODEL"
      ],
      "name": "LoadLBW //Inspire",
      "display_name": "Load LoRA Block Weight",
      "description": "Load LBW_MODEL from .lbw.safetensors file",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/LoraBlockWeight",
      "output_node": false
  },
  "OpenPose_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "detect_hand": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "detect_body": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "detect_face": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "resolution_upscale_by": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.5,
                      "max": 100,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "detect_hand",
              "detect_body",
              "detect_face",
              "resolution_upscale_by"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "OpenPose_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "OpenPose Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "DWPreprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "detect_hand": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "detect_body": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "detect_face": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "resolution_upscale_by": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.5,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "bbox_detector": [
                  [
                      "yolox_l.torchscript.pt",
                      "yolox_l.onnx",
                      "yolo_nas_l_fp16.onnx",
                      "yolo_nas_m_fp16.onnx",
                      "yolo_nas_s_fp16.onnx"
                  ],
                  {
                      "default": "yolox_l.onnx"
                  }
              ],
              "pose_estimator": [
                  [
                      "dw-ll_ucoco_384_bs5.torchscript.pt",
                      "dw-ll_ucoco_384.onnx",
                      "dw-ll_ucoco.onnx"
                  ],
                  {
                      "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "detect_hand",
              "detect_body",
              "detect_face",
              "resolution_upscale_by",
              "bbox_detector",
              "pose_estimator"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "DWPreprocessor_Provider_for_SEGS //Inspire",
      "display_name": "DWPreprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "a": [
                  "FLOAT",
                  {
                      "default": 6.283185307179586,
                      "min": 0.0,
                      "max": 15.707963267948966,
                      "step": 0.05
                  }
              ],
              "bg_threshold": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a",
              "bg_threshold"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "MiDaS_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "MiDaS Depth Map Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "rm_nearest": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "rm_background": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 100,
                      "step": 0.1
                  }
              ]
          },
          "optional": {
              "boost": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "rm_nearest",
              "rm_background"
          ],
          "optional": [
              "boost"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "LeRes_DepthMap_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "LeReS Depth Map Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "Canny_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "low_threshold": [
                  "FLOAT",
                  {
                      "default": 0.4,
                      "min": 0.01,
                      "max": 0.99,
                      "step": 0.01
                  }
              ],
              "high_threshold": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0.01,
                      "max": 0.99,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "low_threshold",
              "high_threshold"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "Canny_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Canny Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "max_faces": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 50,
                      "step": 1
                  }
              ],
              "min_confidence": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.01,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "resolution_upscale_by": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.5,
                      "max": 100,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "max_faces",
              "min_confidence",
              "resolution_upscale_by"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "MediaPipe_FaceMesh_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "MediaPipe FaceMesh Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "HEDPreprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "safe": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "safe"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "HEDPreprocessor_Provider_for_SEGS //Inspire",
      "display_name": "HED Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "FakeScribblePreprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "safe": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "safe"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "FakeScribblePreprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Fake Scribble Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "AnimeLineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "AnimeLineArt Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "Manga2Anime_LineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Manga2Anime LineArt Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "LineArt_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "coarse": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "coarse"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "LineArt_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "LineArt Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "Color_Preprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "Color_Preprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Color Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "InpaintPreprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {},
          "optional": {
              "black_pixel_for_xinsir_cn": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "black_pixel_for_xinsir_cn"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "InpaintPreprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Inpaint Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "TilePreprocessor_Provider_for_SEGS //Inspire": {
      "input": {
          "required": {
              "pyrUp_iters": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pyrUp_iters"
          ]
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "TilePreprocessor_Provider_for_SEGS //Inspire",
      "display_name": "Tile Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire": {
      "input": {
          "required": {}
      },
      "input_order": {
          "required": []
      },
      "output": [
          "SEGS_PREPROCESSOR"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEGS_PREPROCESSOR"
      ],
      "name": "MeshGraphormerDepthMapPreprocessorProvider_for_SEGS //Inspire",
      "display_name": "MeshGraphormer Depth Map Preprocessor Provider (SEGS)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/SEGS/ControlNet",
      "output_node": false
  },
  "MediaPipeFaceMeshDetectorProvider //Inspire": {
      "input": {
          "required": {
              "max_faces": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 50,
                      "step": 1
                  }
              ],
              "face": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "mouth": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "left_eyebrow": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "left_eye": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "left_pupil": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "right_eyebrow": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "right_eye": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "right_pupil": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "max_faces",
              "face",
              "mouth",
              "left_eyebrow",
              "left_eye",
              "left_pupil",
              "right_eyebrow",
              "right_eye",
              "right_pupil"
          ]
      },
      "output": [
          "BBOX_DETECTOR",
          "SEGM_DETECTOR"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "BBOX_DETECTOR",
          "SEGM_DETECTOR"
      ],
      "name": "MediaPipeFaceMeshDetectorProvider //Inspire",
      "display_name": "MediaPipeFaceMesh Detector Provider",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Detector",
      "output_node": false
  },
  "KSampler //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "batch_seed_mode": [
                  [
                      "incremental",
                      "comfy",
                      "variation str inc:0.01",
                      "variation str inc:0.05"
                  ]
              ],
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "denoise",
              "noise_mode",
              "batch_seed_mode",
              "variation_seed",
              "variation_strength"
          ],
          "optional": [
              "variation_method",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSampler //Inspire",
      "display_name": "KSampler (inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/a1111_compat",
      "output_node": false
  },
  "KSamplerAdvanced //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5,
                      "round": 0.01
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "return_with_leftover_noise": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "batch_seed_mode": [
                  [
                      "incremental",
                      "comfy",
                      "variation str inc:0.01",
                      "variation str inc:0.05"
                  ]
              ],
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ],
              "noise_opt": [
                  "NOISE"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "add_noise",
              "noise_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "start_at_step",
              "end_at_step",
              "noise_mode",
              "return_with_leftover_noise",
              "batch_seed_mode",
              "variation_seed",
              "variation_strength"
          ],
          "optional": [
              "variation_method",
              "noise_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "KSamplerAdvanced //Inspire",
      "display_name": "KSamplerAdvanced (inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/a1111_compat",
      "output_node": false
  },
  "KSamplerPipe //Inspire": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "latent_image": [
                  "LATENT"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "batch_seed_mode": [
                  [
                      "incremental",
                      "comfy",
                      "variation str inc:0.01",
                      "variation str inc:0.05"
                  ]
              ],
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "latent_image",
              "denoise",
              "noise_mode",
              "batch_seed_mode",
              "variation_seed",
              "variation_strength"
          ],
          "optional": [
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "VAE"
      ],
      "name": "KSamplerPipe //Inspire",
      "display_name": "KSampler [pipe] (inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/a1111_compat",
      "output_node": false
  },
  "KSamplerAdvancedPipe //Inspire": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5,
                      "round": 0.01
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "latent_image": [
                  "LATENT"
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "return_with_leftover_noise": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "batch_seed_mode": [
                  [
                      "incremental",
                      "comfy",
                      "variation str inc:0.01",
                      "variation str inc:0.05"
                  ]
              ],
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "noise_opt": [
                  "NOISE"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "add_noise",
              "noise_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "latent_image",
              "start_at_step",
              "end_at_step",
              "noise_mode",
              "return_with_leftover_noise",
              "batch_seed_mode",
              "variation_seed",
              "variation_strength"
          ],
          "optional": [
              "noise_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "VAE"
      ],
      "name": "KSamplerAdvancedPipe //Inspire",
      "display_name": "KSamplerAdvanced [pipe] (inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/a1111_compat",
      "output_node": false
  },
  "RandomNoise //Inspire": {
      "input": {
          "required": {
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "batch_seed_mode": [
                  [
                      "incremental",
                      "comfy",
                      "variation str inc:0.01",
                      "variation str inc:0.05"
                  ]
              ],
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "noise_seed",
              "noise_mode",
              "batch_seed_mode",
              "variation_seed",
              "variation_strength"
          ],
          "optional": [
              "variation_method"
          ]
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "RandomNoise //Inspire",
      "display_name": "RandomNoise (inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/a1111_compat",
      "output_node": false
  },
  "HyperTile //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "tile_size": [
                  "INT",
                  {
                      "default": 256,
                      "min": 1,
                      "max": 2048
                  }
              ],
              "swap_size": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 128
                  }
              ],
              "max_depth": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10
                  }
              ],
              "scale_depth": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "tile_size",
              "swap_size",
              "max_depth",
              "scale_depth",
              "seed"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "HyperTile //Inspire",
      "display_name": "HyperTile (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/__for_testing",
      "output_node": false
  },
  "LoadPromptsFromDir //Inspire": {
      "input": {
          "required": {
              "prompt_dir": [
                  [
                      "example"
                  ]
              ]
          },
          "optional": {
              "reload": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "if file changed",
                      "label_off": "if value changed"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_dir"
          ],
          "optional": [
              "reload"
          ]
      },
      "output": [
          "ZIPPED_PROMPT"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "ZIPPED_PROMPT"
      ],
      "name": "LoadPromptsFromDir //Inspire",
      "display_name": "Load Prompts From Dir (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "LoadPromptsFromFile //Inspire": {
      "input": {
          "required": {
              "prompt_file": [
                  [
                      "example/prompt1.txt",
                      "example/prompt2.txt"
                  ]
              ]
          },
          "optional": {
              "text_data_opt": [
                  "STRING",
                  {
                      "defaultInput": true
                  }
              ],
              "reload": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "if file changed",
                      "label_off": "if value changed"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_file"
          ],
          "optional": [
              "text_data_opt",
              "reload"
          ]
      },
      "output": [
          "ZIPPED_PROMPT"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "ZIPPED_PROMPT"
      ],
      "name": "LoadPromptsFromFile //Inspire",
      "display_name": "Load Prompts From File (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "LoadSinglePromptFromFile //Inspire": {
      "input": {
          "required": {
              "prompt_file": [
                  [
                      "example/prompt1.txt",
                      "example/prompt2.txt"
                  ]
              ],
              "index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          },
          "optional": {
              "text_data_opt": [
                  "STRING",
                  {
                      "defaultInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_file",
              "index"
          ],
          "optional": [
              "text_data_opt"
          ]
      },
      "output": [
          "ZIPPED_PROMPT"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "ZIPPED_PROMPT"
      ],
      "name": "LoadSinglePromptFromFile //Inspire",
      "display_name": "Load Single Prompt From File (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "UnzipPrompt //Inspire": {
      "input": {
          "required": {
              "zipped_prompt": [
                  "ZIPPED_PROMPT"
              ]
          }
      },
      "input_order": {
          "required": [
              "zipped_prompt"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative",
          "name"
      ],
      "name": "UnzipPrompt //Inspire",
      "display_name": "Unzip Prompt (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "ZipPrompt //Inspire": {
      "input": {
          "required": {
              "positive": [
                  "STRING",
                  {
                      "forceInput": true,
                      "multiline": true
                  }
              ],
              "negative": [
                  "STRING",
                  {
                      "forceInput": true,
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "name_opt": [
                  "STRING",
                  {
                      "forceInput": true,
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative"
          ],
          "optional": [
              "name_opt"
          ]
      },
      "output": [
          "ZIPPED_PROMPT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "ZIPPED_PROMPT"
      ],
      "name": "ZipPrompt //Inspire",
      "display_name": "Zip Prompt (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "PromptExtractor //Inspire": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png"
                  ],
                  {
                      "image_upload": true
                  }
              ],
              "positive_id": [
                  "STRING",
                  {}
              ],
              "negative_id": [
                  "STRING",
                  {}
              ],
              "info": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "image",
              "positive_id",
              "negative_id",
              "info"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "PromptExtractor //Inspire",
      "display_name": "Prompt Extractor (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": true
  },
  "GlobalSeed //Inspire": {
      "input": {
          "required": {
              "value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "control_before_generate",
                      "label_off": "control_after_generate"
                  }
              ],
              "action": [
                  [
                      "fixed",
                      "increment",
                      "decrement",
                      "randomize",
                      "increment for each node",
                      "decrement for each node",
                      "randomize for each node"
                  ]
              ],
              "last_seed": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value",
              "mode",
              "action",
              "last_seed"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "GlobalSeed //Inspire",
      "display_name": "Global Seed (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": true
  },
  "GlobalSampler //Inspire": {
      "input": {
          "required": {
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "sampler_name",
              "scheduler"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "GlobalSampler //Inspire",
      "display_name": "Global Sampler (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": true
  },
  "BindImageListPromptList //Inspire": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "zipped_prompts": [
                  "ZIPPED_PROMPT"
              ],
              "default_positive": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "default positive"
                  }
              ],
              "default_negative": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "default negative"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "zipped_prompts",
              "default_positive",
              "default_negative"
          ]
      },
      "output": [
          "IMAGE",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          true
      ],
      "output_name": [
          "image",
          "positive",
          "negative",
          "prompt_label"
      ],
      "name": "BindImageListPromptList //Inspire",
      "display_name": "Bind [ImageList, PromptList] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "WildcardEncode //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "token_normalization": [
                  [
                      "none",
                      "mean",
                      "length",
                      "length+mean"
                  ]
              ],
              "weight_interpretation": [
                  [
                      "comfy",
                      "A1111",
                      "compel",
                      "comfy++",
                      "down_weight"
                  ],
                  {
                      "default": "comfy++"
                  }
              ],
              "wildcard_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Wildcard Prompt (User Input)"
                  }
              ],
              "populated_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Populated Prompt (Will be generated automatically)"
                  }
              ],
              "mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Populate",
                      "label_off": "Fixed"
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "token_normalization",
              "weight_interpretation",
              "wildcard_text",
              "populated_text",
              "mode",
              "Select to add LoRA",
              "Select to add Wildcard",
              "seed"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "conditioning",
          "populated_text"
      ],
      "name": "WildcardEncode //Inspire",
      "display_name": "Wildcard Encode (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "PromptBuilder //Inspire": {
      "input": {
          "required": {
              "category": [
                  [
                      "Angle of View",
                      "Artists",
                      "Character Types",
                      "Colors",
                      "Composition",
                      "Composition Form",
                      "Lighting",
                      "Negative",
                      "Picture Effect",
                      "Picture Quality",
                      "Setting",
                      "Shot",
                      "Style",
                      "#PLACEHOLDER"
                  ]
              ],
              "preset": [
                  [
                      "#PRESET"
                  ]
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "category",
              "preset",
              "text"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "STRING"
      ],
      "name": "PromptBuilder //Inspire",
      "display_name": "Prompt Builder (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "SeedExplorer //Inspire": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "seed_prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "pysssss.autocomplete": false
                  }
              ],
              "enable_additional": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "true",
                      "label_off": "false"
                  }
              ],
              "additional_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "additional_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "initial_batch_seed_mode": [
                  [
                      "incremental",
                      "comfy"
                  ]
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ],
              "model": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "seed_prompt",
              "enable_additional",
              "additional_seed",
              "additional_strength",
              "noise_mode",
              "initial_batch_seed_mode"
          ],
          "optional": [
              "variation_method",
              "model"
          ]
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "SeedExplorer //Inspire",
      "display_name": "Seed Explorer (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "ListCounter //Inspire": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "base_value": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "signal",
              "base_value"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "ListCounter //Inspire",
      "display_name": "List Counter (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "CLIPTextEncodeWithWeight //Inspire": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "clip": [
                  "CLIP"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "add_weight": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "clip",
              "strength",
              "add_weight"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "CLIPTextEncodeWithWeight //Inspire",
      "display_name": "CLIPTextEncodeWithWeight (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "RandomGeneratorForList //Inspire": {
      "input": {
          "required": {
              "signal": [
                  "*"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "signal",
              "seed"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "*",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "signal",
          "random_value"
      ],
      "name": "RandomGeneratorForList //Inspire",
      "display_name": "Random Generator for List (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "MakeBasicPipe //Inspire": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "ckpt_key_opt": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "If empty, use 'ckpt_name' as the key."
                  }
              ],
              "positive_wildcard_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Positive Prompt (User Input)"
                  }
              ],
              "negative_wildcard_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Negative Prompt (User Input)"
                  }
              ],
              "Add selection to": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Positive",
                      "label_off": "Negative"
                  }
              ],
              "Select to add LoRA": [
                  [
                      "Select the LoRA to add to the text",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "Select to add Wildcard": [
                  [
                      "Select the Wildcard to add to the text"
                  ]
              ],
              "wildcard_mode": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "Populate",
                      "label_off": "Fixed"
                  }
              ],
              "positive_populated_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Populated Positive Prompt (Will be generated automatically)"
                  }
              ],
              "negative_populated_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "Populated Negative Prompt (Will be generated automatically)"
                  }
              ],
              "token_normalization": [
                  [
                      "none",
                      "mean",
                      "length",
                      "length+mean"
                  ]
              ],
              "weight_interpretation": [
                  [
                      "comfy",
                      "A1111",
                      "compel",
                      "comfy++",
                      "down_weight"
                  ],
                  {
                      "default": "comfy++"
                  }
              ],
              "stop_at_clip_layer": [
                  "INT",
                  {
                      "default": -2,
                      "min": -24,
                      "max": -1,
                      "step": 1
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          },
          "optional": {
              "vae_opt": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "ckpt_key_opt",
              "positive_wildcard_text",
              "negative_wildcard_text",
              "Add selection to",
              "Select to add LoRA",
              "Select to add Wildcard",
              "wildcard_mode",
              "positive_populated_text",
              "negative_populated_text",
              "token_normalization",
              "weight_interpretation",
              "stop_at_clip_layer",
              "seed"
          ],
          "optional": [
              "vae_opt"
          ]
      },
      "output": [
          "BASIC_PIPE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "basic_pipe",
          "cache_key"
      ],
      "name": "MakeBasicPipe //Inspire",
      "display_name": "Make Basic Pipe (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "RemoveControlNet //Inspire": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "RemoveControlNet //Inspire",
      "display_name": "Remove ControlNet (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "RemoveControlNetFromRegionalPrompts //Inspire": {
      "input": {
          "required": {
              "regional_prompts": [
                  "REGIONAL_PROMPTS"
              ]
          }
      },
      "input_order": {
          "required": [
              "regional_prompts"
          ]
      },
      "output": [
          "REGIONAL_PROMPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_PROMPTS"
      ],
      "name": "RemoveControlNetFromRegionalPrompts //Inspire",
      "display_name": "Remove ControlNet [RegionalPrompts] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "CompositeNoise //Inspire": {
      "input": {
          "required": {
              "destination": [
                  "NOISE"
              ],
              "source": [
                  "NOISE"
              ],
              "mode": [
                  [
                      "center",
                      "left-top",
                      "right-top",
                      "left-bottom",
                      "right-bottom",
                      "xy"
                  ]
              ],
              "x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "destination",
              "source",
              "mode",
              "x",
              "y"
          ]
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "CompositeNoise //Inspire",
      "display_name": "Composite Noise (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Prompt",
      "output_node": false
  },
  "LoadImagesFromDir //Inspire": {
      "input": {
          "required": {
              "directory": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1,
                      "step": 1
                  }
              ],
              "load_always": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "directory"
          ],
          "optional": [
              "image_load_cap",
              "start_index",
              "load_always"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "name": "LoadImagesFromDir //Inspire",
      "display_name": "Load Image Batch From Dir (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "image",
      "output_node": false
  },
  "LoadImageListFromDir //Inspire": {
      "input": {
          "required": {
              "directory": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "load_always": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enabled",
                      "label_off": "disabled"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "directory"
          ],
          "optional": [
              "image_load_cap",
              "start_index",
              "load_always"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          true
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "FILE PATH"
      ],
      "name": "LoadImageListFromDir //Inspire",
      "display_name": "Load Image List From Dir (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "image",
      "output_node": false
  },
  "LoadImage //Inspire": {
      "input": {
          "required": {
              "image": [
                  [
                      "example.png",
                      "#DATA"
                  ],
                  {
                      "image_upload": true
                  }
              ],
              "image_data": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "image_data"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "LoadImage //Inspire",
      "display_name": "Load Image (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/image",
      "output_node": false
  },
  "ChangeImageBatchSize //Inspire": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "mode": [
                  [
                      "simple"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "batch_size",
              "mode"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ChangeImageBatchSize //Inspire",
      "display_name": "Change Image Batch Size (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "ChangeLatentBatchSize //Inspire": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "mode": [
                  [
                      "simple"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "batch_size",
              "mode"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "ChangeLatentBatchSize //Inspire",
      "display_name": "Change Latent Batch Size (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "ImageBatchSplitter //Inspire": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "split_count": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 50,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "split_count"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageBatchSplitter //Inspire",
      "display_name": "Image Batch Splitter (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "LatentBatchSplitter //Inspire": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "split_count": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 50,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "split_count"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "LatentBatchSplitter //Inspire",
      "display_name": "Latent Batch Splitter (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "ColorMapToMasks //Inspire": {
      "input": {
          "required": {
              "color_map": [
                  "IMAGE"
              ],
              "min_pixels": [
                  "INT",
                  {
                      "default": 500,
                      "min": 1,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ],
              "max_count": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "color_map",
              "min_pixels",
              "max_count"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ColorMapToMasks //Inspire",
      "display_name": "Color Map To Masks (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "SelectNthMask //Inspire": {
      "input": {
          "required": {
              "masks": [
                  "MASK"
              ],
              "idx": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "masks",
              "idx"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "SelectNthMask //Inspire",
      "display_name": "Select Nth Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "RegionalPromptSimple //Inspire": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "mask": [
                  "MASK"
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "wildcard_prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "wildcard prompt"
                  }
              ],
              "controlnet_in_pipe": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Keep",
                      "label_off": "Override"
                  }
              ],
              "sigma_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "mask",
              "cfg",
              "sampler_name",
              "scheduler",
              "wildcard_prompt",
              "controlnet_in_pipe",
              "sigma_factor"
          ],
          "optional": [
              "variation_seed",
              "variation_strength",
              "variation_method",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "REGIONAL_PROMPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_PROMPTS"
      ],
      "name": "RegionalPromptSimple //Inspire",
      "display_name": "Regional Prompt Simple (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalPromptColorMask //Inspire": {
      "input": {
          "required": {
              "basic_pipe": [
                  "BASIC_PIPE"
              ],
              "color_mask": [
                  "IMAGE"
              ],
              "mask_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "wildcard_prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "placeholder": "wildcard prompt"
                  }
              ],
              "controlnet_in_pipe": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "Keep",
                      "label_off": "Override"
                  }
              ],
              "sigma_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "variation_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "variation_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "basic_pipe",
              "color_mask",
              "mask_color",
              "cfg",
              "sampler_name",
              "scheduler",
              "wildcard_prompt",
              "controlnet_in_pipe",
              "sigma_factor"
          ],
          "optional": [
              "variation_seed",
              "variation_strength",
              "variation_method",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "REGIONAL_PROMPTS",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "REGIONAL_PROMPTS",
          "MASK"
      ],
      "name": "RegionalPromptColorMask //Inspire",
      "display_name": "Regional Prompt By Color Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalConditioningSimple //Inspire": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "mask": [
                  "MASK"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ],
              "prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "prompt"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "mask",
              "strength",
              "set_cond_area",
              "prompt"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "RegionalConditioningSimple //Inspire",
      "display_name": "Regional Conditioning Simple (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalConditioningColorMask //Inspire": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "color_mask": [
                  "IMAGE"
              ],
              "mask_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ],
              "prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "placeholder": "prompt"
                  }
              ]
          },
          "optional": {
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "color_mask",
              "mask_color",
              "strength",
              "set_cond_area",
              "prompt"
          ],
          "optional": [
              "dilation"
          ]
      },
      "output": [
          "CONDITIONING",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "MASK"
      ],
      "name": "RegionalConditioningColorMask //Inspire",
      "display_name": "Regional Conditioning By Color Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalIPAdapterMask //Inspire": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "noise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "unfold_batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "faceid_v2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "weight_v2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "neg_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "image",
              "weight",
              "noise",
              "weight_type",
              "start_at",
              "end_at",
              "unfold_batch"
          ],
          "optional": [
              "faceid_v2",
              "weight_v2",
              "combine_embeds",
              "neg_image"
          ]
      },
      "output": [
          "REGIONAL_IPADAPTER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_IPADAPTER"
      ],
      "name": "RegionalIPAdapterMask //Inspire",
      "display_name": "Regional IPAdapter Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalIPAdapterColorMask //Inspire": {
      "input": {
          "required": {
              "color_mask": [
                  "IMAGE"
              ],
              "mask_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "noise": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "unfold_batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "faceid_v2": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "weight_v2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "neg_image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "color_mask",
              "mask_color",
              "image",
              "weight",
              "noise",
              "weight_type",
              "start_at",
              "end_at",
              "unfold_batch"
          ],
          "optional": [
              "faceid_v2",
              "weight_v2",
              "combine_embeds",
              "neg_image"
          ]
      },
      "output": [
          "REGIONAL_IPADAPTER",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "REGIONAL_IPADAPTER",
          "MASK"
      ],
      "name": "RegionalIPAdapterColorMask //Inspire",
      "display_name": "Regional IPAdapter By Color Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalIPAdapterEncodedMask //Inspire": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "embeds": [
                  "EMBEDS"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "unfold_batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "neg_embeds": [
                  "EMBEDS"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "embeds",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "unfold_batch"
          ],
          "optional": [
              "neg_embeds"
          ]
      },
      "output": [
          "REGIONAL_IPADAPTER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "REGIONAL_IPADAPTER"
      ],
      "name": "RegionalIPAdapterEncodedMask //Inspire",
      "display_name": "Regional IPAdapter Encoded Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalIPAdapterEncodedColorMask //Inspire": {
      "input": {
          "required": {
              "color_mask": [
                  "IMAGE"
              ],
              "mask_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "embeds": [
                  "EMBEDS"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "unfold_batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "neg_embeds": [
                  "EMBEDS"
              ]
          }
      },
      "input_order": {
          "required": [
              "color_mask",
              "mask_color",
              "embeds",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "unfold_batch"
          ],
          "optional": [
              "neg_embeds"
          ]
      },
      "output": [
          "REGIONAL_IPADAPTER",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "REGIONAL_IPADAPTER",
          "MASK"
      ],
      "name": "RegionalIPAdapterEncodedColorMask //Inspire",
      "display_name": "Regional IPAdapter Encoded By Color Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalSeedExplorerMask //Inspire": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "noise": [
                  "NOISE"
              ],
              "seed_prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "pysssss.autocomplete": false
                  }
              ],
              "enable_additional": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "true",
                      "label_off": "false"
                  }
              ],
              "additional_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "additional_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "noise",
              "seed_prompt",
              "enable_additional",
              "additional_seed",
              "additional_strength",
              "noise_mode"
          ],
          "optional": [
              "variation_method"
          ]
      },
      "output": [
          "NOISE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE"
      ],
      "name": "RegionalSeedExplorerMask //Inspire",
      "display_name": "Regional Seed Explorer By Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalSeedExplorerColorMask //Inspire": {
      "input": {
          "required": {
              "color_mask": [
                  "IMAGE"
              ],
              "mask_color": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#FFFFFF"
                  }
              ],
              "noise": [
                  "NOISE"
              ],
              "seed_prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "dynamicPrompts": false,
                      "pysssss.autocomplete": false
                  }
              ],
              "enable_additional": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "true",
                      "label_off": "false"
                  }
              ],
              "additional_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "additional_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ]
          },
          "optional": {
              "variation_method": [
                  [
                      "linear",
                      "slerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "color_mask",
              "mask_color",
              "noise",
              "seed_prompt",
              "enable_additional",
              "additional_seed",
              "additional_strength",
              "noise_mode"
          ],
          "optional": [
              "variation_method"
          ]
      },
      "output": [
          "NOISE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "NOISE",
          "MASK"
      ],
      "name": "RegionalSeedExplorerColorMask //Inspire",
      "display_name": "Regional Seed Explorer By Color Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "ToIPAdapterPipe //Inspire": {
      "input": {
          "required": {
              "ipadapter": [
                  "IPADAPTER"
              ],
              "model": [
                  "MODEL"
              ]
          },
          "optional": {
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "insightface": [
                  "INSIGHTFACE"
              ]
          }
      },
      "input_order": {
          "required": [
              "ipadapter",
              "model"
          ],
          "optional": [
              "clip_vision",
              "insightface"
          ]
      },
      "output": [
          "IPADAPTER_PIPE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IPADAPTER_PIPE"
      ],
      "name": "ToIPAdapterPipe //Inspire",
      "display_name": "ToIPAdapterPipe (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "FromIPAdapterPipe //Inspire": {
      "input": {
          "required": {
              "ipadapter_pipe": [
                  "IPADAPTER_PIPE"
              ]
          }
      },
      "input_order": {
          "required": [
              "ipadapter_pipe"
          ]
      },
      "output": [
          "IPADAPTER",
          "MODEL",
          "CLIP_VISION",
          "INSIGHTFACE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "ipadapter",
          "model",
          "clip_vision",
          "insight_face"
      ],
      "name": "FromIPAdapterPipe //Inspire",
      "display_name": "FromIPAdapterPipe (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "ApplyRegionalIPAdapters //Inspire": {
      "input": {
          "required": {
              "ipadapter_pipe": [
                  "IPADAPTER_PIPE"
              ],
              "regional_ipadapter1": [
                  "REGIONAL_IPADAPTER"
              ]
          }
      },
      "input_order": {
          "required": [
              "ipadapter_pipe",
              "regional_ipadapter1"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ApplyRegionalIPAdapters //Inspire",
      "display_name": "Apply Regional IPAdapters (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "RegionalCFG //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "mask"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "RegionalCFG //Inspire",
      "display_name": "Regional CFG (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "ColorMaskToDepthMask //Inspire": {
      "input": {
          "required": {
              "color_mask": [
                  "IMAGE"
              ],
              "spec": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "#FF0000:1.0\n#000000:1.0"
                  }
              ],
              "base_value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0
                  }
              ],
              "dilation": [
                  "INT",
                  {
                      "default": 0,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "flatten_method": [
                  [
                      "override",
                      "sum",
                      "max"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "color_mask",
              "spec",
              "base_value",
              "dilation",
              "flatten_method"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ColorMaskToDepthMask //Inspire",
      "display_name": "Color Mask To Depth Mask (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Regional",
      "output_node": false
  },
  "KSamplerProgress //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "interval": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "omit_start_latent": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ],
              "omit_final_latent": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ]
          },
          "optional": {
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "denoise",
              "noise_mode",
              "interval",
              "omit_start_latent",
              "omit_final_latent"
          ],
          "optional": [
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "latent",
          "progress_latent"
      ],
      "name": "KSamplerProgress //Inspire",
      "display_name": "KSampler Progress (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/analysis",
      "output_node": false
  },
  "KSamplerAdvancedProgress //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "add_noise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "noise_seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5,
                      "round": 0.01
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic",
                      "AYS SDXL",
                      "AYS SD1",
                      "AYS SVD",
                      "GITS[coeff=1.2]"
                  ]
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "start_at_step": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_at_step": [
                  "INT",
                  {
                      "default": 10000,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "noise_mode": [
                  [
                      "GPU(=A1111)",
                      "CPU"
                  ]
              ],
              "return_with_leftover_noise": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ],
              "interval": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "omit_start_latent": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ],
              "omit_final_latent": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "label_on": "True",
                      "label_off": "False"
                  }
              ]
          },
          "optional": {
              "prev_progress_latent_opt": [
                  "LATENT"
              ],
              "scheduler_func_opt": [
                  "SCHEDULER_FUNC"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "add_noise",
              "noise_seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "positive",
              "negative",
              "latent_image",
              "start_at_step",
              "end_at_step",
              "noise_mode",
              "return_with_leftover_noise",
              "interval",
              "omit_start_latent",
              "omit_final_latent"
          ],
          "optional": [
              "prev_progress_latent_opt",
              "scheduler_func_opt"
          ]
      },
      "output": [
          "LATENT",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "latent",
          "progress_latent"
      ],
      "name": "KSamplerAdvancedProgress //Inspire",
      "display_name": "KSampler Advanced Progress (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/analysis",
      "output_node": false
  },
  "ScheduledCFGGuider //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "from_cfg": [
                  "FLOAT",
                  {
                      "default": 6.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "to_cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "schedule": [
                  [
                      "linear",
                      "log",
                      "exp",
                      "cos"
                  ],
                  {
                      "default": "log"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "sigmas",
              "from_cfg",
              "to_cfg",
              "schedule"
          ]
      },
      "output": [
          "GUIDER",
          "SIGMAS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "GUIDER",
          "SIGMAS"
      ],
      "name": "ScheduledCFGGuider //Inspire",
      "display_name": "Scheduled CFGGuider (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "sampling/custom_sampling/guiders",
      "output_node": false
  },
  "ScheduledPerpNegCFGGuider //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "empty_conditioning": [
                  "CONDITIONING"
              ],
              "neg_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "sigmas": [
                  "SIGMAS"
              ],
              "from_cfg": [
                  "FLOAT",
                  {
                      "default": 6.5,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "to_cfg": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ],
              "schedule": [
                  [
                      "linear",
                      "log",
                      "exp",
                      "cos"
                  ],
                  {
                      "default": "log"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "empty_conditioning",
              "neg_scale",
              "sigmas",
              "from_cfg",
              "to_cfg",
              "schedule"
          ]
      },
      "output": [
          "GUIDER",
          "SIGMAS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "GUIDER",
          "SIGMAS"
      ],
      "name": "ScheduledPerpNegCFGGuider //Inspire",
      "display_name": "Scheduled PerpNeg CFGGuider (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "sampling/custom_sampling/guiders",
      "output_node": false
  },
  "CacheBackendData //Inspire": {
      "input": {
          "required": {
              "key": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
                  }
              ],
              "tag": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Tag: short description"
                  }
              ],
              "data": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key",
              "tag",
              "data"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "data opt"
      ],
      "name": "CacheBackendData //Inspire",
      "display_name": "Cache Backend Data (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "CacheBackendDataNumberKey //Inspire": {
      "input": {
          "required": {
              "key": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "tag": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Tag: short description"
                  }
              ],
              "data": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key",
              "tag",
              "data"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "data opt"
      ],
      "name": "CacheBackendDataNumberKey //Inspire",
      "display_name": "Cache Backend Data [NumberKey] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "CacheBackendDataList //Inspire": {
      "input": {
          "required": {
              "key": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
                  }
              ],
              "tag": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Tag: short description"
                  }
              ],
              "data": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key",
              "tag",
              "data"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "data opt"
      ],
      "name": "CacheBackendDataList //Inspire",
      "display_name": "Cache Backend Data List (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "CacheBackendDataNumberKeyList //Inspire": {
      "input": {
          "required": {
              "key": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "tag": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Tag: short description"
                  }
              ],
              "data": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key",
              "tag",
              "data"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "data opt"
      ],
      "name": "CacheBackendDataNumberKeyList //Inspire",
      "display_name": "Cache Backend Data List [NumberKey] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "RetrieveBackendData //Inspire": {
      "input": {
          "required": {
              "key": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Input data key (e.g. 'model a', 'chunli lora', 'girl latent 3', ...)"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "key"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "data"
      ],
      "name": "RetrieveBackendData //Inspire",
      "display_name": "Retrieve Backend Data (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": false
  },
  "RetrieveBackendDataNumberKey //Inspire": {
      "input": {
          "required": {
              "key": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "key"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "data"
      ],
      "name": "RetrieveBackendDataNumberKey //Inspire",
      "display_name": "Retrieve Backend Data [NumberKey] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": false
  },
  "RemoveBackendData //Inspire": {
      "input": {
          "required": {
              "key": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "Input data key ('*' = clear all)"
                  }
              ]
          },
          "optional": {
              "signal_opt": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key"
          ],
          "optional": [
              "signal_opt"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal"
      ],
      "name": "RemoveBackendData //Inspire",
      "display_name": "Remove Backend Data (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "RemoveBackendDataNumberKey //Inspire": {
      "input": {
          "required": {
              "key": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          },
          "optional": {
              "signal_opt": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "key"
          ],
          "optional": [
              "signal_opt"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "signal"
      ],
      "name": "RemoveBackendDataNumberKey //Inspire",
      "display_name": "Remove Backend Data [NumberKey] (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "ShowCachedInfo //Inspire": {
      "input": {
          "required": {
              "cache_info": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "key": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "cache_info",
              "key"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "ShowCachedInfo //Inspire",
      "display_name": "Show Cached Info (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": true
  },
  "CheckpointLoaderSimpleShared //Inspire": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "key_opt": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "If empty, use 'ckpt_name' as the key."
                  }
              ]
          },
          "optional": {
              "mode": [
                  [
                      "Auto",
                      "Override Cache",
                      "Read Only"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "key_opt"
          ],
          "optional": [
              "mode"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "model",
          "clip",
          "vae",
          "cache key"
      ],
      "name": "CheckpointLoaderSimpleShared //Inspire",
      "display_name": "Shared Checkpoint Loader (Inspire)",
      "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": false,
      "output_tooltips": [
          "The model used for denoising latents.",
          "The CLIP model used for encoding text prompts.",
          "The VAE model used for encoding and decoding images to and from latent space."
      ]
  },
  "StableCascade_CheckpointLoader //Inspire": {
      "input": {
          "required": {
              "stage_b": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ],
                  {
                      "default": "CRM.pth"
                  }
              ],
              "key_opt_b": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "If empty, use 'stage_b' as the key."
                  }
              ],
              "stage_c": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ],
                  {
                      "default": "CRM.pth"
                  }
              ],
              "key_opt_c": [
                  "STRING",
                  {
                      "multiline": false,
                      "placeholder": "If empty, use 'stage_c' as the key."
                  }
              ],
              "cache_mode": [
                  [
                      "none",
                      "stage_b",
                      "stage_c",
                      "all"
                  ],
                  {
                      "default": "none"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "stage_b",
              "key_opt_b",
              "stage_c",
              "key_opt_c",
              "cache_mode"
          ]
      },
      "output": [
          "MODEL",
          "VAE",
          "MODEL",
          "VAE",
          "CLIP_VISION",
          "CLIP",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "b_model",
          "b_vae",
          "c_model",
          "c_vae",
          "c_clip_vision",
          "clip",
          "key_b",
          "key_c"
      ],
      "name": "StableCascade_CheckpointLoader //Inspire",
      "display_name": "Stable Cascade Checkpoint Loader (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": false
  },
  "IsCached //Inspire": {
      "input": {
          "required": {
              "key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "key"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "IsCached //Inspire",
      "display_name": "Is Cached (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Backend",
      "output_node": false
  },
  "FloatRange //Inspire": {
      "input": {
          "required": {
              "start": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 1e-09
                  }
              ],
              "stop": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 1e-09
                  }
              ],
              "step": [
                  "FLOAT",
                  {
                      "default": 0.01,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 1e-09
                  }
              ],
              "limit": [
                  "INT",
                  {
                      "default": 100,
                      "min": 2,
                      "max": 4096,
                      "step": 1
                  }
              ],
              "ensure_end": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "label_on": "enable",
                      "label_off": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start",
              "stop",
              "step",
              "limit",
              "ensure_end"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "FloatRange //Inspire",
      "display_name": "Float Range (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/List",
      "output_node": false
  },
  "WorklistToItemList //Inspire": {
      "input": {
          "required": {
              "item": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "item"
          ]
      },
      "output": [
          "ITEM_LIST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "item_list"
      ],
      "name": "WorklistToItemList //Inspire",
      "display_name": "Worklist To Item List (Inspire)",
      "description": "The list in ComfyUI allows for repeated execution of a sub-workflow.\nThis groups these repetitions (a.k.a. list) into a single ITEM_LIST output.\nITEM_LIST can then be used in ForeachList.",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/List",
      "output_node": false
  },
  "ForeachListBegin //Inspire": {
      "input": {
          "required": {
              "item_list": [
                  "ITEM_LIST",
                  {
                      "tooltip": "ITEM_LIST containing items to be processed iteratively."
                  }
              ]
          },
          "optional": {
              "initial_input": [
                  "*",
                  {
                      "tooltip": "If initial_input is omitted, the first item in item_list is used as the initial value, and the processing starts from the second item in item_list."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "item_list"
          ],
          "optional": [
              "initial_input"
          ]
      },
      "output": [
          "FOREACH_LIST_CONTROL",
          "ITEM_LIST",
          "*",
          "*"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "flow_control",
          "remained_list",
          "item",
          "intermediate_output"
      ],
      "name": "ForeachListBegin //Inspire",
      "display_name": "\u25b6Foreach List (Inspire)",
      "description": "A starting node for performing iterative tasks by retrieving items one by one from the ITEM_LIST.\nGenerate a new intermediate_output using item and intermediate_output as inputs, then connect it to ForeachListEnd.\nNOTE:If initial_input is omitted, the first item in item_list is used as the initial value, and the processing starts from the second item in item_list.",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/List",
      "output_node": false,
      "output_tooltips": [
          "Pass ForeachListEnd as is to indicate the end of the iteration.",
          "Output the ITEM_LIST containing the remaining items during the iteration, passing ForeachListEnd as is to indicate the end of the iteration.",
          "Output the current item during the iteration.",
          "Output the intermediate results during the iteration."
      ]
  },
  "ForeachListEnd //Inspire": {
      "input": {
          "required": {
              "flow_control": [
                  "FOREACH_LIST_CONTROL",
                  {
                      "rawLink": true,
                      "tooltip": "Directly connect the output of ForeachListBegin, the starting node of the iteration."
                  }
              ],
              "remained_list": [
                  "ITEM_LIST",
                  {
                      "tooltip": "Directly connect the output of ForeachListBegin, the starting node of the iteration."
                  }
              ],
              "intermediate_output": [
                  "*",
                  {
                      "tooltip": "Connect the intermediate outputs processed within the iteration here."
                  }
              ]
          },
          "hidden": {
              "dynprompt": "DYNPROMPT",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "flow_control",
              "remained_list",
              "intermediate_output"
          ],
          "hidden": [
              "dynprompt",
              "unique_id"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "result"
      ],
      "name": "ForeachListEnd //Inspire",
      "display_name": "Foreach List\u25c0 (Inspire)",
      "description": "A end node for performing iterative tasks by retrieving items one by one from the ITEM_LIST.\nNOTE:Directly connect the outputs of ForeachListBegin to 'flow_control' and 'remained_list'.",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/List",
      "output_node": false,
      "output_tooltips": [
          "This is the final output value."
      ]
  },
  "ConcatConditioningsWithMultiplier //Inspire": {
      "input": {
          "required": {
              "conditioning1": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "multiplier1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning1"
          ],
          "optional": [
              "multiplier1"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConcatConditioningsWithMultiplier //Inspire",
      "display_name": "Concat Conditionings with Multiplier (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/__for_testing",
      "output_node": false
  },
  "ConditioningUpscale //Inspire": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "scalar": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 100,
                      "step": 0.5
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "scalar"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningUpscale //Inspire",
      "display_name": "Conditioning Upscale (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/conditioning",
      "output_node": false
  },
  "ConditioningStretch //Inspire": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "resolutionX": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "resolutionY": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "newWidth": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "newHeight": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "resolutionX",
              "resolutionY",
              "newWidth",
              "newHeight"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ConditioningStretch //Inspire",
      "display_name": "Conditioning Stretch (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/conditioning",
      "output_node": false
  },
  "IPAdapterModelHelper //Inspire": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "preset": [
                  [
                      "SD1.5",
                      "SD1.5 Light v11",
                      "SD1.5 Light",
                      "SD1.5 Plus",
                      "SD1.5 Plus Face",
                      "SD1.5 Full Face",
                      "SD1.5 ViT-G",
                      "SDXL",
                      "SDXL ViT-H",
                      "SDXL Plus ViT-H",
                      "SDXL Plus Face ViT-H",
                      "Kolors Plus",
                      "SD1.5 FaceID",
                      "SD1.5 FaceID Plus v2",
                      "SD1.5 FaceID Plus",
                      "SD1.5 FaceID Portrait v11",
                      "SD1.5 FaceID Portrait",
                      "SDXL FaceID",
                      "SDXL FaceID Portrait",
                      "SDXL FaceID Portrait unnorm",
                      "Kolors FaceID Plus",
                      "SD1.5 Plus Composition",
                      "SDXL Plus Composition"
                  ]
              ],
              "lora_strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "lora_strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "insightface_provider": [
                  [
                      "CPU",
                      "CUDA",
                      "ROCM"
                  ]
              ],
              "cache_mode": [
                  [
                      "insightface only",
                      "clip_vision only",
                      "all",
                      "none"
                  ],
                  {
                      "default": "insightface only"
                  }
              ]
          },
          "optional": {
              "clip": [
                  "CLIP"
              ],
              "insightface_model_name": [
                  [
                      "buffalo_l",
                      "antelopev2"
                  ]
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "model",
              "preset",
              "lora_strength_model",
              "lora_strength_clip",
              "insightface_provider",
              "cache_mode"
          ],
          "optional": [
              "clip",
              "insightface_model_name"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IPADAPTER_PIPE",
          "IPADAPTER",
          "CLIP_VISION",
          "INSIGHTFACE",
          "MODEL",
          "CLIP",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IPADAPTER_PIPE",
          "IPADAPTER",
          "CLIP_VISION",
          "INSIGHTFACE",
          "MODEL",
          "CLIP",
          "insightface_cache_key",
          "clip_vision_cache_key"
      ],
      "name": "IPAdapterModelHelper //Inspire",
      "display_name": "IPAdapter Model Helper (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/models",
      "output_node": false
  },
  "RGB_HexToHSV //Inspire": {
      "input": {
          "required": {
              "rgb_hex": [
                  "STRING",
                  {
                      "defaultInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "rgb_hex"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "hue",
          "saturation",
          "value"
      ],
      "name": "RGB_HexToHSV //Inspire",
      "display_name": "RGB Hex To HSV (Inspire)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Inspire-Pack",
      "category": "InspirePack/Util",
      "output_node": false
  },
  "ADE_AnimateDiffLoRALoader": {
      "input": {
          "required": {
              "name": [
                  []
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_motion_lora": [
                  "MOTION_LORA"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 30
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "name",
              "strength"
          ],
          "optional": [
              "prev_motion_lora"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MOTION_LORA"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MOTION_LORA"
      ],
      "name": "ADE_AnimateDiffLoRALoader",
      "display_name": "Load AnimateDiff LoRA \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "output_node": false
  },
  "ADE_AnimateDiffSamplingSettings": {
      "input": {
          "required": {
              "batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "noise_type": [
                  [
                      "default",
                      "constant",
                      "empty",
                      "repeated_context",
                      "FreeNoise"
                  ]
              ],
              "seed_gen": [
                  [
                      "comfy",
                      "comfy [gpu]",
                      "auto1111",
                      "auto1111 [gpu]"
                  ]
              ],
              "seed_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          },
          "optional": {
              "noise_layers": [
                  "NOISE_LAYERS"
              ],
              "iteration_opts": [
                  "ITERATION_OPTS"
              ],
              "seed_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "forceInput": true
                  }
              ],
              "adapt_denoise_steps": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "custom_cfg": [
                  "CUSTOM_CFG"
              ],
              "sigma_schedule": [
                  "SIGMA_SCHEDULE"
              ],
              "image_inject": [
                  "IMAGE_INJECT"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_offset",
              "noise_type",
              "seed_gen",
              "seed_offset"
          ],
          "optional": [
              "noise_layers",
              "iteration_opts",
              "seed_override",
              "adapt_denoise_steps",
              "custom_cfg",
              "sigma_schedule",
              "image_inject"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SAMPLE_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "settings"
      ],
      "name": "ADE_AnimateDiffSamplingSettings",
      "display_name": "Sample Settings \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "output_node": false
  },
  "ADE_AnimateDiffKeyframe": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent"
          ],
          "optional": [
              "prev_ad_keyframes",
              "scale_multival",
              "effect_multival",
              "inherit_missing",
              "guarantee_steps"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "AD_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_KEYFRAMES"
      ],
      "name": "ADE_AnimateDiffKeyframe",
      "display_name": "AnimateDiff Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "output_node": false
  },
  "ADE_MultivalDynamic": {
      "input": {
          "required": {
              "float_val": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_val"
          ],
          "optional": [
              "mask_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MULTIVAL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MULTIVAL"
      ],
      "name": "ADE_MultivalDynamic",
      "display_name": "Multival \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/multival",
      "output_node": false
  },
  "ADE_MultivalDynamicFloatInput": {
      "input": {
          "required": {
              "float_val": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001,
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_val"
          ],
          "optional": [
              "mask_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MULTIVAL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MULTIVAL"
      ],
      "name": "ADE_MultivalDynamicFloatInput",
      "display_name": "Multival [Float List] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/multival",
      "output_node": false
  },
  "ADE_MultivalDynamicFloats": {
      "input": {
          "required": {
              "floats": [
                  "FLOATS",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "floats"
          ],
          "optional": [
              "mask_optional"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MULTIVAL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MULTIVAL"
      ],
      "name": "ADE_MultivalDynamicFloats",
      "display_name": "Multival [Floats] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/multival",
      "output_node": false
  },
  "ADE_MultivalScaledMask": {
      "input": {
          "required": {
              "min_float_val": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "max_float_val": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "mask": [
                  "MASK"
              ]
          },
          "optional": {
              "scaling": [
                  [
                      "absolute",
                      "relative"
                  ]
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "min_float_val",
              "max_float_val",
              "mask"
          ],
          "optional": [
              "scaling"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MULTIVAL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MULTIVAL"
      ],
      "name": "ADE_MultivalScaledMask",
      "display_name": "Multival Scaled Mask \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/multival",
      "output_node": false
  },
  "ADE_MultivalConvertToMask": {
      "input": {
          "required": {
              "multival": [
                  "MULTIVAL"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "multival"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "ADE_MultivalConvertToMask",
      "display_name": "Multival to Mask \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/multival",
      "output_node": false
  },
  "ADE_StandardStaticContextOptions": {
      "input": {
          "required": {
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "relative",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ],
              "use_on_equal_length": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ],
              "view_opts": [
                  "VIEW_OPTS"
              ]
          }
      },
      "input_order": {
          "required": [
              "context_length",
              "context_overlap"
          ],
          "optional": [
              "fuse_method",
              "use_on_equal_length",
              "start_percent",
              "guarantee_steps",
              "prev_context",
              "view_opts"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_StandardStaticContextOptions",
      "display_name": "Context Options\u25c6Standard Static \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts",
      "output_node": false
  },
  "ADE_StandardUniformContextOptions": {
      "input": {
          "required": {
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "context_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 32
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ],
              "use_on_equal_length": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ],
              "view_opts": [
                  "VIEW_OPTS"
              ]
          }
      },
      "input_order": {
          "required": [
              "context_length",
              "context_stride",
              "context_overlap"
          ],
          "optional": [
              "fuse_method",
              "use_on_equal_length",
              "start_percent",
              "guarantee_steps",
              "prev_context",
              "view_opts"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_StandardUniformContextOptions",
      "display_name": "Context Options\u25c6Standard Uniform \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts",
      "output_node": false
  },
  "ADE_LoopedUniformContextOptions": {
      "input": {
          "required": {
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "context_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 32
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ],
              "closed_loop": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ],
              "use_on_equal_length": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ],
              "view_opts": [
                  "VIEW_OPTS"
              ]
          }
      },
      "input_order": {
          "required": [
              "context_length",
              "context_stride",
              "context_overlap",
              "closed_loop"
          ],
          "optional": [
              "fuse_method",
              "use_on_equal_length",
              "start_percent",
              "guarantee_steps",
              "prev_context",
              "view_opts"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_LoopedUniformContextOptions",
      "display_name": "Context Options\u25c6Looped Uniform \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts",
      "output_node": false
  },
  "ADE_ViewsOnlyContextOptions": {
      "input": {
          "required": {
              "view_opts_req": [
                  "VIEW_OPTS"
              ]
          },
          "optional": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "view_opts_req"
          ],
          "optional": [
              "start_percent",
              "guarantee_steps",
              "prev_context"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_ViewsOnlyContextOptions",
      "display_name": "Context Options\u25c6Views Only [VRAM\u21c8] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts",
      "output_node": false
  },
  "ADE_BatchedContextOptions": {
      "input": {
          "required": {
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ]
          },
          "optional": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ]
          }
      },
      "input_order": {
          "required": [
              "context_length"
          ],
          "optional": [
              "start_percent",
              "guarantee_steps",
              "prev_context"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_BatchedContextOptions",
      "display_name": "Context Options\u25c6Batched [Non-AD] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts",
      "output_node": false
  },
  "ADE_AnimateDiffUniformContextOptions": {
      "input": {
          "required": {
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "context_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 32
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ],
              "context_schedule": [
                  [
                      "uniform"
                  ]
              ],
              "closed_loop": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ],
                  {
                      "default": "flat"
                  }
              ],
              "use_on_equal_length": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "prev_context": [
                  "CONTEXT_OPTIONS"
              ],
              "view_opts": [
                  "VIEW_OPTS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "context_length",
              "context_stride",
              "context_overlap",
              "context_schedule",
              "closed_loop"
          ],
          "optional": [
              "fuse_method",
              "use_on_equal_length",
              "start_percent",
              "guarantee_steps",
              "prev_context",
              "view_opts",
              "deprecation_warning"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_AnimateDiffUniformContextOptions",
      "display_name": "Context Options\u25c6Looped Uniform \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false
  },
  "ADE_VisualizeContextOptionsK": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ]
          },
          "optional": {
              "context_opts": [
                  "CONTEXT_OPTIONS"
              ],
              "visual_width": [
                  "INT",
                  {
                      "min": 32,
                      "max": 16384,
                      "default": 1440
                  }
              ],
              "latents_length": [
                  "INT",
                  {
                      "min": 1,
                      "max": 9007199254740991,
                      "default": 32
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "min": 0,
                      "max": 9007199254740991,
                      "default": 20
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sampler_name",
              "scheduler"
          ],
          "optional": [
              "context_opts",
              "visual_width",
              "latents_length",
              "steps",
              "denoise"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ADE_VisualizeContextOptionsK",
      "display_name": "Visualize Context Options (K.) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/visualize",
      "output_node": false
  },
  "ADE_VisualizeContextOptionsKAdv": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ]
          },
          "optional": {
              "context_opts": [
                  "CONTEXT_OPTIONS"
              ],
              "visual_width": [
                  "INT",
                  {
                      "min": 32,
                      "max": 16384,
                      "default": 1440
                  }
              ],
              "latents_length": [
                  "INT",
                  {
                      "min": 1,
                      "max": 9007199254740991,
                      "default": 32
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "min": 0,
                      "max": 9007199254740991,
                      "default": 20
                  }
              ],
              "start_step": [
                  "INT",
                  {
                      "min": 0,
                      "max": 9007199254740991,
                      "default": 0
                  }
              ],
              "end_step": [
                  "INT",
                  {
                      "min": 1,
                      "max": 9007199254740991,
                      "default": 20
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sampler_name",
              "scheduler"
          ],
          "optional": [
              "context_opts",
              "visual_width",
              "latents_length",
              "steps",
              "start_step",
              "end_step"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ADE_VisualizeContextOptionsKAdv",
      "display_name": "Visualize Context Options (K.Adv.) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/visualize",
      "output_node": false
  },
  "ADE_VisualizeContextOptionsSCustom": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "sigmas": [
                  "SIGMAS"
              ]
          },
          "optional": {
              "context_opts": [
                  "CONTEXT_OPTIONS"
              ],
              "visual_width": [
                  "INT",
                  {
                      "min": 32,
                      "max": 16384,
                      "default": 1440
                  }
              ],
              "latents_length": [
                  "INT",
                  {
                      "min": 1,
                      "max": 9007199254740991,
                      "default": 32
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "sigmas"
          ],
          "optional": [
              "context_opts",
              "visual_width",
              "latents_length"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ADE_VisualizeContextOptionsSCustom",
      "display_name": "Visualize Context Options (S.Cus.) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/visualize",
      "output_node": false
  },
  "ADE_StandardStaticViewOptions": {
      "input": {
          "required": {
              "view_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "view_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "view_length",
              "view_overlap"
          ],
          "optional": [
              "fuse_method"
          ]
      },
      "output": [
          "VIEW_OPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VIEW_OPTS"
      ],
      "name": "ADE_StandardStaticViewOptions",
      "display_name": "View Options\u25c6Standard Static \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/view opts",
      "output_node": false
  },
  "ADE_StandardUniformViewOptions": {
      "input": {
          "required": {
              "view_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "view_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 32
                  }
              ],
              "view_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "view_length",
              "view_stride",
              "view_overlap"
          ],
          "optional": [
              "fuse_method"
          ]
      },
      "output": [
          "VIEW_OPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VIEW_OPTS"
      ],
      "name": "ADE_StandardUniformViewOptions",
      "display_name": "View Options\u25c6Standard Uniform \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/view opts",
      "output_node": false
  },
  "ADE_LoopedUniformViewOptions": {
      "input": {
          "required": {
              "view_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 128
                  }
              ],
              "view_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 32
                  }
              ],
              "view_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 128
                  }
              ],
              "closed_loop": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "fuse_method": [
                  [
                      "pyramid",
                      "flat",
                      "delayed reverse sawtooth",
                      "pyramid-sigma",
                      "pyramid-sigma inverse",
                      "gauss-sigma",
                      "gauss-sigma inverse",
                      "random"
                  ]
              ],
              "use_on_equal_length": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "view_length",
              "view_stride",
              "view_overlap",
              "closed_loop"
          ],
          "optional": [
              "fuse_method",
              "use_on_equal_length"
          ]
      },
      "output": [
          "VIEW_OPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VIEW_OPTS"
      ],
      "name": "ADE_LoopedUniformViewOptions",
      "display_name": "View Options\u25c6Looped Uniform \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/view opts",
      "output_node": false
  },
  "ADE_ContextExtras_Set": {
      "input": {
          "required": {
              "context_opts": [
                  "CONTEXT_OPTIONS"
              ]
          },
          "optional": {
              "context_extras": [
                  "CONTEXT_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "context_opts"
          ],
          "optional": [
              "context_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_OPTS"
      ],
      "name": "ADE_ContextExtras_Set",
      "display_name": "Set Context Extras \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef": {
      "input": {
          "required": {},
          "optional": {
              "prev_extras": [
                  "CONTEXT_EXTRAS"
              ],
              "strength_multival": [
                  "MULTIVAL"
              ],
              "contextref_mode": [
                  "CONTEXTREF_MODE"
              ],
              "contextref_tune": [
                  "CONTEXTREF_TUNE"
              ],
              "contextref_kf": [
                  "CONTEXTREF_KEYFRAME"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prev_extras",
              "strength_multival",
              "contextref_mode",
              "contextref_tune",
              "contextref_kf",
              "start_percent",
              "end_percent"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXT_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_EXTRAS"
      ],
      "name": "ADE_ContextExtras_ContextRef",
      "display_name": "Context Extras\u25c6ContextRef \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_ModeFirst": {
      "input": {
          "required": {},
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_MODE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_MODE"
      ],
      "name": "ADE_ContextExtras_ContextRef_ModeFirst",
      "display_name": "ContextRef Mode\u25c6First \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_ModeSliding": {
      "input": {
          "required": {},
          "optional": {
              "sliding_width": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "sliding_width"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_MODE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_MODE"
      ],
      "name": "ADE_ContextExtras_ContextRef_ModeSliding",
      "display_name": "ContextRef Mode\u25c6Sliding \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_ModeIndexes": {
      "input": {
          "required": {},
          "optional": {
              "switch_on_idxs": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "always_include_0": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "switch_on_idxs",
              "always_include_0"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_MODE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_MODE"
      ],
      "name": "ADE_ContextExtras_ContextRef_ModeIndexes",
      "display_name": "ContextRef Mode\u25c6Indexes \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_TuneAttn": {
      "input": {
          "required": {},
          "optional": {
              "attn_style_fidelity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "attn_style_fidelity",
              "attn_ref_weight",
              "attn_strength"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_TUNE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_TUNE"
      ],
      "name": "ADE_ContextExtras_ContextRef_TuneAttn",
      "display_name": "ContextRef Tune\u25c6Attn \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_TuneAttnAdain": {
      "input": {
          "required": {},
          "optional": {
              "attn_style_fidelity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "attn_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_style_fidelity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_ref_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "adain_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "attn_style_fidelity",
              "attn_ref_weight",
              "attn_strength",
              "adain_style_fidelity",
              "adain_ref_weight",
              "adain_strength"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_TUNE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_TUNE"
      ],
      "name": "ADE_ContextExtras_ContextRef_TuneAttnAdain",
      "display_name": "ContextRef Tune\u25c6Attn+Adain \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_Keyframe": {
      "input": {
          "required": {},
          "optional": {
              "prev_kf": [
                  "CONTEXTREF_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ],
              "mode_replace": [
                  "CONTEXTREF_MODE"
              ],
              "tune_replace": [
                  "CONTEXTREF_TUNE"
              ],
              "mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prev_kf",
              "mult_multival",
              "mode_replace",
              "tune_replace",
              "mult",
              "start_percent",
              "guarantee_steps",
              "inherit_missing"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_KF"
      ],
      "name": "ADE_ContextExtras_ContextRef_Keyframe",
      "display_name": "ContextRef Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_KeyframeInterpolation": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "mult_start": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "mult_end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "intervals": [
                  "INT",
                  {
                      "default": 50,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_kf": [
                  "CONTEXTREF_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ],
              "mode_replace": [
                  "CONTEXTREF_MODE"
              ],
              "tune_replace": [
                  "CONTEXTREF_TUNE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent",
              "mult_start",
              "mult_end",
              "interpolation",
              "intervals",
              "inherit_missing",
              "print_keyframes"
          ],
          "optional": [
              "prev_kf",
              "mult_multival",
              "mode_replace",
              "tune_replace"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_KF"
      ],
      "name": "ADE_ContextExtras_ContextRef_KeyframeInterpolation",
      "display_name": "ContextRef Keyframes Interp. \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_ContextRef_KeyframeFromList": {
      "input": {
          "required": {
              "mults_float": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_kf": [
                  "CONTEXTREF_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ],
              "mode_replace": [
                  "CONTEXTREF_MODE"
              ],
              "tune_replace": [
                  "CONTEXTREF_TUNE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mults_float",
              "start_percent",
              "end_percent",
              "inherit_missing",
              "print_keyframes"
          ],
          "optional": [
              "prev_kf",
              "mult_multival",
              "mode_replace",
              "tune_replace"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXTREF_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXTREF_KF"
      ],
      "name": "ADE_ContextExtras_ContextRef_KeyframeFromList",
      "display_name": "ContextRef Keyframes From List \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/contextref",
      "output_node": false
  },
  "ADE_ContextExtras_NaiveReuse": {
      "input": {
          "required": {},
          "optional": {
              "prev_extras": [
                  "CONTEXT_EXTRAS"
              ],
              "strength_multival": [
                  "MULTIVAL"
              ],
              "naivereuse_kf": [
                  "NAIVEREUSE_KEYFRAME"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "weighted_mean": [
                  "FLOAT",
                  {
                      "default": 0.95,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prev_extras",
              "strength_multival",
              "naivereuse_kf",
              "start_percent",
              "end_percent",
              "weighted_mean"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONTEXT_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONTEXT_EXTRAS"
      ],
      "name": "ADE_ContextExtras_NaiveReuse",
      "display_name": "Context Extras\u25c6NaiveReuse \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras",
      "output_node": false
  },
  "ADE_ContextExtras_NaiveReuse_Keyframe": {
      "input": {
          "required": {},
          "optional": {
              "prev_kf": [
                  "NAIVEREUSE_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ],
              "mult": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prev_kf",
              "mult_multival",
              "mult",
              "start_percent",
              "guarantee_steps",
              "inherit_missing"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NAIVEREUSE_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NAIVEREUSE_KF"
      ],
      "name": "ADE_ContextExtras_NaiveReuse_Keyframe",
      "display_name": "NaiveReuse Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/naivereuse",
      "output_node": false
  },
  "ADE_ContextExtras_NaiveReuse_KeyframeInterpolation": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "mult_start": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "mult_end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "intervals": [
                  "INT",
                  {
                      "default": 50,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_kf": [
                  "NAIVEREUSE_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent",
              "mult_start",
              "mult_end",
              "interpolation",
              "intervals",
              "inherit_missing",
              "print_keyframes"
          ],
          "optional": [
              "prev_kf",
              "mult_multival"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NAIVEREUSE_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NAIVEREUSE_KF"
      ],
      "name": "ADE_ContextExtras_NaiveReuse_KeyframeInterpolation",
      "display_name": "NaiveReuse Keyframes Interp. \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/naivereuse",
      "output_node": false
  },
  "ADE_ContextExtras_NaiveReuse_KeyframeFromList": {
      "input": {
          "required": {
              "mults_float": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_kf": [
                  "NAIVEREUSE_KEYFRAME"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mults_float",
              "start_percent",
              "end_percent",
              "inherit_missing",
              "print_keyframes"
          ],
          "optional": [
              "prev_kf",
              "mult_multival"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NAIVEREUSE_KEYFRAME"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NAIVEREUSE_KF"
      ],
      "name": "ADE_ContextExtras_NaiveReuse_KeyframeFromList",
      "display_name": "NaiveReuse Keyframes From List \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/context opts/context extras/naivereuse",
      "output_node": false
  },
  "ADE_IterationOptsDefault": {
      "input": {
          "required": {
              "iterations": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1
                  }
              ]
          },
          "optional": {
              "iter_batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "iter_seed_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "iterations"
          ],
          "optional": [
              "iter_batch_offset",
              "iter_seed_offset"
          ]
      },
      "output": [
          "ITERATION_OPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "ITERATION_OPTS"
      ],
      "name": "ADE_IterationOptsDefault",
      "display_name": "Default Iteration Options \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/iteration opts",
      "output_node": false
  },
  "ADE_IterationOptsFreeInit": {
      "input": {
          "required": {
              "iterations": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1
                  }
              ],
              "filter": [
                  [
                      "gaussian",
                      "butterworth",
                      "ideal",
                      "box"
                  ]
              ],
              "d_s": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "d_t": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "n_butterworth": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 100
                  }
              ],
              "sigma_step": [
                  "INT",
                  {
                      "default": 999,
                      "min": 1,
                      "max": 999
                  }
              ],
              "apply_to_1st_iter": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "init_type": [
                  [
                      "FreeInit [sampler sigma]",
                      "FreeInit [model sigma]",
                      "DinkInit_v1"
                  ]
              ]
          },
          "optional": {
              "iter_batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "iter_seed_offset": [
                  "INT",
                  {
                      "default": 1,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "iterations",
              "filter",
              "d_s",
              "d_t",
              "n_butterworth",
              "sigma_step",
              "apply_to_1st_iter",
              "init_type"
          ],
          "optional": [
              "iter_batch_offset",
              "iter_seed_offset"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "ITERATION_OPTS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "ITERATION_OPTS"
      ],
      "name": "ADE_IterationOptsFreeInit",
      "display_name": "FreeInit Iteration Options \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/iteration opts",
      "output_node": false
  },
  "ADE_RegisterLoraHook": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "lora_name",
              "strength_model",
              "strength_clip"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "HOOKS"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "HOOKS"
      ],
      "name": "ADE_RegisterLoraHook",
      "display_name": "Register LoRA Hook \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/register lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_RegisterLoraHookModelOnly": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "lora_name": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "lora_name",
              "strength_model"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "HOOKS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "HOOKS"
      ],
      "name": "ADE_RegisterLoraHookModelOnly",
      "display_name": "Register LoRA Hook (Model Only) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/register lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_RegisterModelAsLoraHook": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "ckpt_name",
              "strength_model",
              "strength_clip"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "HOOKS"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "HOOKS"
      ],
      "name": "ADE_RegisterModelAsLoraHook",
      "display_name": "Register Model as LoRA Hook \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/register lora hooks",
      "output_node": false,
      "deprecated": true,
      "experimental": true
  },
  "ADE_RegisterModelAsLoraHookModelOnly": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ckpt_name",
              "strength_model"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "HOOKS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "HOOKS"
      ],
      "name": "ADE_RegisterModelAsLoraHookModelOnly",
      "display_name": "Register Model as LoRA Hook (MO) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/register lora hooks",
      "output_node": false,
      "deprecated": true,
      "experimental": true
  },
  "ADE_CombineLoraHooks": {
      "input": {
          "required": {},
          "optional": {
              "lora_hook_A": [
                  "HOOKS"
              ],
              "lora_hook_B": [
                  "HOOKS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "lora_hook_A",
              "lora_hook_B",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "ADE_CombineLoraHooks",
      "display_name": "Combine LoRA Hooks [2] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/combine lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_CombineLoraHooksFour": {
      "input": {
          "required": {},
          "optional": {
              "lora_hook_A": [
                  "HOOKS"
              ],
              "lora_hook_B": [
                  "HOOKS"
              ],
              "lora_hook_C": [
                  "HOOKS"
              ],
              "lora_hook_D": [
                  "HOOKS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "lora_hook_A",
              "lora_hook_B",
              "lora_hook_C",
              "lora_hook_D",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "ADE_CombineLoraHooksFour",
      "display_name": "Combine LoRA Hooks [4] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/combine lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_CombineLoraHooksEight": {
      "input": {
          "required": {},
          "optional": {
              "lora_hook_A": [
                  "HOOKS"
              ],
              "lora_hook_B": [
                  "HOOKS"
              ],
              "lora_hook_C": [
                  "HOOKS"
              ],
              "lora_hook_D": [
                  "HOOKS"
              ],
              "lora_hook_E": [
                  "HOOKS"
              ],
              "lora_hook_F": [
                  "HOOKS"
              ],
              "lora_hook_G": [
                  "HOOKS"
              ],
              "lora_hook_H": [
                  "HOOKS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "lora_hook_A",
              "lora_hook_B",
              "lora_hook_C",
              "lora_hook_D",
              "lora_hook_E",
              "lora_hook_F",
              "lora_hook_G",
              "lora_hook_H",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "ADE_CombineLoraHooksEight",
      "display_name": "Combine LoRA Hooks [8] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/combine lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_SetLoraHookKeyframe": {
      "input": {
          "required": {
              "lora_hook": [
                  "HOOKS"
              ],
              "hook_kf": [
                  "HOOK_KEYFRAMES"
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "lora_hook",
              "hook_kf"
          ],
          "optional": [
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOKS"
      ],
      "name": "ADE_SetLoraHookKeyframe",
      "display_name": "Set LoRA Hook Keyframes \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AttachLoraHookToCLIP": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "lora_hook": [
                  "HOOKS"
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "lora_hook"
          ],
          "optional": [
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CLIP"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "hook_CLIP"
      ],
      "name": "ADE_AttachLoraHookToCLIP",
      "display_name": "Set CLIP LoRA Hook \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_LoraHookKeyframe": {
      "input": {
          "required": {
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -20.0,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "strength_model",
              "start_percent",
              "guarantee_steps"
          ],
          "optional": [
              "prev_hook_kf",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "ADE_LoraHookKeyframe",
      "display_name": "LoRA Hook Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/schedule lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_LoraHookKeyframeInterpolation": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "strength_start": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "strength_end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "intervals": [
                  "INT",
                  {
                      "default": 5,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent",
              "strength_start",
              "strength_end",
              "interpolation",
              "intervals",
              "print_keyframes"
          ],
          "optional": [
              "prev_hook_kf",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "ADE_LoraHookKeyframeInterpolation",
      "display_name": "LoRA Hook Keyframes Interp. \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/schedule lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_LoraHookKeyframeFromStrengthList": {
      "input": {
          "required": {
              "strengths_float": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_hook_kf": [
                  "HOOK_KEYFRAMES"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "strengths_float",
              "start_percent",
              "end_percent",
              "print_keyframes"
          ],
          "optional": [
              "prev_hook_kf",
              "deprecation_warning"
          ]
      },
      "output": [
          "HOOK_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "HOOK_KF"
      ],
      "name": "ADE_LoraHookKeyframeFromStrengthList",
      "display_name": "LoRA Hook Keyframes From List \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/schedule lora hooks",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AttachLoraHookToConditioning": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "lora_hook": [
                  "HOOKS"
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "lora_hook"
          ],
          "optional": [
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_AttachLoraHookToConditioning",
      "display_name": "Set Model LoRA Hook \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/single cond ops",
      "output_node": false,
      "deprecated": true
  },
  "ADE_PairedConditioningSetMask": {
      "input": {
          "required": {
              "positive_ADD": [
                  "CONDITIONING"
              ],
              "negative_ADD": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "opt_mask": [
                  "MASK"
              ],
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "opt_timesteps": [
                  "TIMESTEPS_RANGE"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_ADD",
              "negative_ADD",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "opt_mask",
              "opt_lora_hook",
              "opt_timesteps",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ADE_PairedConditioningSetMask",
      "display_name": "Set Props on Conds \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_ConditioningSetMask": {
      "input": {
          "required": {
              "cond_ADD": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "opt_mask": [
                  "MASK"
              ],
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "opt_timesteps": [
                  "TIMESTEPS_RANGE"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond_ADD",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "opt_mask",
              "opt_lora_hook",
              "opt_timesteps",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_ConditioningSetMask",
      "display_name": "Set Props on Cond \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/single cond ops",
      "output_node": false,
      "deprecated": true
  },
  "ADE_PairedConditioningSetMaskAndCombine": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "positive_ADD": [
                  "CONDITIONING"
              ],
              "negative_ADD": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "opt_mask": [
                  "MASK"
              ],
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "opt_timesteps": [
                  "TIMESTEPS_RANGE"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "positive_ADD",
              "negative_ADD",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "opt_mask",
              "opt_lora_hook",
              "opt_timesteps",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ADE_PairedConditioningSetMaskAndCombine",
      "display_name": "Set Props and Combine Conds \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_ConditioningSetMaskAndCombine": {
      "input": {
          "required": {
              "cond": [
                  "CONDITIONING"
              ],
              "cond_ADD": [
                  "CONDITIONING"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "set_cond_area": [
                  [
                      "default",
                      "mask bounds"
                  ]
              ]
          },
          "optional": {
              "opt_mask": [
                  "MASK"
              ],
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "opt_timesteps": [
                  "TIMESTEPS_RANGE"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond",
              "cond_ADD",
              "strength",
              "set_cond_area"
          ],
          "optional": [
              "opt_mask",
              "opt_lora_hook",
              "opt_timesteps",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_ConditioningSetMaskAndCombine",
      "display_name": "Set Props and Combine Cond \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/single cond ops",
      "output_node": false,
      "deprecated": true
  },
  "ADE_PairedConditioningSetUnmaskedAndCombine": {
      "input": {
          "required": {
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "positive_DEFAULT": [
                  "CONDITIONING"
              ],
              "negative_DEFAULT": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive",
              "negative",
              "positive_DEFAULT",
              "negative_DEFAULT"
          ],
          "optional": [
              "opt_lora_hook",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ADE_PairedConditioningSetUnmaskedAndCombine",
      "display_name": "Set Unmasked Conds \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_ConditioningSetUnmaskedAndCombine": {
      "input": {
          "required": {
              "cond": [
                  "CONDITIONING"
              ],
              "cond_DEFAULT": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "opt_lora_hook": [
                  "HOOKS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond",
              "cond_DEFAULT"
          ],
          "optional": [
              "opt_lora_hook",
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_ConditioningSetUnmaskedAndCombine",
      "display_name": "Set Unmasked Cond \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/single cond ops",
      "output_node": false,
      "deprecated": true
  },
  "ADE_PairedConditioningCombine": {
      "input": {
          "required": {
              "positive_A": [
                  "CONDITIONING"
              ],
              "negative_A": [
                  "CONDITIONING"
              ],
              "positive_B": [
                  "CONDITIONING"
              ],
              "negative_B": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_A",
              "negative_A",
              "positive_B",
              "negative_B"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "positive",
          "negative"
      ],
      "name": "ADE_PairedConditioningCombine",
      "display_name": "Manual Combine Conds \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_ConditioningCombine": {
      "input": {
          "required": {
              "cond_A": [
                  "CONDITIONING"
              ],
              "cond_B": [
                  "CONDITIONING"
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cond_A",
              "cond_B"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_ConditioningCombine",
      "display_name": "Manual Combine Cond \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning/single cond ops",
      "output_node": false,
      "deprecated": true
  },
  "ADE_TimestepsConditioning": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated - use native ComfyUI nodes instead."
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "deprecation_warning"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "TIMESTEPS_RANGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "TIMESTEPS_RANGE"
      ],
      "name": "ADE_TimestepsConditioning",
      "display_name": "Timesteps Conditioning \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/conditioning",
      "output_node": false,
      "deprecated": true
  },
  "ADE_NoiseLayerAdd": {
      "input": {
          "required": {
              "batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "noise_type": [
                  [
                      "default",
                      "constant",
                      "empty",
                      "repeated_context",
                      "FreeNoise"
                  ]
              ],
              "seed_gen_override": [
                  [
                      "use existing",
                      "comfy",
                      "comfy [gpu]",
                      "auto1111",
                      "auto1111 [gpu]"
                  ]
              ],
              "seed_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ],
              "noise_weight": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_noise_layers": [
                  "NOISE_LAYERS"
              ],
              "mask_optional": [
                  "MASK"
              ],
              "seed_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "forceInput": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_offset",
              "noise_type",
              "seed_gen_override",
              "seed_offset",
              "noise_weight"
          ],
          "optional": [
              "prev_noise_layers",
              "mask_optional",
              "seed_override"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NOISE_LAYERS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE_LAYERS"
      ],
      "name": "ADE_NoiseLayerAdd",
      "display_name": "Noise Layer [Add] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/noise layers",
      "output_node": false
  },
  "ADE_NoiseLayerAddWeighted": {
      "input": {
          "required": {
              "batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "noise_type": [
                  [
                      "default",
                      "constant",
                      "empty",
                      "repeated_context",
                      "FreeNoise"
                  ]
              ],
              "seed_gen_override": [
                  [
                      "use existing",
                      "comfy",
                      "comfy [gpu]",
                      "auto1111",
                      "auto1111 [gpu]"
                  ]
              ],
              "seed_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ],
              "noise_weight": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "balance_multiplier": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_noise_layers": [
                  "NOISE_LAYERS"
              ],
              "mask_optional": [
                  "MASK"
              ],
              "seed_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "forceInput": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_offset",
              "noise_type",
              "seed_gen_override",
              "seed_offset",
              "noise_weight",
              "balance_multiplier"
          ],
          "optional": [
              "prev_noise_layers",
              "mask_optional",
              "seed_override"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NOISE_LAYERS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE_LAYERS"
      ],
      "name": "ADE_NoiseLayerAddWeighted",
      "display_name": "Noise Layer [Add Weighted] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/noise layers",
      "output_node": false
  },
  "ADE_NoiseLayerReplace": {
      "input": {
          "required": {
              "batch_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "noise_type": [
                  [
                      "default",
                      "constant",
                      "empty",
                      "repeated_context",
                      "FreeNoise"
                  ]
              ],
              "seed_gen_override": [
                  [
                      "use existing",
                      "comfy",
                      "comfy [gpu]",
                      "auto1111",
                      "auto1111 [gpu]"
                  ]
              ],
              "seed_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          },
          "optional": {
              "prev_noise_layers": [
                  "NOISE_LAYERS"
              ],
              "mask_optional": [
                  "MASK"
              ],
              "seed_override": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "forceInput": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "batch_offset",
              "noise_type",
              "seed_gen_override",
              "seed_offset"
          ],
          "optional": [
              "prev_noise_layers",
              "mask_optional",
              "seed_override"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "NOISE_LAYERS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NOISE_LAYERS"
      ],
      "name": "ADE_NoiseLayerReplace",
      "display_name": "Noise Layer [Replace] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/noise layers",
      "output_node": false
  },
  "ADE_AnimateDiffSettings": {
      "input": {
          "optional": {
              "pe_adjust": [
                  "PE_ADJUST"
              ],
              "weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "pe_adjust",
              "weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "AD_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_SETTINGS"
      ],
      "name": "ADE_AnimateDiffSettings",
      "display_name": "AnimateDiff Settings \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings",
      "output_node": false
  },
  "ADE_AdjustPESweetspotStretch": {
      "input": {
          "required": {
              "sweetspot": [
                  "INT",
                  {
                      "default": 16,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "new_sweetspot": [
                  "INT",
                  {
                      "default": 16,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_pe_adjust": [
                  "PE_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sweetspot",
              "new_sweetspot",
              "print_adjustment"
          ],
          "optional": [
              "prev_pe_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "PE_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PE_ADJUST"
      ],
      "name": "ADE_AdjustPESweetspotStretch",
      "display_name": "Adjust PE [Sweetspot] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/pe adjust",
      "output_node": false
  },
  "ADE_AdjustPEFullStretch": {
      "input": {
          "required": {
              "pe_stretch": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_pe_adjust": [
                  "PE_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_stretch",
              "print_adjustment"
          ],
          "optional": [
              "prev_pe_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "PE_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PE_ADJUST"
      ],
      "name": "ADE_AdjustPEFullStretch",
      "display_name": "Adjust PE [Full Stretch] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/pe adjust",
      "output_node": false
  },
  "ADE_AdjustPEManual": {
      "input": {
          "required": {
              "cap_initial_pe_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "interpolate_pe_to_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "initial_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "final_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_pe_adjust": [
                  "PE_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cap_initial_pe_length",
              "interpolate_pe_to_length",
              "initial_pe_idx_offset",
              "final_pe_idx_offset",
              "print_adjustment"
          ],
          "optional": [
              "prev_pe_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "PE_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PE_ADJUST"
      ],
      "name": "ADE_AdjustPEManual",
      "display_name": "Adjust PE [Manual] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/pe adjust",
      "output_node": false
  },
  "ADE_AdjustWeightAllAdd": {
      "input": {
          "required": {
              "all_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "all_ADD",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightAllAdd",
      "display_name": "Adjust Weight [All\u25c6Add] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_AdjustWeightAllMult": {
      "input": {
          "required": {
              "all_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "all_MULT",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightAllMult",
      "display_name": "Adjust Weight [All\u25c6Mult] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_AdjustWeightIndivAdd": {
      "input": {
          "required": {
              "pe_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "other_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_ADD",
              "attn_ADD",
              "other_ADD",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightIndivAdd",
      "display_name": "Adjust Weight [Indiv\u25c6Add] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_AdjustWeightIndivMult": {
      "input": {
          "required": {
              "pe_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "other_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_MULT",
              "attn_MULT",
              "other_MULT",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightIndivMult",
      "display_name": "Adjust Weight [Indiv\u25c6Mult] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_AdjustWeightIndivAttnAdd": {
      "input": {
          "required": {
              "pe_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_q_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_k_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_v_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_out_weight_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_out_bias_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "other_ADD": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -2.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_ADD",
              "attn_ADD",
              "attn_q_ADD",
              "attn_k_ADD",
              "attn_v_ADD",
              "attn_out_weight_ADD",
              "attn_out_bias_ADD",
              "other_ADD",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightIndivAttnAdd",
      "display_name": "Adjust Weight [Indiv-Attn\u25c6Add] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_AdjustWeightIndivAttnMult": {
      "input": {
          "required": {
              "pe_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_q_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_k_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_v_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_out_weight_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "attn_out_bias_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "other_MULT": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 2.0,
                      "step": 1e-06
                  }
              ],
              "print_adjustment": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_weight_adjust": [
                  "WEIGHT_ADJUST"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_MULT",
              "attn_MULT",
              "attn_q_MULT",
              "attn_k_MULT",
              "attn_v_MULT",
              "attn_out_weight_MULT",
              "attn_out_bias_MULT",
              "other_MULT",
              "print_adjustment"
          ],
          "optional": [
              "prev_weight_adjust"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "WEIGHT_ADJUST"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "WEIGHT_ADJUST"
      ],
      "name": "ADE_AdjustWeightIndivAttnMult",
      "display_name": "Adjust Weight [Indiv-Attn\u25c6Mult] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/ad settings/weight adjust",
      "output_node": false
  },
  "ADE_CustomCFGSimple": {
      "input": {
          "required": {
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ]
          },
          "optional": {
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cfg"
          ],
          "optional": [
              "cfg_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFGSimple",
      "display_name": "Custom CFG \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CustomCFG": {
      "input": {
          "required": {
              "cfg_multival": [
                  "MULTIVAL"
              ]
          },
          "optional": {
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cfg_multival"
          ],
          "optional": [
              "cfg_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFG",
      "display_name": "Custom CFG [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CustomCFGKeyframeSimple": {
      "input": {
          "required": {
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ]
          },
          "optional": {
              "prev_custom_cfg": [
                  "CUSTOM_CFG"
              ],
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 10
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cfg",
              "start_percent",
              "guarantee_steps"
          ],
          "optional": [
              "prev_custom_cfg",
              "cfg_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFGKeyframeSimple",
      "display_name": "Custom CFG Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CustomCFGKeyframe": {
      "input": {
          "required": {
              "cfg_multival": [
                  "MULTIVAL"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ]
          },
          "optional": {
              "prev_custom_cfg": [
                  "CUSTOM_CFG"
              ],
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "cfg_multival",
              "start_percent",
              "guarantee_steps"
          ],
          "optional": [
              "prev_custom_cfg",
              "cfg_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFGKeyframe",
      "display_name": "Custom CFG Keyframe [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CustomCFGKeyframeInterpolation": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "cfg_start": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "cfg_end": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ],
              "intervals": [
                  "INT",
                  {
                      "default": 50,
                      "min": 2,
                      "max": 100,
                      "step": 1
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_custom_cfg": [
                  "CUSTOM_CFG"
              ],
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent",
              "end_percent",
              "cfg_start",
              "cfg_end",
              "interpolation",
              "intervals",
              "print_keyframes"
          ],
          "optional": [
              "prev_custom_cfg",
              "cfg_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFGKeyframeInterpolation",
      "display_name": "Custom CFG Keyframes Interp. \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CustomCFGKeyframeFromList": {
      "input": {
          "required": {
              "cfgs_float": [
                  "FLOAT",
                  {
                      "default": -1,
                      "min": -1,
                      "step": 0.001,
                      "forceInput": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "print_keyframes": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "prev_custom_cfg": [
                  "CUSTOM_CFG"
              ],
              "cfg_extras": [
                  "CFG_EXTRAS"
              ]
          }
      },
      "input_order": {
          "required": [
              "cfgs_float",
              "start_percent",
              "end_percent",
              "print_keyframes"
          ],
          "optional": [
              "prev_custom_cfg",
              "cfg_extras"
          ]
      },
      "output": [
          "CUSTOM_CFG"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CUSTOM_CFG"
      ],
      "name": "ADE_CustomCFGKeyframeFromList",
      "display_name": "Custom CFG Keyframes From List \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/custom cfg",
      "output_node": false
  },
  "ADE_CFGExtrasPAGSimple": {
      "input": {
          "required": {
              "scale": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01
                  }
              ]
          },
          "optional": {
              "prev_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "scale"
          ],
          "optional": [
              "prev_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CFG_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CFG_EXTRAS"
      ],
      "name": "ADE_CFGExtrasPAGSimple",
      "display_name": "CFG Extras\u25c6PAG \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/cfg extras",
      "output_node": false
  },
  "ADE_CFGExtrasPAG": {
      "input": {
          "required": {
              "scale_multival": [
                  "MULTIVAL"
              ]
          },
          "optional": {
              "prev_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "scale_multival"
          ],
          "optional": [
              "prev_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CFG_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CFG_EXTRAS"
      ],
      "name": "ADE_CFGExtrasPAG",
      "display_name": "CFG Extras\u25c6PAG [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/cfg extras",
      "output_node": false
  },
  "ADE_CFGExtrasRescaleCFGSimple": {
      "input": {
          "required": {
              "multiplier": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "prev_extras": [
                  "CFG_EXTRAS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 10
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "multiplier"
          ],
          "optional": [
              "prev_extras"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CFG_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CFG_EXTRAS"
      ],
      "name": "ADE_CFGExtrasRescaleCFGSimple",
      "display_name": "CFG Extras\u25c6RescaleCFG \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/cfg extras",
      "output_node": false
  },
  "ADE_CFGExtrasRescaleCFG": {
      "input": {
          "required": {
              "mult_multival": [
                  "MULTIVAL"
              ]
          },
          "optional": {
              "prev_extras": [
                  "CFG_EXTRAS"
              ]
          }
      },
      "input_order": {
          "required": [
              "mult_multival"
          ],
          "optional": [
              "prev_extras"
          ]
      },
      "output": [
          "CFG_EXTRAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CFG_EXTRAS"
      ],
      "name": "ADE_CFGExtrasRescaleCFG",
      "display_name": "CFG Extras\u25c6RescaleCFG [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/cfg extras",
      "output_node": false
  },
  "ADE_SigmaSchedule": {
      "input": {
          "required": {
              "beta_schedule": [
                  [
                      "sqrt_linear (AnimateDiff)",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "beta_schedule"
          ]
      },
      "output": [
          "SIGMA_SCHEDULE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMA_SCHEDULE"
      ],
      "name": "ADE_SigmaSchedule",
      "display_name": "Create Sigma Schedule \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_RawSigmaSchedule": {
      "input": {
          "required": {
              "raw_beta_schedule": [
                  [
                      "linear",
                      "sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ]
              ],
              "linear_start": [
                  "FLOAT",
                  {
                      "default": 0.00085,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 1e-06
                  }
              ],
              "linear_end": [
                  "FLOAT",
                  {
                      "default": 0.012,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 1e-06
                  }
              ],
              "sampling": [
                  [
                      "eps",
                      "v_prediction",
                      "lcm"
                  ]
              ],
              "lcm_original_timesteps": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "zsnr": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "raw_beta_schedule",
              "linear_start",
              "linear_end",
              "sampling",
              "lcm_original_timesteps",
              "zsnr"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SIGMA_SCHEDULE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMA_SCHEDULE"
      ],
      "name": "ADE_RawSigmaSchedule",
      "display_name": "Create Raw Sigma Schedule \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_SigmaScheduleWeightedAverage": {
      "input": {
          "required": {
              "schedule_A": [
                  "SIGMA_SCHEDULE"
              ],
              "schedule_B": [
                  "SIGMA_SCHEDULE"
              ],
              "weight_A": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_A",
              "schedule_B",
              "weight_A"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SIGMA_SCHEDULE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMA_SCHEDULE"
      ],
      "name": "ADE_SigmaScheduleWeightedAverage",
      "display_name": "Sigma Schedule Weighted Mean \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_SigmaScheduleWeightedAverageInterp": {
      "input": {
          "required": {
              "schedule_A": [
                  "SIGMA_SCHEDULE"
              ],
              "schedule_B": [
                  "SIGMA_SCHEDULE"
              ],
              "weight_A_Start": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "weight_A_End": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "interpolation": [
                  [
                      "linear",
                      "ease_in",
                      "ease_out",
                      "ease_in_out"
                  ]
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_A",
              "schedule_B",
              "weight_A_Start",
              "weight_A_End",
              "interpolation"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SIGMA_SCHEDULE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMA_SCHEDULE"
      ],
      "name": "ADE_SigmaScheduleWeightedAverageInterp",
      "display_name": "Sigma Schedule Interp. Mean \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_SigmaScheduleSplitAndCombine": {
      "input": {
          "required": {
              "schedule_Start": [
                  "SIGMA_SCHEDULE"
              ],
              "schedule_End": [
                  "SIGMA_SCHEDULE"
              ],
              "idx_split_percent": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_Start",
              "schedule_End",
              "idx_split_percent"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SIGMA_SCHEDULE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMA_SCHEDULE"
      ],
      "name": "ADE_SigmaScheduleSplitAndCombine",
      "display_name": "Sigma Schedule Split Combine \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_SigmaScheduleToSigmas": {
      "input": {
          "required": {
              "sigma_schedule": [
                  "SIGMA_SCHEDULE"
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "denoise": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sigma_schedule",
              "scheduler",
              "steps",
              "denoise"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "SIGMAS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SIGMAS"
      ],
      "name": "ADE_SigmaScheduleToSigmas",
      "display_name": "Sigma Schedule To Sigmas \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/sigma schedule",
      "output_node": false
  },
  "ADE_NoisedImageInjection": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "optional": {
              "mask_opt": [
                  "MASK"
              ],
              "invert_mask": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "resize_image": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991
                  }
              ],
              "img_inject_opts": [
                  "IMAGE_INJECT_OPTIONS"
              ],
              "strength_multival": [
                  "MULTIVAL"
              ],
              "prev_image_inject": [
                  "IMAGE_INJECT"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae"
          ],
          "optional": [
              "mask_opt",
              "invert_mask",
              "resize_image",
              "start_percent",
              "guarantee_steps",
              "img_inject_opts",
              "strength_multival",
              "prev_image_inject"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "IMAGE_INJECT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE_INJECT"
      ],
      "name": "ADE_NoisedImageInjection",
      "display_name": "Image Injection \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/image inject",
      "output_node": false
  },
  "ADE_NoisedImageInjectOptions": {
      "input": {
          "required": {},
          "optional": {
              "composite_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "composite_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 1
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "composite_x",
              "composite_y"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "IMAGE_INJECT_OPTIONS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMG_INJECT_OPTS"
      ],
      "name": "ADE_NoisedImageInjectOptions",
      "display_name": "Image Injection Options \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/sample settings/image inject",
      "output_node": false
  },
  "ADE_PromptScheduling": {
      "input": {
          "required": {
              "prompts": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "clip": [
                  "CLIP"
              ]
          },
          "optional": {
              "prepend_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "append_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "values_replace": [
                  "VALUES_REPLACE"
              ],
              "print_schedule": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "max_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "tensor_interp": [
                  [
                      "lerp",
                      "slerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompts",
              "clip"
          ],
          "optional": [
              "prepend_text",
              "append_text",
              "values_replace",
              "print_schedule",
              "max_length",
              "tensor_interp"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CONDITIONING"
      ],
      "name": "ADE_PromptScheduling",
      "display_name": "Prompt Scheduling \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Encode a schedule of prompts with automatic interpolation.</div></div><div><div vhs_title=\"Format\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Format: <div>Scheduling supports two formats: JSON and pythonic.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"idx\": \"your prompt here\", ...</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>idx = \"your prompt here\", ...</div></div></div></div><div>The idx is the index of the frame - first frame is 0, last frame is max_frames-1. An idx may be the following:</div><div><div vhs_title=\"allowed idxs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">allowed idxs: <div vhs_title=\"single\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">single: A positive integer (e.g. 0, 2) schedules value for frame. A negative integer (e.g. -1, -5) schedules value for frame from the end (-1 would be the last frame). A decimal (e.g. 0.5, 1.0) selects frame based relative location in whole schedule (0.5 would be halfway, 1.0 would be last frame).</div></div><div vhs_title=\"range\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">range: Using rules above, single:single chooses uninterpolated prompts from start idx (included) to end idx (excluded). Examples -> 0:12, 0:-5, 2:0.5</div></div><div vhs_title=\"hold\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">hold: Putting a colon after a single idx stops interpolation until the next provided index. Examples -> 0:, 0.5:, 16: </div></div></div></div></div><div>The prompts themselves should be surrounded by double quotes (\"your prompt here\"). Portions of prompts can use value schedules provided values_replace.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"0\": \"blue rock on mountain\",</div><div>\"16\": \"green rock in lake\"</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>0 = \"blue rock on mountain\",</div><div>16 = \"green rock in lake\"</div></div></div></div></div></div></div><div><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"prompts\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">prompts: Write your prompts here.</div></div><div vhs_title=\"clip\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">clip: CLIP to use for encoding prompts.</div></div><div vhs_title=\"values_replace\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">values_replace: OPTIONAL, replaces keys from value_replace keys with provided value schedules. Keys in the prompt are written as `some_key`, surrounded by the ` characters.</div></div><div vhs_title=\"prepend_text\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">prepend_text: OPTIONAL, adds text before all prompts.</div></div><div vhs_title=\"append_text\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">append_text: OPTIONAL, adds text after all prompts.</div></div><div vhs_title=\"max_length\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">max_length: Used to select the intended length of schedule. If set to 0, will use the largest index in the schedule as max_length, but will disable relative indexes (negative and decimal).</div></div><div vhs_title=\"tensor_interp\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">tensor_interp: Selects method of interpolating prompt conds - defaults to lerp.</div></div><div vhs_title=\"print_schedule\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">print_schedule: When True, prints output values for each frame.</div></div></div></div></div><div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"CONDITIONING\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">CONDITIONING: Encoded prompts.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_PromptSchedulingLatents": {
      "input": {
          "required": {
              "prompts": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "clip": [
                  "CLIP"
              ],
              "latent": [
                  "LATENT"
              ]
          },
          "optional": {
              "prepend_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "append_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "values_replace": [
                  "VALUES_REPLACE"
              ],
              "print_schedule": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "tensor_interp": [
                  [
                      "lerp",
                      "slerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompts",
              "clip",
              "latent"
          ],
          "optional": [
              "prepend_text",
              "append_text",
              "values_replace",
              "print_schedule",
              "tensor_interp"
          ]
      },
      "output": [
          "CONDITIONING",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "LATENT"
      ],
      "name": "ADE_PromptSchedulingLatents",
      "display_name": "Prompt Scheduling [Latents] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Encode a schedule of prompts with automatic interpolation, its length matching passed-in latent count.</div></div><div><div vhs_title=\"Format\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Format: <div>Scheduling supports two formats: JSON and pythonic.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"idx\": \"your prompt here\", ...</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>idx = \"your prompt here\", ...</div></div></div></div><div>The idx is the index of the frame - first frame is 0, last frame is max_frames-1. An idx may be the following:</div><div><div vhs_title=\"allowed idxs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">allowed idxs: <div vhs_title=\"single\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">single: A positive integer (e.g. 0, 2) schedules value for frame. A negative integer (e.g. -1, -5) schedules value for frame from the end (-1 would be the last frame). A decimal (e.g. 0.5, 1.0) selects frame based relative location in whole schedule (0.5 would be halfway, 1.0 would be last frame).</div></div><div vhs_title=\"range\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">range: Using rules above, single:single chooses uninterpolated prompts from start idx (included) to end idx (excluded). Examples -> 0:12, 0:-5, 2:0.5</div></div><div vhs_title=\"hold\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">hold: Putting a colon after a single idx stops interpolation until the next provided index. Examples -> 0:, 0.5:, 16: </div></div></div></div></div><div>The prompts themselves should be surrounded by double quotes (\"your prompt here\"). Portions of prompts can use value schedules provided values_replace.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"0\": \"blue rock on mountain\",</div><div>\"16\": \"green rock in lake\"</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>0 = \"blue rock on mountain\",</div><div>16 = \"green rock in lake\"</div></div></div></div></div></div></div><div><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"prompts\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">prompts: Write your prompts here.</div></div><div vhs_title=\"clip\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">clip: CLIP to use for encoding prompts.</div></div><div vhs_title=\"latent\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latent: Used to get the amount of frames (max_length) to use for scheduling.</div></div><div vhs_title=\"values_replace\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">values_replace: OPTIONAL, replaces keys from value_replace keys with provided value schedules. Keys in the prompt are written as `some_key`, surrounded by the ` characters.</div></div><div vhs_title=\"prepend_text\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">prepend_text: OPTIONAL, adds text before all prompts.</div></div><div vhs_title=\"append_text\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">append_text: OPTIONAL, adds text after all prompts.</div></div><div vhs_title=\"tensor_interp\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">tensor_interp: Selects method of interpolating prompt conds - defaults to lerp.</div></div><div vhs_title=\"print_schedule\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">print_schedule: When True, prints output values for each frame.</div></div></div></div></div><div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"CONDITIONING\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">CONDITIONING: Encoded prompts.</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: Unmodified input latents; can be used as pipe, or can be ignored.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_ValueScheduling": {
      "input": {
          "required": {
              "values": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ]
          },
          "optional": {
              "print_schedule": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "max_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "values"
          ],
          "optional": [
              "print_schedule",
              "max_length"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "FLOAT",
          "FLOATS",
          "INT",
          "INTS"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "FLOATS",
          "INT",
          "INTS"
      ],
      "name": "ADE_ValueScheduling",
      "display_name": "Value Scheduling \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Create a list of values with automatic interpolation.</div></div><div><div vhs_title=\"Format\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Format: <div>Scheduling supports two formats: JSON and pythonic.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"idx\": float/int_value, ...</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>idx = float/int_value, ...</div></div></div></div><div>The idx is the index of the frame - first frame is 0, last frame is max_frames-1. An idx may be the following:</div><div><div vhs_title=\"allowed idxs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">allowed idxs: <div vhs_title=\"single\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">single: A positive integer (e.g. 0, 2) schedules value for frame. A negative integer (e.g. -1, -5) schedules value for frame from the end (-1 would be the last frame). A decimal (e.g. 0.5, 1.0) selects frame based relative location in whole schedule (0.5 would be halfway, 1.0 would be last frame).</div></div><div vhs_title=\"range\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">range: Using rules above, single:single chooses uninterpolated prompts from start idx (included) to end idx (excluded). Examples -> 0:12, 0:-5, 2:0.5</div></div><div vhs_title=\"hold\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">hold: Putting a colon after a single idx stops interpolation until the next provided index. Examples -> 0:, 0.5:, 16: </div></div></div></div></div><div>The values can be written without any special formatting.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"0\": 1.0,</div><div>\"16\": 1.3</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>0 = 1.0,</div><div>16 = 1.3</div></div></div></div></div></div></div><div><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"values\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">values: Write your values here.</div></div><div vhs_title=\"max_length\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">max_length: Used to select the intended length of schedule. If set to 0, will use the largest index in the schedule as max_length, but will disable relative indexes (negative and decimal).</div></div><div vhs_title=\"print_schedule\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">print_schedule: When True, prints output values for each frame.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_ValueSchedulingLatents": {
      "input": {
          "required": {
              "values": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "latent": [
                  "LATENT"
              ]
          },
          "optional": {
              "print_schedule": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "values",
              "latent"
          ],
          "optional": [
              "print_schedule"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "FLOAT",
          "FLOATS",
          "INT",
          "INTS"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "FLOATS",
          "INT",
          "INTS"
      ],
      "name": "ADE_ValueSchedulingLatents",
      "display_name": "Value Scheduling [Latents] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Create a list of values with automatic interpolation, its length matching passed-in latent count.</div></div><div><div vhs_title=\"Format\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Format: <div>Scheduling supports two formats: JSON and pythonic.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"idx\": float/int_value, ...</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>idx = float/int_value, ...</div></div></div></div><div>The idx is the index of the frame - first frame is 0, last frame is max_frames-1. An idx may be the following:</div><div><div vhs_title=\"allowed idxs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">allowed idxs: <div vhs_title=\"single\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">single: A positive integer (e.g. 0, 2) schedules value for frame. A negative integer (e.g. -1, -5) schedules value for frame from the end (-1 would be the last frame). A decimal (e.g. 0.5, 1.0) selects frame based relative location in whole schedule (0.5 would be halfway, 1.0 would be last frame).</div></div><div vhs_title=\"range\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">range: Using rules above, single:single chooses uninterpolated prompts from start idx (included) to end idx (excluded). Examples -> 0:12, 0:-5, 2:0.5</div></div><div vhs_title=\"hold\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">hold: Putting a colon after a single idx stops interpolation until the next provided index. Examples -> 0:, 0.5:, 16: </div></div></div></div></div><div>The values can be written without any special formatting.</div><div><div vhs_title=\"JSON\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">JSON: <div>\"0\": 1.0,</div><div>\"16\": 1.3</div></div></div><div vhs_title=\"pythonic\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pythonic: <div>0 = 1.0,</div><div>16 = 1.3</div></div></div></div></div></div></div><div><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"values\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse VHS_precollapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">values: Write your values here.</div></div><div vhs_title=\"latent\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latent: Used to get the amount of frames (max_length) to use for scheduling.</div></div><div vhs_title=\"print_schedule\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">print_schedule: When True, prints output values for each frame.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_ValuesReplace": {
      "input": {
          "required": {
              "value_key": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "floats": [
                  "FLOATS"
              ]
          },
          "optional": {
              "prev_replace": [
                  "VALUES_REPLACE"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value_key",
              "floats"
          ],
          "optional": [
              "prev_replace"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "VALUES_REPLACE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VALUES_REPLACE"
      ],
      "name": "ADE_ValuesReplace",
      "display_name": "Add Values Replace \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Add a values schedule bound to a key to be used in Prompt Scheduling node.</div></div><div><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"value_key\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">value_key: Key to use for value schedule in Prompt Scheduling node. Can only contain a-z, A-Z, 0-9, and _ characters. In Prompt Scheduling, keys can be referred to as `some_key`, where the key is surrounded by ` characters.</div></div><div vhs_title=\"floats\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">floats: List of floats, likely outputted by a Value Scheduling node.</div></div><div vhs_title=\"prev_replace\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">prev_replace: OPTIONAL, other values_replace can be chained.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_FloatToFloats": {
      "input": {
          "required": {
              "FLOAT": [
                  "FLOAT",
                  {
                      "default": 39,
                      "forceInput": true
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "FLOAT"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "FLOATS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOATS"
      ],
      "name": "ADE_FloatToFloats",
      "display_name": "Float to Floats \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/scheduling",
      "output_node": false
  },
  "ADE_ADBlockCombo": {
      "input": {
          "required": {},
          "optional": {
              "effect": [
                  "MULTIVAL"
              ],
              "scale": [
                  "MULTIVAL"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "effect",
              "scale"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "AD_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_BLOCK"
      ],
      "name": "ADE_ADBlockCombo",
      "display_name": "AD Block \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_ADBlockIndiv": {
      "input": {
          "required": {},
          "optional": {
              "effect": [
                  "MULTIVAL"
              ],
              "scale_0": [
                  "MULTIVAL"
              ],
              "scale_1": [
                  "MULTIVAL"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "effect",
              "scale_0",
              "scale_1",
              "autosize"
          ]
      },
      "output": [
          "AD_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_BLOCK"
      ],
      "name": "ADE_ADBlockIndiv",
      "display_name": "AD Block+ \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlockHighLevel": {
      "input": {
          "required": {},
          "optional": {
              "down": [
                  "AD_BLOCK"
              ],
              "mid": [
                  "AD_BLOCK"
              ],
              "up": [
                  "AD_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "down",
              "mid",
              "up",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlockHighLevel",
      "display_name": "AD Per Block \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SD15_MidLevel": {
      "input": {
          "required": {},
          "optional": {
              "down_0": [
                  "AD_BLOCK"
              ],
              "down_1": [
                  "AD_BLOCK"
              ],
              "down_2": [
                  "AD_BLOCK"
              ],
              "down_3": [
                  "AD_BLOCK"
              ],
              "mid": [
                  "AD_BLOCK"
              ],
              "up_0": [
                  "AD_BLOCK"
              ],
              "up_1": [
                  "AD_BLOCK"
              ],
              "up_2": [
                  "AD_BLOCK"
              ],
              "up_3": [
                  "AD_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "down_0",
              "down_1",
              "down_2",
              "down_3",
              "mid",
              "up_0",
              "up_1",
              "up_2",
              "up_3",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SD15_MidLevel",
      "display_name": "AD Per Block+ (SD1.5) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SD15_LowLevel": {
      "input": {
          "required": {},
          "optional": {
              "down_0__0": [
                  "AD_BLOCK"
              ],
              "down_0__1": [
                  "AD_BLOCK"
              ],
              "down_1__0": [
                  "AD_BLOCK"
              ],
              "down_1__1": [
                  "AD_BLOCK"
              ],
              "down_2__0": [
                  "AD_BLOCK"
              ],
              "down_2__1": [
                  "AD_BLOCK"
              ],
              "down_3__0": [
                  "AD_BLOCK"
              ],
              "down_3__1": [
                  "AD_BLOCK"
              ],
              "mid": [
                  "AD_BLOCK"
              ],
              "up_0__0": [
                  "AD_BLOCK"
              ],
              "up_0__1": [
                  "AD_BLOCK"
              ],
              "up_0__2": [
                  "AD_BLOCK"
              ],
              "up_1__0": [
                  "AD_BLOCK"
              ],
              "up_1__1": [
                  "AD_BLOCK"
              ],
              "up_1__2": [
                  "AD_BLOCK"
              ],
              "up_2__0": [
                  "AD_BLOCK"
              ],
              "up_2__1": [
                  "AD_BLOCK"
              ],
              "up_2__2": [
                  "AD_BLOCK"
              ],
              "up_3__0": [
                  "AD_BLOCK"
              ],
              "up_3__1": [
                  "AD_BLOCK"
              ],
              "up_3__2": [
                  "AD_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "down_0__0",
              "down_0__1",
              "down_1__0",
              "down_1__1",
              "down_2__0",
              "down_2__1",
              "down_3__0",
              "down_3__1",
              "mid",
              "up_0__0",
              "up_0__1",
              "up_0__2",
              "up_1__0",
              "up_1__1",
              "up_1__2",
              "up_2__0",
              "up_2__1",
              "up_2__2",
              "up_3__0",
              "up_3__1",
              "up_3__2",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SD15_LowLevel",
      "display_name": "AD Per Block++ (SD1.5) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SD15_FromFloats": {
      "input": {
          "required": {},
          "optional": {
              "effect_21_floats": [
                  "FLOATS"
              ],
              "scale_21_floats": [
                  "FLOATS"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "effect_21_floats",
              "scale_21_floats",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SD15_FromFloats",
      "display_name": "AD Per Block Floats (SD1.5) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Use Floats from Value Schedules to select SD1.5 effect/scale values for blocks.</div></div><div>SD1.5 Motion Modules contain 21 blocks:</div><div>idx 0 - start of down blocks (down_0__0)</div><div>idx 7 - end of down blocks   (down_3__1)</div><div>idx 8 - mid block            (mid)</div><div>idx 9 - start of up blocks   (up_0__0)</div><div>idx 20 - end of up blocks    (up_3__2)</div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SDXL_MidLevel": {
      "input": {
          "required": {},
          "optional": {
              "down_0": [
                  "AD_BLOCK"
              ],
              "down_1": [
                  "AD_BLOCK"
              ],
              "down_2": [
                  "AD_BLOCK"
              ],
              "mid": [
                  "AD_BLOCK"
              ],
              "up_0": [
                  "AD_BLOCK"
              ],
              "up_1": [
                  "AD_BLOCK"
              ],
              "up_2": [
                  "AD_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "down_0",
              "down_1",
              "down_2",
              "mid",
              "up_0",
              "up_1",
              "up_2",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SDXL_MidLevel",
      "display_name": "AD Per Block+ (SDXL) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SDXL_LowLevel": {
      "input": {
          "required": {},
          "optional": {
              "down_0__0": [
                  "AD_BLOCK"
              ],
              "down_0__1": [
                  "AD_BLOCK"
              ],
              "down_1__0": [
                  "AD_BLOCK"
              ],
              "down_1__1": [
                  "AD_BLOCK"
              ],
              "down_2__0": [
                  "AD_BLOCK"
              ],
              "down_2__1": [
                  "AD_BLOCK"
              ],
              "mid": [
                  "AD_BLOCK"
              ],
              "up_0__0": [
                  "AD_BLOCK"
              ],
              "up_0__1": [
                  "AD_BLOCK"
              ],
              "up_0__2": [
                  "AD_BLOCK"
              ],
              "up_1__0": [
                  "AD_BLOCK"
              ],
              "up_1__1": [
                  "AD_BLOCK"
              ],
              "up_1__2": [
                  "AD_BLOCK"
              ],
              "up_2__0": [
                  "AD_BLOCK"
              ],
              "up_2__1": [
                  "AD_BLOCK"
              ],
              "up_2__2": [
                  "AD_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "down_0__0",
              "down_0__1",
              "down_1__0",
              "down_1__1",
              "down_2__0",
              "down_2__1",
              "mid",
              "up_0__0",
              "up_0__1",
              "up_0__2",
              "up_1__0",
              "up_1__1",
              "up_1__2",
              "up_2__0",
              "up_2__1",
              "up_2__2",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SDXL_LowLevel",
      "display_name": "AD Per Block++ (SDXL) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_PerBlock_SDXL_FromFloats": {
      "input": {
          "required": {},
          "optional": {
              "effect_16_floats": [
                  "FLOATS"
              ],
              "scale_16_floats": [
                  "FLOATS"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "effect_16_floats",
              "scale_16_floats",
              "autosize"
          ]
      },
      "output": [
          "PER_BLOCK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PER_BLOCK"
      ],
      "name": "ADE_PerBlock_SDXL_FromFloats",
      "display_name": "AD Per Block Floats (SDXL) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "<div><div id=VHS_shortdesc style=\"font-size: .8em\">Use Floats from Value Schedules to select SDXL effect/scale values for blocks.</div></div><div>SDXL Motion Modules contain 16 blocks:</div><div>idx 0 - start of down blocks (down_0__0)</div><div>idx 5 - end of down blocks   (down_2__1)</div><div>idx 6 - mid block            (mid)</div><div>idx 7 - start of up blocks   (up_0__0)</div><div>idx 15 - end of up blocks    (up_2__2)</div>",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/per block",
      "output_node": false
  },
  "ADE_AnimateDiffUnload": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_AnimateDiffUnload",
      "display_name": "AnimateDiff Unload \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/extras",
      "output_node": false
  },
  "ADE_EmptyLatentImageLarge": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 262144
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "ADE_EmptyLatentImageLarge",
      "display_name": "Empty Latent Image (Big Batch) \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/extras",
      "output_node": false
  },
  "CheckpointLoaderSimpleWithNoiseSelect": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "beta_schedule": [
                  [
                      "autoselect",
                      "use existing",
                      "sqrt_linear (AnimateDiff)",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ],
                  {
                      "default": "use existing"
                  }
              ]
          },
          "optional": {
              "use_custom_scale_factor": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 0.18215,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 1e-05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "beta_schedule"
          ],
          "optional": [
              "use_custom_scale_factor",
              "scale_factor"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE"
      ],
      "name": "CheckpointLoaderSimpleWithNoiseSelect",
      "display_name": "Load Checkpoint w/ Noise Select \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/extras",
      "output_node": false
  },
  "ADE_PerturbedAttentionGuidanceMultival": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "scale_multival"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_PerturbedAttentionGuidanceMultival",
      "display_name": "PerturbedAttnGuide [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/extras",
      "output_node": false
  },
  "ADE_RescaleCFGMultival": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "mult_multival": [
                  "MULTIVAL"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "mult_multival"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_RescaleCFGMultival",
      "display_name": "RescaleCFG [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/extras",
      "output_node": false
  },
  "ADE_AnimateDiffLoaderGen1": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "beta_schedule": [
                  [
                      "autoselect",
                      "use existing",
                      "sqrt_linear (AnimateDiff)",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ],
                  {
                      "default": "autoselect"
                  }
              ]
          },
          "optional": {
              "context_options": [
                  "CONTEXT_OPTIONS"
              ],
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "ad_settings": [
                  "AD_SETTINGS"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "sample_settings": [
                  "SAMPLE_SETTINGS"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "per_block": [
                  "PER_BLOCK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "model_name",
              "beta_schedule"
          ],
          "optional": [
              "context_options",
              "motion_lora",
              "ad_settings",
              "ad_keyframes",
              "sample_settings",
              "scale_multival",
              "effect_multival",
              "per_block"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_AnimateDiffLoaderGen1",
      "display_name": "AnimateDiff Loader \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2460 Gen1 nodes \u2460",
      "output_node": false
  },
  "ADE_AnimateDiffLoaderWithContext": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "beta_schedule": [
                  [
                      "autoselect",
                      "use existing",
                      "sqrt_linear (AnimateDiff)",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ],
                  {
                      "default": "autoselect"
                  }
              ]
          },
          "optional": {
              "context_options": [
                  "CONTEXT_OPTIONS"
              ],
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "ad_settings": [
                  "AD_SETTINGS"
              ],
              "sample_settings": [
                  "SAMPLE_SETTINGS"
              ],
              "motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "apply_v2_models_properly": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "model_name",
              "beta_schedule"
          ],
          "optional": [
              "context_options",
              "motion_lora",
              "ad_settings",
              "sample_settings",
              "motion_scale",
              "apply_v2_models_properly",
              "ad_keyframes"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_AnimateDiffLoaderWithContext",
      "display_name": "AnimateDiff Loader [Legacy] \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2460 Gen1 nodes \u2460",
      "output_node": false,
      "deprecated": true
  },
  "ADE_UseEvolvedSampling": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "beta_schedule": [
                  [
                      "autoselect",
                      "use existing",
                      "sqrt_linear (AnimateDiff)",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ],
                  {
                      "default": "autoselect"
                  }
              ]
          },
          "optional": {
              "m_models": [
                  "M_MODELS"
              ],
              "context_options": [
                  "CONTEXT_OPTIONS"
              ],
              "sample_settings": [
                  "SAMPLE_SETTINGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "beta_schedule"
          ],
          "optional": [
              "m_models",
              "context_options",
              "sample_settings"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "ADE_UseEvolvedSampling",
      "display_name": "Use Evolved Sampling \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461",
      "output_node": false
  },
  "ADE_ApplyAnimateDiffModelSimple": {
      "input": {
          "required": {
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ]
          },
          "optional": {
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "per_block": [
                  "PER_BLOCK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_model"
          ],
          "optional": [
              "motion_lora",
              "scale_multival",
              "effect_multival",
              "ad_keyframes",
              "per_block"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "M_MODELS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "M_MODELS"
      ],
      "name": "ADE_ApplyAnimateDiffModelSimple",
      "display_name": "Apply AnimateDiff Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461",
      "output_node": false
  },
  "ADE_ApplyAnimateDiffModel": {
      "input": {
          "required": {
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "prev_m_models": [
                  "M_MODELS"
              ],
              "per_block": [
                  "PER_BLOCK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_model",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "motion_lora",
              "scale_multival",
              "effect_multival",
              "ad_keyframes",
              "prev_m_models",
              "per_block"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "M_MODELS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "M_MODELS"
      ],
      "name": "ADE_ApplyAnimateDiffModel",
      "display_name": "Apply AnimateDiff Model (Adv.) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461",
      "output_node": false
  },
  "ADE_LoadAnimateDiffModel": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ]
          },
          "optional": {
              "ad_settings": [
                  "AD_SETTINGS"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 50
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ],
          "optional": [
              "ad_settings"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "MOTION_MODEL_ADE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MOTION_MODEL"
      ],
      "name": "ADE_LoadAnimateDiffModel",
      "display_name": "Load AnimateDiff Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461",
      "output_node": false
  },
  "ADE_ApplyAnimateLCMI2VModel": {
      "input": {
          "required": {
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ],
              "ref_latent": [
                  "LATENT"
              ],
              "ref_drift": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.001
                  }
              ],
              "apply_ref_when_disabled": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "prev_m_models": [
                  "M_MODELS"
              ],
              "per_block": [
                  "PER_BLOCK"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_model",
              "ref_latent",
              "ref_drift",
              "apply_ref_when_disabled",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "motion_lora",
              "scale_multival",
              "effect_multival",
              "ad_keyframes",
              "prev_m_models",
              "per_block"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "M_MODELS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "M_MODELS"
      ],
      "name": "ADE_ApplyAnimateLCMI2VModel",
      "display_name": "Apply AnimateLCM-I2V Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/AnimateLCM-I2V",
      "output_node": false
  },
  "ADE_LoadAnimateLCMI2VModel": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ]
          },
          "optional": {
              "ad_settings": [
                  "AD_SETTINGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ],
          "optional": [
              "ad_settings"
          ]
      },
      "output": [
          "MOTION_MODEL_ADE",
          "MOTION_MODEL_ADE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MOTION_MODEL",
          "encoder_only"
      ],
      "name": "ADE_LoadAnimateLCMI2VModel",
      "display_name": "Load AnimateLCM-I2V Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/AnimateLCM-I2V",
      "output_node": false
  },
  "ADE_UpscaleAndVAEEncode": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "latent_size": [
                  "LATENT"
              ],
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ]
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ],
                  {
                      "default": "center"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vae",
              "latent_size",
              "scale_method",
              "crop"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "ADE_UpscaleAndVAEEncode",
      "display_name": "Scale Ref Image and VAE Encode \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/AnimateLCM-I2V",
      "output_node": false
  },
  "ADE_InjectI2VIntoAnimateDiffModel": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ]
          },
          "optional": {
              "ad_settings": [
                  "AD_SETTINGS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Experimental. Don't expect to work.",
                      "warn_type": "experimental",
                      "color": "#CFC"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name",
              "motion_model"
          ],
          "optional": [
              "ad_settings",
              "deprecation_warning"
          ]
      },
      "output": [
          "MOTION_MODEL_ADE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MOTION_MODEL"
      ],
      "name": "ADE_InjectI2VIntoAnimateDiffModel",
      "display_name": "\ud83e\uddeaInject I2V into AnimateDiff Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/AnimateLCM-I2V/\ud83e\uddeaexperimental",
      "output_node": false
  },
  "ADE_ApplyAnimateDiffModelWithCameraCtrl": {
      "input": {
          "required": {
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ],
              "cameractrl_poses": [
                  "CAMERACTRL_POSES"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "cameractrl_multival": [
                  "MULTIVAL"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "prev_m_models": [
                  "M_MODELS"
              ],
              "per_block": [
                  "PER_BLOCK"
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_model",
              "cameractrl_poses",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "motion_lora",
              "scale_multival",
              "effect_multival",
              "cameractrl_multival",
              "ad_keyframes",
              "prev_m_models",
              "per_block"
          ]
      },
      "output": [
          "M_MODELS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "M_MODELS"
      ],
      "name": "ADE_ApplyAnimateDiffModelWithCameraCtrl",
      "display_name": "Apply AnimateDiff+CameraCtrl Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl",
      "output_node": false
  },
  "ADE_LoadAnimateDiffModelWithCameraCtrl": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "camera_ctrl": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ]
          },
          "optional": {
              "ad_settings": [
                  "AD_SETTINGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name",
              "camera_ctrl"
          ],
          "optional": [
              "ad_settings"
          ]
      },
      "output": [
          "MOTION_MODEL_ADE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MOTION_MODEL"
      ],
      "name": "ADE_LoadAnimateDiffModelWithCameraCtrl",
      "display_name": "Load AnimateDiff+CameraCtrl Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl",
      "output_node": false
  },
  "ADE_CameraCtrlAnimateDiffKeyframe": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "cameractrl_multival": [
                  "MULTIVAL"
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent"
          ],
          "optional": [
              "prev_ad_keyframes",
              "scale_multival",
              "effect_multival",
              "cameractrl_multival",
              "inherit_missing",
              "guarantee_steps"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "AD_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_KEYFRAMES"
      ],
      "name": "ADE_CameraCtrlAnimateDiffKeyframe",
      "display_name": "AnimateDiff+CameraCtrl Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl",
      "output_node": false
  },
  "ADE_LoadCameraPoses": {
      "input": {
          "required": {
              "pose_filename": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "pose_filename"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_LoadCameraPoses",
      "display_name": "Load CameraCtrl Poses (File) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_LoadCameraPosesFromPath": {
      "input": {
          "optional": {
              "file_path": [
                  "STRING",
                  {
                      "default": "X://path/to/pose_file.txt"
                  }
              ]
          }
      },
      "input_order": {
          "optional": [
              "file_path"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_LoadCameraPosesFromPath",
      "display_name": "Load CameraCtrl Poses (Path) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_CameraPoseBasic": {
      "input": {
          "required": {
              "motion_type": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "speed": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "frame_length": [
                  "INT",
                  {
                      "default": 16
                  }
              ]
          },
          "optional": {
              "prev_poses": [
                  "CAMERACTRL_POSES"
              ]
          },
          "hidden": {
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_type",
              "speed",
              "frame_length"
          ],
          "optional": [
              "prev_poses"
          ],
          "hidden": [
              "autosize"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_CameraPoseBasic",
      "display_name": "Create CameraCtrl Poses \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_CameraPoseCombo": {
      "input": {
          "required": {
              "motion_type1": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "motion_type2": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "motion_type3": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "motion_type4": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "motion_type5": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "motion_type6": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "speed": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "frame_length": [
                  "INT",
                  {
                      "default": 16
                  }
              ]
          },
          "optional": {
              "prev_poses": [
                  "CAMERACTRL_POSES"
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_type1",
              "motion_type2",
              "motion_type3",
              "motion_type4",
              "motion_type5",
              "motion_type6",
              "speed",
              "frame_length"
          ],
          "optional": [
              "prev_poses"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_CameraPoseCombo",
      "display_name": "Create CameraCtrl Poses (Combo) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_CameraPoseAdvanced": {
      "input": {
          "required": {
              "motion_type1": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "motion_type2": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "motion_type3": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "motion_type4": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength4": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "motion_type5": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength5": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "motion_type6": [
                  [
                      "Static",
                      "Pan Up",
                      "Pan Down",
                      "Pan Left",
                      "Pan Right",
                      "Zoom In",
                      "Zoom Out",
                      "Roll Clockwise",
                      "Roll Anticlockwise",
                      "Tilt Down",
                      "Tilt Up",
                      "Tilt Left",
                      "Tilt Right"
                  ]
              ],
              "strength6": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "speed": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "frame_length": [
                  "INT",
                  {
                      "default": 16
                  }
              ]
          },
          "optional": {
              "prev_poses": [
                  "CAMERACTRL_POSES"
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_type1",
              "strength1",
              "motion_type2",
              "strength2",
              "motion_type3",
              "strength3",
              "motion_type4",
              "strength4",
              "motion_type5",
              "strength5",
              "motion_type6",
              "strength6",
              "speed",
              "frame_length"
          ],
          "optional": [
              "prev_poses"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_CameraPoseAdvanced",
      "display_name": "Create CameraCtrl Poses (Adv.) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_CameraManualPoseAppend": {
      "input": {
          "required": {
              "poses_first": [
                  "CAMERACTRL_POSES"
              ],
              "poses_last": [
                  "CAMERACTRL_POSES"
              ]
          }
      },
      "input_order": {
          "required": [
              "poses_first",
              "poses_last"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_CameraManualPoseAppend",
      "display_name": "Manual Append CameraCtrl Poses \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_ReplaceCameraParameters": {
      "input": {
          "required": {
              "poses": [
                  "CAMERACTRL_POSES"
              ],
              "fx": [
                  "FLOAT",
                  {
                      "default": 0.474812461,
                      "min": 0,
                      "max": 1,
                      "step": 1e-09
                  }
              ],
              "fy": [
                  "FLOAT",
                  {
                      "default": 0.844111024,
                      "min": 0,
                      "max": 1,
                      "step": 1e-09
                  }
              ],
              "cx": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "cy": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "poses",
              "fx",
              "fy",
              "cx",
              "cy"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_ReplaceCameraParameters",
      "display_name": "Replace Camera Parameters \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_ReplaceOriginalPoseAspectRatio": {
      "input": {
          "required": {
              "poses": [
                  "CAMERACTRL_POSES"
              ],
              "orig_pose_width": [
                  "INT",
                  {
                      "default": 1280,
                      "min": 1,
                      "max": 9007199254740991
                  }
              ],
              "orig_pose_height": [
                  "INT",
                  {
                      "default": 720,
                      "min": 1,
                      "max": 9007199254740991
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "poses",
              "orig_pose_width",
              "orig_pose_height"
          ]
      },
      "output": [
          "CAMERACTRL_POSES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "CAMERACTRL_POSES"
      ],
      "name": "ADE_ReplaceOriginalPoseAspectRatio",
      "display_name": "Replace Orig. Pose Aspect Ratio \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/CameraCtrl/poses",
      "output_node": false
  },
  "ADE_ApplyAnimateDiffModelWithPIA": {
      "input": {
          "required": {
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ],
              "image": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "pia_input": [
                  "PIA_INPUT"
              ],
              "motion_lora": [
                  "MOTION_LORA"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "prev_m_models": [
                  "M_MODELS"
              ],
              "per_block": [
                  "PER_BLOCK"
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_model",
              "image",
              "vae",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "pia_input",
              "motion_lora",
              "scale_multival",
              "effect_multival",
              "ad_keyframes",
              "prev_m_models",
              "per_block",
              "autosize"
          ]
      },
      "output": [
          "M_MODELS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "M_MODELS"
      ],
      "name": "ADE_ApplyAnimateDiffModelWithPIA",
      "display_name": "Apply AnimateDiff-PIA Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/PIA",
      "output_node": false
  },
  "ADE_InputPIA_Multival": {
      "input": {
          "required": {
              "multival": [
                  "MULTIVAL"
              ]
          }
      },
      "input_order": {
          "required": [
              "multival"
          ]
      },
      "output": [
          "PIA_INPUT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PIA_INPUT"
      ],
      "name": "ADE_InputPIA_Multival",
      "display_name": "PIA Input [Multival] \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/PIA",
      "output_node": false
  },
  "ADE_InputPIA_PaperPresets": {
      "input": {
          "required": {
              "preset": [
                  [
                      "Animation (Small Motion)",
                      "Animation (Medium Motion)",
                      "Animation (Large Motion)",
                      "Loop (Small Motion)",
                      "Loop (Medium Motion)",
                      "Loop (Large Motion)",
                      "Style Transfer (Small Motion)",
                      "Style Transfer (Medium Motion)",
                      "Style Transfer (Large Motion)"
                  ]
              ],
              "batch_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": -9007199254740991,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mult_multival": [
                  "MULTIVAL"
              ],
              "print_values": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "preset",
              "batch_index"
          ],
          "optional": [
              "mult_multival",
              "print_values",
              "autosize"
          ]
      },
      "output": [
          "PIA_INPUT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "PIA_INPUT"
      ],
      "name": "ADE_InputPIA_PaperPresets",
      "display_name": "PIA Input [Paper Presets] \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/PIA",
      "output_node": false
  },
  "ADE_PIA_AnimateDiffKeyframe": {
      "input": {
          "required": {
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "prev_ad_keyframes": [
                  "AD_KEYFRAMES"
              ],
              "scale_multival": [
                  "MULTIVAL"
              ],
              "effect_multival": [
                  "MULTIVAL"
              ],
              "pia_input": [
                  "PIA_INPUT"
              ],
              "inherit_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "guarantee_steps": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 9007199254740991
                  }
              ],
              "autosize": [
                  "ADEAUTOSIZE",
                  {
                      "padding": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_percent"
          ],
          "optional": [
              "prev_ad_keyframes",
              "scale_multival",
              "effect_multival",
              "pia_input",
              "inherit_missing",
              "guarantee_steps",
              "autosize"
          ]
      },
      "output": [
          "AD_KEYFRAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_KEYFRAMES"
      ],
      "name": "ADE_PIA_AnimateDiffKeyframe",
      "display_name": "AnimateDiff-PIA Keyframe \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/PIA",
      "output_node": false
  },
  "ADE_InjectPIAIntoAnimateDiffModel": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "motion_model": [
                  "MOTION_MODEL_ADE"
              ]
          },
          "optional": {
              "ad_settings": [
                  "AD_SETTINGS"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Experimental. Don't expect to work.",
                      "warn_type": "experimental",
                      "color": "#CFC"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name",
              "motion_model"
          ],
          "optional": [
              "ad_settings",
              "deprecation_warning"
          ]
      },
      "output": [
          "MOTION_MODEL_ADE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MOTION_MODEL"
      ],
      "name": "ADE_InjectPIAIntoAnimateDiffModel",
      "display_name": "\ud83e\uddeaInject PIA into AnimateDiff Model \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2461",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "Animate Diff \ud83c\udfad\ud83c\udd50\ud83c\udd53/\u2461 Gen2 nodes \u2461/PIA/\ud83e\uddeaexperimental",
      "output_node": false
  },
  "AnimateDiffLoaderV1": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "latents": [
                  "LATENT"
              ],
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "unlimited_area_hack": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "beta_schedule": [
                  [
                      "sqrt_linear (AnimateDiff)",
                      "use existing",
                      "autoselect",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ]
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "latents",
              "model_name",
              "unlimited_area_hack",
              "beta_schedule"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "LATENT"
      ],
      "name": "AnimateDiffLoaderV1",
      "display_name": "\ud83d\udeabAnimateDiff Loader [DEPRECATED] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AnimateDiffLoaderV1Advanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "latents": [
                  "LATENT"
              ],
              "model_name": [
                  [
                      "mm_sd_v14.ckpt",
                      "mm_sd_v15.ckpt",
                      "mm_sd_v15_v2.ckpt",
                      "v3_sd15_mm.ckpt"
                  ]
              ],
              "unlimited_area_hack": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "context_length": [
                  "INT",
                  {
                      "default": 16,
                      "min": 0,
                      "max": 1000
                  }
              ],
              "context_stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 0,
                      "max": 1000
                  }
              ],
              "context_schedule": [
                  [
                      "uniform"
                  ]
              ],
              "closed_loop": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "beta_schedule": [
                  [
                      "sqrt_linear (AnimateDiff)",
                      "use existing",
                      "autoselect",
                      "linear (AnimateDiff-SDXL)",
                      "linear (HotshotXL/default)",
                      "avg(sqrt_linear,linear)",
                      "lcm avg(sqrt_linear,linear)",
                      "lcm",
                      "lcm[100_ots]",
                      "lcm >> sqrt_linear",
                      "sqrt",
                      "cosine",
                      "squaredcos_cap_v2"
                  ]
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "latents",
              "model_name",
              "unlimited_area_hack",
              "context_length",
              "context_stride",
              "context_overlap",
              "context_schedule",
              "closed_loop",
              "beta_schedule"
          ],
          "optional": [
              "deprecation_warning"
          ]
      },
      "output": [
          "MODEL",
          "LATENT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "LATENT"
      ],
      "name": "ADE_AnimateDiffLoaderV1Advanced",
      "display_name": "\ud83d\udeabAnimateDiff Loader (Advanced) [DEPRECATED] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AnimateDiffCombine": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "frame_rate": [
                  "INT",
                  {
                      "default": 8,
                      "min": 1,
                      "max": 24,
                      "step": 1
                  }
              ],
              "loop_count": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "AnimateDiff"
                  }
              ],
              "format": [
                  [
                      "image/gif",
                      "image/webp"
                  ]
              ],
              "pingpong": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "save_image": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated. Use VHS Video Combine"
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [
              "images",
              "frame_rate",
              "loop_count",
              "filename_prefix",
              "format",
              "pingpong",
              "save_image"
          ],
          "optional": [
              "deprecation_warning"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [
          "GIF"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GIF"
      ],
      "name": "ADE_AnimateDiffCombine",
      "display_name": "\ud83d\udeabAnimateDiff Combine [DEPRECATED, Use Video Combine (VHS) Instead!] \ud83c\udfad\ud83c\udd50\ud83c\udd53",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": true,
      "deprecated": true
  },
  "ADE_AnimateDiffModelSettings_Release": {
      "input": {
          "required": {
              "min_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "max_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask_motion_scale": [
                  "MASK"
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "min_motion_scale",
              "max_motion_scale"
          ],
          "optional": [
              "mask_motion_scale",
              "deprecation_warning"
          ]
      },
      "output": [
          "AD_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_SETTINGS"
      ],
      "name": "ADE_AnimateDiffModelSettings_Release",
      "display_name": "\ud83d\udeab[DEPR] Motion Model Settings \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AnimateDiffModelSettingsSimple": {
      "input": {
          "required": {
              "motion_pe_stretch": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask_motion_scale": [
                  "MASK"
              ],
              "min_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "max_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "motion_pe_stretch"
          ],
          "optional": [
              "mask_motion_scale",
              "min_motion_scale",
              "max_motion_scale",
              "deprecation_warning"
          ]
      },
      "output": [
          "AD_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_SETTINGS"
      ],
      "name": "ADE_AnimateDiffModelSettingsSimple",
      "display_name": "\ud83d\udeab[DEPR] Motion Model Settings (Simple) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AnimateDiffModelSettings": {
      "input": {
          "required": {
              "pe_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "other_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "motion_pe_stretch": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "cap_initial_pe_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "interpolate_pe_to_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "initial_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "final_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask_motion_scale": [
                  "MASK"
              ],
              "min_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "max_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_strength",
              "attn_strength",
              "other_strength",
              "motion_pe_stretch",
              "cap_initial_pe_length",
              "interpolate_pe_to_length",
              "initial_pe_idx_offset",
              "final_pe_idx_offset"
          ],
          "optional": [
              "mask_motion_scale",
              "min_motion_scale",
              "max_motion_scale",
              "deprecation_warning"
          ]
      },
      "output": [
          "AD_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_SETTINGS"
      ],
      "name": "ADE_AnimateDiffModelSettings",
      "display_name": "\ud83d\udeab[DEPR] Motion Model Settings (Advanced) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths": {
      "input": {
          "required": {
              "pe_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_q_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_k_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_v_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_out_weight_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "attn_out_bias_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "other_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.0001
                  }
              ],
              "motion_pe_stretch": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "cap_initial_pe_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "interpolate_pe_to_length": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "initial_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ],
              "final_pe_idx_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask_motion_scale": [
                  "MASK"
              ],
              "min_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "max_motion_scale": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "step": 0.001
                  }
              ],
              "deprecation_warning": [
                  "ADEWARN",
                  {
                      "text": "Deprecated"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pe_strength",
              "attn_strength",
              "attn_q_strength",
              "attn_k_strength",
              "attn_v_strength",
              "attn_out_weight_strength",
              "attn_out_bias_strength",
              "other_strength",
              "motion_pe_stretch",
              "cap_initial_pe_length",
              "interpolate_pe_to_length",
              "initial_pe_idx_offset",
              "final_pe_idx_offset"
          ],
          "optional": [
              "mask_motion_scale",
              "min_motion_scale",
              "max_motion_scale",
              "deprecation_warning"
          ]
      },
      "output": [
          "AD_SETTINGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "AD_SETTINGS"
      ],
      "name": "ADE_AnimateDiffModelSettingsAdvancedAttnStrengths",
      "display_name": "\ud83d\udeab[DEPR] Motion Model Settings (Adv. Attn) \ud83c\udfad\ud83c\udd50\ud83c\udd53\u2460",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-AnimateDiff-Evolved",
      "category": "",
      "output_node": false,
      "deprecated": true
  },
  "Playbook Depth": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "Playbook Depth",
      "display_name": "Playbook Depth Render Pass",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Depth Sequence": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "Playbook Depth Sequence",
      "display_name": "Playbook Depth Render Pass Sequence",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Outline": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "Playbook Outline",
      "display_name": "Playbook Outline Render Pass",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Outline Sequence": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "Playbook Outline Sequence",
      "display_name": "Playbook Outline Render Pass Sequence",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Mask": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "blur_size": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 50.0
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key",
              "blur_size"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask_1",
          "mask_2",
          "mask_3",
          "mask_4",
          "mask_5",
          "mask_6",
          "mask_7",
          "mask_8"
      ],
      "name": "Playbook Mask",
      "display_name": "Playbook Mask Render Pass",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Mask Sequence": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ],
              "blur_size": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 50.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key",
              "blur_size"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "images",
          "mask_1",
          "mask_2",
          "mask_3",
          "mask_4",
          "mask_5",
          "mask_6",
          "mask_7",
          "mask_8"
      ],
      "name": "Playbook Mask Sequence",
      "display_name": "Playbook Mask Render Pass Sequence",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Beauty": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "Playbook Beauty",
      "display_name": "Playbook Beauty Render Pass",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Beauty Sequence": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "api_key"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "Playbook Beauty Sequence",
      "display_name": "Playbook Beauty Render Pass Sequence",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Render Result": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "api_key": [
                  "STRING",
                  {
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "api_key"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "URL"
      ],
      "name": "Playbook Render Result",
      "display_name": "Playbook Render Result",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Boolean": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ],
              "default_value": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label",
              "default_value"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "Boolean"
      ],
      "name": "Playbook Boolean",
      "display_name": "Playbook Boolean (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Float": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ],
              "min": [
                  "FLOAT",
                  {
                      "multiline": false,
                      "default": 0,
                      "display": "number"
                  }
              ],
              "max": [
                  "FLOAT",
                  {
                      "multiline": false,
                      "default": 0,
                      "display": "number"
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "FLOAT",
                  {
                      "multiline": true,
                      "display": "number",
                      "min": -2147483647,
                      "max": 2147483647,
                      "default": 0,
                      "step": 0.1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label",
              "min",
              "max"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "float"
      ],
      "name": "Playbook Float",
      "display_name": "Playbook Float (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Number": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ],
              "min": [
                  "INT",
                  {
                      "multiline": false,
                      "default": 0,
                      "display": "number"
                  }
              ],
              "max": [
                  "INT",
                  {
                      "multiline": false,
                      "default": 100,
                      "display": "number"
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "INT",
                  {
                      "multiline": true,
                      "display": "number",
                      "min": -2147483647,
                      "max": 2147483647,
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label",
              "min",
              "max"
          ],
          "optional": [
              "default_value"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "number"
      ],
      "name": "Playbook Number",
      "display_name": "Playbook Number (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Text": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "trigger_words": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label"
          ],
          "optional": [
              "default_value",
              "trigger_words"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "text",
          "trigger_words"
      ],
      "name": "Playbook Text",
      "display_name": "Playbook Text (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Image": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ],
              "default_url": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label"
          ],
          "optional": [
              "default_value",
              "default_url"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "Image"
      ],
      "name": "Playbook Image",
      "display_name": "Playbook Image (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Playbook Video": {
      "input": {
          "required": {
              "id": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node ID"
                  }
              ],
              "label": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "Node Label"
                  }
              ],
              "frame_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "skip_first_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1000,
                      "step": 1
                  }
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "default_value": [
                  "IMAGE"
              ],
              "default_url": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "id",
              "label",
              "frame_load_cap",
              "skip_first_frames",
              "select_every_nth"
          ],
          "optional": [
              "default_value",
              "default_url"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "Playbook Video",
      "display_name": "Playbook Video (External)",
      "description": "",
      "python_module": "custom_nodes.playbook3d-comfyui-nodes",
      "category": "Playbook 3D",
      "output_node": false
  },
  "Context Big (rgthree)": {
      "input": {
          "required": {},
          "optional": {
              "base_ctx": [
                  "RGTHREE_CONTEXT"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent": [
                  "LATENT"
              ],
              "images": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "step_refiner": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "forceInput": true
                  }
              ],
              "ckpt_name": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ],
                  {
                      "forceInput": true
                  }
              ],
              "sampler": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ],
                  {
                      "forceInput": true
                  }
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ],
                  {
                      "forceInput": true
                  }
              ],
              "clip_width": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "clip_height": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ],
              "text_pos_g": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text_pos_l": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text_neg_g": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text_neg_l": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "mask": [
                  "MASK"
              ],
              "control_net": [
                  "CONTROL_NET"
              ]
          },
          "hidden": {}
      },
      "input_order": {
          "required": [],
          "optional": [
              "base_ctx",
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "latent",
              "images",
              "seed",
              "steps",
              "step_refiner",
              "cfg",
              "ckpt_name",
              "sampler",
              "scheduler",
              "clip_width",
              "clip_height",
              "text_pos_g",
              "text_pos_l",
              "text_neg_g",
              "text_neg_l",
              "mask",
              "control_net"
          ],
          "hidden": []
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "FLOAT",
          [
              "CRM.pth",
              "cardosAnime_v20.safetensors",
              "disneyrealcartoonmix_v10.safetensors",
              "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
              "epicrealism_naturalSinRC1VAE.safetensors",
              "flat2DAnimerge_v45Sharp.safetensors",
              "juggernautXL_juggXIByRundiffusion.safetensors",
              "juggernautXL_v9Rdphoto2Lightning.safetensors",
              "juggernaut_reborn.safetensors",
              "modernDisneyXL_v3.safetensors",
              "photon_v1.safetensors",
              "realisticVisionV60B1_v51HyperVAE.safetensors",
              "sd_xl_base_1.0.safetensors",
              "sd_xl_base_1.0_0.9vae.safetensors",
              "sd_xl_turbo_1.0.safetensors",
              "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ],
          [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
          ],
          [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic"
          ],
          "INT",
          "INT",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "MASK",
          "CONTROL_NET"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED",
          "STEPS",
          "STEP_REFINER",
          "CFG",
          "CKPT_NAME",
          "SAMPLER",
          "SCHEDULER",
          "CLIP_WIDTH",
          "CLIP_HEIGHT",
          "TEXT_POS_G",
          "TEXT_POS_L",
          "TEXT_NEG_G",
          "TEXT_NEG_L",
          "MASK",
          "CONTROL_NET"
      ],
      "name": "Context Big (rgthree)",
      "display_name": "Context Big (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Context (rgthree)": {
      "input": {
          "required": {},
          "optional": {
              "base_ctx": [
                  "RGTHREE_CONTEXT"
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "vae": [
                  "VAE"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent": [
                  "LATENT"
              ],
              "images": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ]
          },
          "hidden": {
              "version": "FLOAT"
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "base_ctx",
              "model",
              "clip",
              "vae",
              "positive",
              "negative",
              "latent",
              "images",
              "seed"
          ],
          "hidden": [
              "version"
          ]
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED"
      ],
      "name": "Context (rgthree)",
      "display_name": "Context (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Context Switch (rgthree)": {
      "input": {
          "required": {},
          "optional": {}
      },
      "input_order": {
          "required": [],
          "optional": []
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED"
      ],
      "name": "Context Switch (rgthree)",
      "display_name": "Context Switch (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Context Switch Big (rgthree)": {
      "input": {
          "required": {},
          "optional": {}
      },
      "input_order": {
          "required": [],
          "optional": []
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "FLOAT",
          [
              "CRM.pth",
              "cardosAnime_v20.safetensors",
              "disneyrealcartoonmix_v10.safetensors",
              "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
              "epicrealism_naturalSinRC1VAE.safetensors",
              "flat2DAnimerge_v45Sharp.safetensors",
              "juggernautXL_juggXIByRundiffusion.safetensors",
              "juggernautXL_v9Rdphoto2Lightning.safetensors",
              "juggernaut_reborn.safetensors",
              "modernDisneyXL_v3.safetensors",
              "photon_v1.safetensors",
              "realisticVisionV60B1_v51HyperVAE.safetensors",
              "sd_xl_base_1.0.safetensors",
              "sd_xl_base_1.0_0.9vae.safetensors",
              "sd_xl_turbo_1.0.safetensors",
              "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ],
          [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
          ],
          [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic"
          ],
          "INT",
          "INT",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "MASK",
          "CONTROL_NET"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED",
          "STEPS",
          "STEP_REFINER",
          "CFG",
          "CKPT_NAME",
          "SAMPLER",
          "SCHEDULER",
          "CLIP_WIDTH",
          "CLIP_HEIGHT",
          "TEXT_POS_G",
          "TEXT_POS_L",
          "TEXT_NEG_G",
          "TEXT_NEG_L",
          "MASK",
          "CONTROL_NET"
      ],
      "name": "Context Switch Big (rgthree)",
      "display_name": "Context Switch Big (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Context Merge (rgthree)": {
      "input": {
          "required": {},
          "optional": {}
      },
      "input_order": {
          "required": [],
          "optional": []
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED"
      ],
      "name": "Context Merge (rgthree)",
      "display_name": "Context Merge (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Context Merge Big (rgthree)": {
      "input": {
          "required": {},
          "optional": {}
      },
      "input_order": {
          "required": [],
          "optional": []
      },
      "output": [
          "RGTHREE_CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "IMAGE",
          "INT",
          "INT",
          "INT",
          "FLOAT",
          [
              "CRM.pth",
              "cardosAnime_v20.safetensors",
              "disneyrealcartoonmix_v10.safetensors",
              "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
              "epicrealism_naturalSinRC1VAE.safetensors",
              "flat2DAnimerge_v45Sharp.safetensors",
              "juggernautXL_juggXIByRundiffusion.safetensors",
              "juggernautXL_v9Rdphoto2Lightning.safetensors",
              "juggernaut_reborn.safetensors",
              "modernDisneyXL_v3.safetensors",
              "photon_v1.safetensors",
              "realisticVisionV60B1_v51HyperVAE.safetensors",
              "sd_xl_base_1.0.safetensors",
              "sd_xl_base_1.0_0.9vae.safetensors",
              "sd_xl_turbo_1.0.safetensors",
              "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
          ],
          [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
          ],
          [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic"
          ],
          "INT",
          "INT",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "MASK",
          "CONTROL_NET"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONTEXT",
          "MODEL",
          "CLIP",
          "VAE",
          "POSITIVE",
          "NEGATIVE",
          "LATENT",
          "IMAGE",
          "SEED",
          "STEPS",
          "STEP_REFINER",
          "CFG",
          "CKPT_NAME",
          "SAMPLER",
          "SCHEDULER",
          "CLIP_WIDTH",
          "CLIP_HEIGHT",
          "TEXT_POS_G",
          "TEXT_POS_L",
          "TEXT_NEG_G",
          "TEXT_NEG_L",
          "MASK",
          "CONTROL_NET"
      ],
      "name": "Context Merge Big (rgthree)",
      "display_name": "Context Merge Big (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Display Int (rgthree)": {
      "input": {
          "required": {
              "input": [
                  "INT",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Display Int (rgthree)",
      "display_name": "Display Int (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": true
  },
  "Display Any (rgthree)": {
      "input": {
          "required": {
              "source": [
                  "*",
                  {}
              ]
          }
      },
      "input_order": {
          "required": [
              "source"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Display Any (rgthree)",
      "display_name": "Display Any (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "lora_01": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_01": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_02": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_02": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_03": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_03": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_04": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_04": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "lora_01",
              "strength_01",
              "lora_02",
              "strength_02",
              "lora_03",
              "strength_03",
              "lora_04",
              "strength_04"
          ]
      },
      "output": [
          "MODEL",
          "CLIP"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP"
      ],
      "name": "Lora Loader Stack (rgthree)",
      "display_name": "Lora Loader Stack (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Seed (rgthree)": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1125899906842624,
                      "max": 1125899906842624
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "seed"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo",
              "unique_id"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SEED"
      ],
      "name": "Seed (rgthree)",
      "display_name": "Seed (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Image Inset Crop (rgthree)": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "measurement": [
                  [
                      "Pixels",
                      "Percentage"
                  ]
              ],
              "left": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "right": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "top": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "bottom": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "measurement",
              "left",
              "right",
              "top",
              "bottom"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Image Inset Crop (rgthree)",
      "display_name": "Image Inset Crop (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Power Prompt (rgthree)": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "opt_model": [
                  "MODEL"
              ],
              "opt_clip": [
                  "CLIP"
              ],
              "insert_lora": [
                  [
                      "CHOOSE",
                      "DISABLE LORAS",
                      "AnimateLCM_sd15_t2v_lora",
                      "Lego_XL_v2.1",
                      "Red_Bull_Canned_Drink__Flux_Lora",
                      "Retro_Comic_Flux_v1_renderartist",
                      "flux_dev_frostinglane_araminta_k",
                      "flux_realism_lora",
                      "flux_spirited_away",
                      "ip-adapter-faceid-plusv2_sd15_lora",
                      "ip-adapter-faceid-plusv2_sdxl_lora",
                      "ip-adapter-faceid_sd15_lora",
                      "ip-adapter-faceid_sdxl_lora",
                      "ps1_style_SDXL_v2",
                      "sdxl_lightning_4step_lora",
                      "yarn_art_Flux_LoRA"
                  ]
              ],
              "insert_embedding": [
                  [
                      "CHOOSE"
                  ]
              ],
              "insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          },
          "hidden": {
              "values_insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt"
          ],
          "optional": [
              "opt_model",
              "opt_clip",
              "insert_lora",
              "insert_embedding",
              "insert_saved"
          ],
          "hidden": [
              "values_insert_saved"
          ]
      },
      "output": [
          "CONDITIONING",
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "MODEL",
          "CLIP",
          "TEXT"
      ],
      "name": "Power Prompt (rgthree)",
      "display_name": "Power Prompt (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "opt_clip": [
                  "CLIP"
              ],
              "insert_embedding": [
                  [
                      "CHOOSE"
                  ]
              ],
              "insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          },
          "hidden": {
              "values_insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt"
          ],
          "optional": [
              "opt_clip",
              "insert_embedding",
              "insert_saved"
          ],
          "hidden": [
              "values_insert_saved"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "TEXT"
      ],
      "name": "Power Prompt - Simple (rgthree)",
      "display_name": "Power Prompt - Simple (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "KSampler Config (rgthree)": {
      "input": {
          "required": {
              "steps_total": [
                  "INT",
                  {
                      "default": 30,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "refiner_step": [
                  "INT",
                  {
                      "default": 24,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.5
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "steps_total",
              "refiner_step",
              "cfg",
              "sampler_name",
              "scheduler"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
          ],
          [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic"
          ]
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "STEPS",
          "REFINER_STEP",
          "CFG",
          "SAMPLER",
          "SCHEDULER"
      ],
      "name": "KSampler Config (rgthree)",
      "display_name": "KSampler Config (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
      "input": {
          "required": {
              "dimensions": [
                  [
                      "1536 x 640   (landscape)",
                      "1344 x 768   (landscape)",
                      "1216 x 832   (landscape)",
                      "1152 x 896   (landscape)",
                      "1024 x 1024  (square)",
                      " 896 x 1152  (portrait)",
                      " 832 x 1216  (portrait)",
                      " 768 x 1344  (portrait)",
                      " 640 x 1536  (portrait)"
                  ],
                  {
                      "default": "1024 x 1024  (square)"
                  }
              ],
              "clip_scale": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 1.0,
                      "max": 10.0,
                      "step": 0.5
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "dimensions",
              "clip_scale",
              "batch_size"
          ]
      },
      "output": [
          "LATENT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "CLIP_WIDTH",
          "CLIP_HEIGHT"
      ],
      "name": "SDXL Empty Latent Image (rgthree)",
      "display_name": "SDXL Empty Latent Image (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
      "input": {
          "required": {
              "prompt_g": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "prompt_l": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "opt_model": [
                  "MODEL"
              ],
              "opt_clip": [
                  "CLIP"
              ],
              "opt_clip_width": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "opt_clip_height": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "insert_lora": [
                  [
                      "CHOOSE",
                      "DISABLE LORAS",
                      "AnimateLCM_sd15_t2v_lora",
                      "Lego_XL_v2.1",
                      "Red_Bull_Canned_Drink__Flux_Lora",
                      "Retro_Comic_Flux_v1_renderartist",
                      "flux_dev_frostinglane_araminta_k",
                      "flux_realism_lora",
                      "flux_spirited_away",
                      "ip-adapter-faceid-plusv2_sd15_lora",
                      "ip-adapter-faceid-plusv2_sdxl_lora",
                      "ip-adapter-faceid_sd15_lora",
                      "ip-adapter-faceid_sdxl_lora",
                      "ps1_style_SDXL_v2",
                      "sdxl_lightning_4step_lora",
                      "yarn_art_Flux_LoRA"
                  ]
              ],
              "insert_embedding": [
                  [
                      "CHOOSE"
                  ]
              ],
              "insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ],
              "target_width": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "target_height": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "crop_width": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "crop_height": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ]
          },
          "hidden": {
              "values_insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_g",
              "prompt_l"
          ],
          "optional": [
              "opt_model",
              "opt_clip",
              "opt_clip_width",
              "opt_clip_height",
              "insert_lora",
              "insert_embedding",
              "insert_saved",
              "target_width",
              "target_height",
              "crop_width",
              "crop_height"
          ],
          "hidden": [
              "values_insert_saved"
          ]
      },
      "output": [
          "CONDITIONING",
          "MODEL",
          "CLIP",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "MODEL",
          "CLIP",
          "TEXT_G",
          "TEXT_L"
      ],
      "name": "SDXL Power Prompt - Positive (rgthree)",
      "display_name": "SDXL Power Prompt - Positive (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
      "input": {
          "required": {
              "prompt_g": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "prompt_l": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "opt_clip": [
                  "CLIP"
              ],
              "opt_clip_width": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "opt_clip_height": [
                  "INT",
                  {
                      "forceInput": true,
                      "default": 1024.0,
                      "min": 0,
                      "max": 16384
                  }
              ],
              "insert_embedding": [
                  [
                      "CHOOSE"
                  ]
              ],
              "insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ],
              "target_width": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "target_height": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "crop_width": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ],
              "crop_height": [
                  "INT",
                  {
                      "default": -1,
                      "min": -1,
                      "max": 16384
                  }
              ]
          },
          "hidden": {
              "values_insert_saved": [
                  [
                      "CHOOSE"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_g",
              "prompt_l"
          ],
          "optional": [
              "opt_clip",
              "opt_clip_width",
              "opt_clip_height",
              "insert_embedding",
              "insert_saved",
              "target_width",
              "target_height",
              "crop_width",
              "crop_height"
          ],
          "hidden": [
              "values_insert_saved"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "TEXT_G",
          "TEXT_L"
      ],
      "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
      "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Any Switch (rgthree)": {
      "input": {
          "required": {},
          "optional": {}
      },
      "input_order": {
          "required": [],
          "optional": []
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "*"
      ],
      "name": "Any Switch (rgthree)",
      "display_name": "Any Switch (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "Image Comparer (rgthree)": {
      "input": {
          "required": {},
          "optional": {
              "image_a": [
                  "IMAGE"
              ],
              "image_b": [
                  "IMAGE"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "image_a",
              "image_b"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "Image Comparer (rgthree)",
      "display_name": "Image Comparer (rgthree)",
      "description": "Saves the input images to your ComfyUI output directory.",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": true
  },
  "Power Lora Loader (rgthree)": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ]
          },
          "optional": {},
          "hidden": {}
      },
      "input_order": {
          "required": [
              "model",
              "clip"
          ],
          "optional": [],
          "hidden": []
      },
      "output": [
          "MODEL",
          "CLIP"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP"
      ],
      "name": "Power Lora Loader (rgthree)",
      "display_name": "Power Lora Loader (rgthree)",
      "description": "",
      "python_module": "custom_nodes.rgthree-comfy",
      "category": "rgthree",
      "output_node": false
  },
  "DownloadAndLoadSAM2Model": {
      "input": {
          "required": {
              "model": [
                  [
                      "sam2_hiera_base_plus.safetensors",
                      "sam2_hiera_large.safetensors",
                      "sam2_hiera_small.safetensors",
                      "sam2_hiera_tiny.safetensors",
                      "sam2.1_hiera_base_plus.safetensors",
                      "sam2.1_hiera_large.safetensors",
                      "sam2.1_hiera_small.safetensors",
                      "sam2.1_hiera_tiny.safetensors"
                  ]
              ],
              "segmentor": [
                  [
                      "single_image",
                      "video",
                      "automaskgenerator"
                  ]
              ],
              "device": [
                  [
                      "cuda",
                      "cpu",
                      "mps"
                  ]
              ],
              "precision": [
                  [
                      "fp16",
                      "bf16",
                      "fp32"
                  ],
                  {
                      "default": "fp16"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "segmentor",
              "device",
              "precision"
          ]
      },
      "output": [
          "SAM2MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "sam2_model"
      ],
      "name": "DownloadAndLoadSAM2Model",
      "display_name": "(Down)Load SAM2Model",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "Sam2Segmentation": {
      "input": {
          "required": {
              "sam2_model": [
                  "SAM2MODEL"
              ],
              "image": [
                  "IMAGE"
              ],
              "keep_model_loaded": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "coordinates_positive": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "coordinates_negative": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "bboxes": [
                  "BBOX"
              ],
              "individual_objects": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "sam2_model",
              "image",
              "keep_model_loaded"
          ],
          "optional": [
              "coordinates_positive",
              "coordinates_negative",
              "bboxes",
              "individual_objects",
              "mask"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "mask"
      ],
      "name": "Sam2Segmentation",
      "display_name": "Sam2Segmentation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "Florence2toCoordinates": {
      "input": {
          "required": {
              "data": [
                  "JSON"
              ],
              "index": [
                  "STRING",
                  {
                      "default": "0"
                  }
              ],
              "batch": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "data",
              "index",
              "batch"
          ]
      },
      "output": [
          "STRING",
          "BBOX"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "center_coordinates",
          "bboxes"
      ],
      "name": "Florence2toCoordinates",
      "display_name": "Florence2 Coordinates",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "Sam2AutoSegmentation": {
      "input": {
          "required": {
              "sam2_model": [
                  "SAM2MODEL"
              ],
              "image": [
                  "IMAGE"
              ],
              "points_per_side": [
                  "INT",
                  {
                      "default": 32
                  }
              ],
              "points_per_batch": [
                  "INT",
                  {
                      "default": 64
                  }
              ],
              "pred_iou_thresh": [
                  "FLOAT",
                  {
                      "default": 0.8,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "stability_score_thresh": [
                  "FLOAT",
                  {
                      "default": 0.95,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "stability_score_offset": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "mask_threshold": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_n_layers": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "box_nms_thresh": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_nms_thresh": [
                  "FLOAT",
                  {
                      "default": 0.7,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_overlap_ratio": [
                  "FLOAT",
                  {
                      "default": 0.34,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "crop_n_points_downscale_factor": [
                  "INT",
                  {
                      "default": 1
                  }
              ],
              "min_mask_region_area": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "use_m2m": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "keep_model_loaded": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sam2_model",
              "image",
              "points_per_side",
              "points_per_batch",
              "pred_iou_thresh",
              "stability_score_thresh",
              "stability_score_offset",
              "mask_threshold",
              "crop_n_layers",
              "box_nms_thresh",
              "crop_nms_thresh",
              "crop_overlap_ratio",
              "crop_n_points_downscale_factor",
              "min_mask_region_area",
              "use_m2m",
              "keep_model_loaded"
          ]
      },
      "output": [
          "MASK",
          "IMAGE",
          "BBOX"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "mask",
          "segmented_image",
          "bbox"
      ],
      "name": "Sam2AutoSegmentation",
      "display_name": "Sam2AutoSegmentation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "Sam2VideoSegmentationAddPoints": {
      "input": {
          "required": {
              "sam2_model": [
                  "SAM2MODEL"
              ],
              "coordinates_positive": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "frame_index": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "object_index": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "coordinates_negative": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "prev_inference_state": [
                  "SAM2INFERENCESTATE"
              ]
          }
      },
      "input_order": {
          "required": [
              "sam2_model",
              "coordinates_positive",
              "frame_index",
              "object_index"
          ],
          "optional": [
              "image",
              "coordinates_negative",
              "prev_inference_state"
          ]
      },
      "output": [
          "SAM2MODEL",
          "SAM2INFERENCESTATE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "sam2_model",
          "inference_state"
      ],
      "name": "Sam2VideoSegmentationAddPoints",
      "display_name": "Sam2VideoSegmentationAddPoints",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "Sam2VideoSegmentation": {
      "input": {
          "required": {
              "sam2_model": [
                  "SAM2MODEL"
              ],
              "inference_state": [
                  "SAM2INFERENCESTATE"
              ],
              "keep_model_loaded": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sam2_model",
              "inference_state",
              "keep_model_loaded"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "mask"
      ],
      "name": "Sam2VideoSegmentation",
      "display_name": "Sam2VideoSegmentation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-segment-anything-2",
      "category": "SAM2",
      "output_node": false
  },
  "CR Image Output": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "output_type": [
                  [
                      "Preview",
                      "Save",
                      "UI (no batch)"
                  ]
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "CR"
                  }
              ],
              "prefix_presets": [
                  [
                      "None",
                      "yyyyMMdd"
                  ]
              ],
              "file_format": [
                  [
                      "png",
                      "jpg",
                      "webp",
                      "tif"
                  ]
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO"
          },
          "optional": {
              "trigger": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "output_type",
              "filename_prefix",
              "prefix_presets",
              "file_format"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo"
          ],
          "optional": [
              "trigger"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "trigger"
      ],
      "name": "CR Image Output",
      "display_name": "\ud83d\udcbe CR Image Output",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": true
  },
  "CR Latent Batch Size": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 999,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "batch_size"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "CR Latent Batch Size",
      "display_name": "\u2699\ufe0f CR Latent Batch Size",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR Conditioning Mixer": {
      "input": {
          "required": {
              "conditioning_1": [
                  "CONDITIONING"
              ],
              "conditioning_2": [
                  "CONDITIONING"
              ],
              "mix_method": [
                  [
                      "Combine",
                      "Average",
                      "Concatenate"
                  ]
              ],
              "average_strength": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_1",
              "conditioning_2",
              "mix_method",
              "average_strength"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "show_help"
      ],
      "name": "CR Conditioning Mixer",
      "display_name": "\u2699\ufe0f CR Conditioning Mixer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR Select Model": {
      "input": {
          "required": {
              "ckpt_name1": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "ckpt_name2": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "ckpt_name3": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "ckpt_name4": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "ckpt_name5": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "select_model": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 5
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name1",
              "ckpt_name2",
              "ckpt_name3",
              "ckpt_name4",
              "ckpt_name5",
              "select_model"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE",
          "ckpt_name",
          "show_help"
      ],
      "name": "CR Select Model",
      "display_name": "\ud83d\udd2e CR Select Model",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR Seed": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "seed",
          "show_help"
      ],
      "name": "CR Seed",
      "display_name": "\ud83c\udf31 CR Seed",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": true
  },
  "CR Prompt Text": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "default": "prompt",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "prompt",
          "show_help"
      ],
      "name": "CR Prompt Text",
      "display_name": "\u2699\ufe0f CR Prompt Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR Combine Prompt": {
      "input": {
          "required": {},
          "optional": {
              "part1": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "part2": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "part3": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "part4": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "separator": [
                  "STRING",
                  {
                      "default": ",",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "part1",
              "part2",
              "part3",
              "part4",
              "separator"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "prompt",
          "show_help"
      ],
      "name": "CR Combine Prompt",
      "display_name": "\u2699\ufe0f CR Combine Prompt",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR VAE Decode": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "tiled": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "circular": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "vae",
              "tiled",
              "circular"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR VAE Decode",
      "display_name": "\u2699\ufe0f CR VAE Decode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udce6 Core",
      "output_node": false
  },
  "CR Text List": {
      "input": {
          "required": {
              "multiline_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999
                  }
              ],
              "max_rows": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 9999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "multiline_text",
              "start_index",
              "max_rows"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text List",
      "display_name": "\ud83d\udcdc CR Text List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Prompt List": {
      "input": {
          "required": {
              "prepend_text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "multiline_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "body_text"
                  }
              ],
              "append_text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999
                  }
              ],
              "max_rows": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 9999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prepend_text",
              "multiline_text",
              "append_text",
              "start_index",
              "max_rows"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          false
      ],
      "output_name": [
          "prompt",
          "body_text",
          "show_help"
      ],
      "name": "CR Prompt List",
      "display_name": "\ud83d\udcdc CR Prompt List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Simple List": {
      "input": {
          "required": {
              "list_values": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "list_values"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "LIST",
          "show_help"
      ],
      "name": "CR Simple List",
      "display_name": "\ud83d\udcdc CR Simple List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Float Range List": {
      "input": {
          "required": {
              "start": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -99999.99,
                      "max": 99999.99,
                      "step": 0.01
                  }
              ],
              "end": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -99999.99,
                      "max": 99999.99,
                      "step": 0.01
                  }
              ],
              "step": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -99999.99,
                      "max": 99999.99,
                      "step": 0.01
                  }
              ],
              "operation": [
                  [
                      "none",
                      "sin",
                      "cos",
                      "tan"
                  ]
              ],
              "decimal_places": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 10
                  }
              ],
              "ignore_first_value": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "max_values_per_loop": [
                  "INT",
                  {
                      "default": 128,
                      "min": 1,
                      "max": 99999
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999
                  }
              ],
              "ping_pong": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start",
              "end",
              "step",
              "operation",
              "decimal_places",
              "ignore_first_value",
              "max_values_per_loop",
              "loops",
              "ping_pong"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "FLOAT",
          "show_help"
      ],
      "name": "CR Float Range List",
      "display_name": "\ud83d\udcdc CR Float Range List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Integer Range List": {
      "input": {
          "required": {
              "start": [
                  "INT",
                  {
                      "default": 0,
                      "min": -99999,
                      "max": 99999
                  }
              ],
              "end": [
                  "INT",
                  {
                      "default": 0,
                      "min": -99999,
                      "max": 99999
                  }
              ],
              "step": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 999
                  }
              ],
              "ping_pong": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start",
              "end",
              "step",
              "loops",
              "ping_pong"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Integer Range List",
      "display_name": "\ud83d\udcdc CR Integer Range List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Load Text List": {
      "input": {
          "required": {
              "input_file_path": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_name": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_extension": [
                  [
                      "txt",
                      "csv"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "input_file_path",
              "file_name",
              "file_extension"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Load Text List",
      "display_name": "\ud83d\udcdc CR Load Text List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Binary To Bit List": {
      "input": {
          "required": {
              "bit_string": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "bit_string"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Binary To Bit List",
      "display_name": "\ud83d\udcdc CR Binary To Bit List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Text Cycler": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "repeats": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "repeats",
              "loops"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "STRING",
          "show_text"
      ],
      "name": "CR Text Cycler",
      "display_name": "\ud83d\udcdc CR Text Cycler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Value Cycler": {
      "input": {
          "required": {
              "values": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "repeats": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "values",
              "repeats",
              "loops"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          false
      ],
      "output_name": [
          "FLOAT",
          "INT",
          "show_text"
      ],
      "name": "CR Value Cycler",
      "display_name": "\ud83d\udcdc CR Value Cycler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List",
      "output_node": false
  },
  "CR Load Image List": {
      "input": {
          "required": {
              "input_folder": [
                  [
                      "3d"
                  ]
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999
                  }
              ],
              "max_images": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9999
                  }
              ]
          },
          "optional": {
              "input_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_folder",
              "start_index",
              "max_images"
          ],
          "optional": [
              "input_path"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Load Image List",
      "display_name": "\u2328\ufe0f CR Load Image List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Load Image List Plus": {
      "input": {
          "required": {
              "input_folder": [
                  [
                      "3d"
                  ]
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 99999
                  }
              ],
              "max_images": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          },
          "optional": {
              "input_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_folder",
              "start_index",
              "max_images"
          ],
          "optional": [
              "input_path"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT",
          "STRING",
          "INT",
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          true,
          true,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "index",
          "filename",
          "width",
          "height",
          "list_length",
          "show_help"
      ],
      "name": "CR Load Image List Plus",
      "display_name": "\u2328\ufe0f CR Load Image List Plus",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Load GIF As List": {
      "input": {
          "required": {
              "input_folder": [
                  [
                      "3d"
                  ]
              ],
              "gif_filename": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "text"
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 99999
                  }
              ],
              "max_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          },
          "optional": {
              "input_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_folder",
              "gif_filename",
              "start_frame",
              "max_frames"
          ],
          "optional": [
              "input_path"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "show_help"
      ],
      "name": "CR Load GIF As List",
      "display_name": "\u2328\ufe0f CR Load GIF As List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Font File List": {
      "input": {
          "required": {
              "source_folder": [
                  [
                      "system",
                      "Comfyroll",
                      "from folder"
                  ]
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999
                  }
              ],
              "max_rows": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 9999
                  }
              ]
          },
          "optional": {
              "folder_path": [
                  "STRING",
                  {
                      "default": "C:\\Windows\\Fonts",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "source_folder",
              "start_index",
              "max_rows"
          ],
          "optional": [
              "folder_path"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "LIST",
          "show_help"
      ],
      "name": "CR Font File List",
      "display_name": "\u2328\ufe0f CR Font File List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Batch Images From List": {
      "input": {
          "required": {
              "image_list": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image_list"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image_batch",
          "show_help"
      ],
      "name": "CR Batch Images From List",
      "display_name": "\ud83d\udee0\ufe0f CR Batch Images From List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR Intertwine Lists": {
      "input": {
          "required": {
              "list1": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "list2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "list1",
              "list2"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Intertwine Lists",
      "display_name": "\ud83d\udee0\ufe0f CR Intertwine Lists",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR Repeater": {
      "input": {
          "required": {
              "input_data": [
                  "*"
              ],
              "repeats": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_data",
              "repeats"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          true,
          false
      ],
      "output_name": [
          "list",
          "show_help"
      ],
      "name": "CR Repeater",
      "display_name": "\ud83d\udee0\ufe0f CR Repeater",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR XY Product": {
      "input": {
          "required": {
              "text_x": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "text_y": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text_x",
              "text_y"
          ]
      },
      "output": [
          "*",
          "*",
          "STRING"
      ],
      "output_is_list": [
          true,
          true,
          false
      ],
      "output_name": [
          "x_values",
          "y_values",
          "show_help"
      ],
      "name": "CR XY Product",
      "display_name": "\ud83d\udee0\ufe0f CR XY Product",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR Text List To String": {
      "input": {
          "required": {
              "text_list": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text_list"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text List To String",
      "display_name": "\ud83d\udee0\ufe0f CR Text List To String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcdc List/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR SD1.5 Aspect Ratio": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "1:1 square 512x512",
                      "1:1 square 1024x1024",
                      "2:3 portrait 512x768",
                      "3:4 portrait 512x682",
                      "3:2 landscape 768x512",
                      "4:3 landscape 682x512",
                      "16:9 cinema 910x512",
                      "1.85:1 cinema 952x512",
                      "2:1 cinema 1024x512",
                      "2.39:1 anamorphic 1224x512"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR SD1.5 Aspect Ratio",
      "display_name": "\ud83d\udd33 CR SD1.5 Aspect Ratio",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR SDXL Aspect Ratio": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "1:1 square 1024x1024",
                      "3:4 portrait 896x1152",
                      "5:8 portrait 832x1216",
                      "9:16 portrait 768x1344",
                      "9:21 portrait 640x1536",
                      "4:3 landscape 1152x896",
                      "3:2 landscape 1216x832",
                      "16:9 landscape 1344x768",
                      "21:9 landscape 1536x640"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR SDXL Aspect Ratio",
      "display_name": "\ud83d\udd33 CR SDXL Aspect Ratio",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR Aspect Ratio": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "SD1.5 - 1:1 square 512x512",
                      "SD1.5 - 2:3 portrait 512x768",
                      "SD1.5 - 3:4 portrait 512x682",
                      "SD1.5 - 3:2 landscape 768x512",
                      "SD1.5 - 4:3 landscape 682x512",
                      "SD1.5 - 16:9 cinema 910x512",
                      "SD1.5 - 1.85:1 cinema 952x512",
                      "SD1.5 - 2:1 cinema 1024x512",
                      "SDXL - 1:1 square 1024x1024",
                      "SDXL - 3:4 portrait 896x1152",
                      "SDXL - 5:8 portrait 832x1216",
                      "SDXL - 9:16 portrait 768x1344",
                      "SDXL - 9:21 portrait 640x1536",
                      "SDXL - 4:3 landscape 1152x896",
                      "SDXL - 3:2 landscape 1216x832",
                      "SDXL - 16:9 landscape 1344x768",
                      "SDXL - 21:9 landscape 1536x640"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "prescale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "prescale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "prescale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR Aspect Ratio",
      "display_name": "\ud83d\udd33 CR Aspect Ratio",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR Aspect Ratio Banners": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "Large Rectangle - 336x280",
                      "Medium Rectangle - 300x250",
                      "Small Rectangle - 180x150",
                      "Square - 250x250",
                      "Small Square - 200x200",
                      "Button - 125x125",
                      "Half Page - 300x600",
                      "Vertical Banner - 120x240",
                      "Wide Skyscraper - 160x600",
                      "Skyscraper - 120x600",
                      "Billboard - 970x250",
                      "Portrait - 300x1050",
                      "Banner - 468x60",
                      "Leaderboard - 728x90"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "prescale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "prescale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "prescale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR Aspect Ratio Banners",
      "display_name": "\ud83d\udd33 CR Aspect Ratio Banners",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR Aspect Ratio Social Media": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "Instagram Portrait - 1080x1350",
                      "Instagram Square - 1080x1080",
                      "Instagram Landscape - 1080x608",
                      "Instagram Stories/Reels - 1080x1920",
                      "Facebook Landscape - 1080x1350",
                      "Facebook Marketplace - 1200x1200",
                      "Facebook Stories - 1080x1920",
                      "TikTok - 1080x1920",
                      "YouTube Banner - 2560\u00d71440",
                      "LinkedIn Profile Banner - 1584x396",
                      "LinkedIn Page Cover - 1128x191",
                      "LinkedIn Post - 1200x627",
                      "Pinterest Pin Image - 1000x1500",
                      "CivitAI Cover - 1600x400",
                      "OpenArt App - 1500x1000"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "prescale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "prescale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "prescale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR Aspect Ratio Social Media",
      "display_name": "\ud83d\udd33 CR Aspect Ratio Social Media",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR_Aspect Ratio For Print": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 8192
                  }
              ],
              "aspect_ratio": [
                  [
                      "A4 - 2480x3508",
                      "A5 - 1748x2480",
                      "A6 - 1240x1748",
                      "A7 - 874x1240",
                      "A8 - 614x874",
                      "A9 - 437x614",
                      "A10 - 307x437",
                      "B4 - 2953x4169",
                      "B5 - 2079x2953",
                      "B6 - 1476x2079",
                      "B7 - 1039x1476",
                      "B8 - 732x1039",
                      "B9 - 520x732",
                      "B10 - 366x520",
                      "C4 - 2705x3827",
                      "C5 - 1913x2705",
                      "C6 - 1346x1913",
                      "C7 - 957x1346",
                      "C8 - 673x957",
                      "C9 - 472x673",
                      "C10 - 331x472",
                      "Letter (8.5 x 11 inches) - 2550x3300",
                      "Legal (8.5 x 14 inches) - 2550x4200"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "prescale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100.0,
                      "step": 0.1
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor",
              "prescale_factor",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "upscale_factor",
          "prescale_factor",
          "batch_size",
          "empty_latent",
          "show_help"
      ],
      "name": "CR_Aspect Ratio For Print",
      "display_name": "\ud83d\udd33 CR_Aspect Ratio For Print",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd33 Aspect Ratio",
      "output_node": false
  },
  "CR Image Size": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "upscale_factor"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "Width",
          "Height",
          "upscale_factor",
          "show_help"
      ],
      "name": "CR Image Size",
      "display_name": "CR Image Size (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Aspect Ratio SDXL": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "aspect_ratio": [
                  [
                      "custom",
                      "1:1 square 1024x1024",
                      "3:4 portrait 896x1152",
                      "5:8 portrait 832x1216",
                      "9:16 portrait 768x1344",
                      "9:21 portrait 640x1536",
                      "4:3 landscape 1152x896",
                      "3:2 landscape 1216x832",
                      "16:9 landscape 1344x768",
                      "21:9 landscape 1536x640"
                  ]
              ],
              "swap_dimensions": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "upscale_factor1": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2000
                  }
              ],
              "upscale_factor2": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2000
                  }
              ],
              "batch_size": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "aspect_ratio",
              "swap_dimensions",
              "upscale_factor1",
              "upscale_factor2",
              "batch_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "INT",
          "FLOAT",
          "FLOAT",
          "INT",
          "show_help"
      ],
      "name": "CR Aspect Ratio SDXL",
      "display_name": "CR Aspect Ratio SDXL (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR SDXL Prompt Mixer": {
      "input": {
          "required": {},
          "optional": {
              "prompt_positive": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "BASE_POSITIVE"
                  }
              ],
              "prompt_negative": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "BASE_NEGATIVE"
                  }
              ],
              "style_positive": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "REFINER_POSTIVE"
                  }
              ],
              "style_negative": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "REFINER_NEGATIVE"
                  }
              ],
              "preset": [
                  [
                      "preset 1",
                      "preset 2",
                      "preset 3",
                      "preset 4",
                      "preset 5"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prompt_positive",
              "prompt_negative",
              "style_positive",
              "style_negative",
              "preset"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pos_g",
          "pos_l",
          "pos_r",
          "neg_g",
          "neg_l",
          "neg_r"
      ],
      "name": "CR SDXL Prompt Mixer",
      "display_name": "CR SDXL Prompt Mixer (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Seed to Int": {
      "input": {
          "required": {
              "seed": [
                  "SEED"
              ]
          }
      },
      "input_order": {
          "required": [
              "seed"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Seed to Int",
      "display_name": "CR Seed to Int (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Apply ControlNet": {
      "input": {
          "required": {
              "conditioning": [
                  "CONDITIONING"
              ],
              "control_net": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "switch": [
                  [
                      "On",
                      "Off"
                  ]
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning",
              "control_net",
              "image",
              "switch",
              "strength"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "show_help"
      ],
      "name": "CR Apply ControlNet",
      "display_name": "\ud83d\udd79\ufe0f CR Apply ControlNet",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
      "output_node": false
  },
  "CR Multi-ControlNet Stack": {
      "input": {
          "required": {},
          "optional": {
              "switch_1": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "controlnet_1": [
                  [
                      "None",
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "controlnet_strength_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent_1": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "switch_2": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "controlnet_2": [
                  [
                      "None",
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "controlnet_strength_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent_2": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "switch_3": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "controlnet_3": [
                  [
                      "None",
                      "UnionFlux.safetensors",
                      "control_sd15_canny.pth",
                      "control_sd15_depth.pth",
                      "control_sd15_normal.pth",
                      "control_v11f1p_sd15_depth_fp16.safetensors",
                      "control_v11p_sd15_lineart_fp16.safetensors",
                      "control_v11p_sd15_openpose.pth",
                      "diffusers_xl_canny_full.safetensors",
                      "diffusers_xl_depth_full.safetensors",
                      "flux-canny-controlnet-v3.safetensors",
                      "flux-depth-controlnet-v3.safetensors",
                      "jasperai_flux_depth_controlnet.safetensors",
                      "jasperai_flux_surface_normals_controlnet.safetensors",
                      "sai_xl_canny_256lora.safetensors",
                      "sai_xl_depth_256lora.safetensors"
                  ]
              ],
              "controlnet_strength_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent_3": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_percent_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "image_3": [
                  "IMAGE"
              ],
              "controlnet_stack": [
                  "CONTROL_NET_STACK"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "switch_1",
              "controlnet_1",
              "controlnet_strength_1",
              "start_percent_1",
              "end_percent_1",
              "switch_2",
              "controlnet_2",
              "controlnet_strength_2",
              "start_percent_2",
              "end_percent_2",
              "switch_3",
              "controlnet_3",
              "controlnet_strength_3",
              "start_percent_3",
              "end_percent_3",
              "image_1",
              "image_2",
              "image_3",
              "controlnet_stack"
          ]
      },
      "output": [
          "CONTROL_NET_STACK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONTROLNET_STACK",
          "show_help"
      ],
      "name": "CR Multi-ControlNet Stack",
      "display_name": "\ud83d\udd79\ufe0f CR Multi-ControlNet Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
      "output_node": false
  },
  "CR Apply Multi-ControlNet": {
      "input": {
          "required": {
              "base_positive": [
                  "CONDITIONING"
              ],
              "base_negative": [
                  "CONDITIONING"
              ],
              "switch": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "controlnet_stack": [
                  "CONTROL_NET_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "base_positive",
              "base_negative",
              "switch",
              "controlnet_stack"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "base_pos",
          "base_neg",
          "show_help"
      ],
      "name": "CR Apply Multi-ControlNet",
      "display_name": "\ud83d\udd79\ufe0f CR Apply Multi-ControlNet",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd79\ufe0f ControlNet",
      "output_node": false
  },
  "CR Load LoRA": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "switch": [
                  [
                      "On",
                      "Off"
                  ]
              ],
              "lora_name": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "switch",
              "lora_name",
              "strength_model",
              "strength_clip"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "show_help"
      ],
      "name": "CR Load LoRA",
      "display_name": "\ud83d\udc8a CR Load LoRA",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
      "output_node": false
  },
  "CR LoRA Stack": {
      "input": {
          "required": {
              "switch_1": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "lora_name_1": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "model_weight_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "switch_2": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "lora_name_2": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "model_weight_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "switch_3": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "lora_name_3": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "model_weight_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "lora_stack": [
                  "LORA_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "switch_1",
              "lora_name_1",
              "model_weight_1",
              "clip_weight_1",
              "switch_2",
              "lora_name_2",
              "model_weight_2",
              "clip_weight_2",
              "switch_3",
              "lora_name_3",
              "model_weight_3",
              "clip_weight_3"
          ],
          "optional": [
              "lora_stack"
          ]
      },
      "output": [
          "LORA_STACK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LORA_STACK",
          "show_help"
      ],
      "name": "CR LoRA Stack",
      "display_name": "\ud83d\udc8a CR LoRA Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
      "output_node": false
  },
  "CR Random LoRA Stack": {
      "input": {
          "required": {
              "exclusive_mode": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "force_randomize_after_stride": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "lora_name_1": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "switch_1": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "chance_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "model_weight_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_name_2": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "switch_2": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "chance_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "model_weight_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_name_3": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "switch_3": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "chance_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "model_weight_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "lora_stack": [
                  "LORA_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "exclusive_mode",
              "stride",
              "force_randomize_after_stride",
              "lora_name_1",
              "switch_1",
              "chance_1",
              "model_weight_1",
              "clip_weight_1",
              "lora_name_2",
              "switch_2",
              "chance_2",
              "model_weight_2",
              "clip_weight_2",
              "lora_name_3",
              "switch_3",
              "chance_3",
              "model_weight_3",
              "clip_weight_3"
          ],
          "optional": [
              "lora_stack"
          ]
      },
      "output": [
          "LORA_STACK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LORA_STACK"
      ],
      "name": "CR Random LoRA Stack",
      "display_name": "\ud83d\udc8a CR Random LoRA Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
      "output_node": false
  },
  "CR Random Weight LoRA": {
      "input": {
          "required": {
              "stride": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "force_randomize_after_stride": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "lora_name": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "switch": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "weight_min": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "weight_max": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "lora_stack": [
                  "LORA_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "stride",
              "force_randomize_after_stride",
              "lora_name",
              "switch",
              "weight_min",
              "weight_max",
              "clip_weight"
          ],
          "optional": [
              "lora_stack"
          ]
      },
      "output": [
          "LORA_STACK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LORA_STACK"
      ],
      "name": "CR Random Weight LoRA",
      "display_name": "\ud83d\udc8a CR Random Weight LoRA",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
      "output_node": false
  },
  "CR Apply LoRA Stack": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "lora_stack": [
                  "LORA_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "clip",
              "lora_stack"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "show_help"
      ],
      "name": "CR Apply LoRA Stack",
      "display_name": "\ud83d\udc8a CR Apply LoRA Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udc8a LoRA",
      "output_node": false
  },
  "CR Apply Model Merge": {
      "input": {
          "required": {
              "model_stack": [
                  "MODEL_STACK"
              ],
              "merge_method": [
                  [
                      "Recursive",
                      "Weighted"
                  ]
              ],
              "normalise_ratios": [
                  [
                      "Yes",
                      "No"
                  ]
              ],
              "weight_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model_stack",
              "merge_method",
              "normalise_ratios",
              "weight_factor"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "model_mix_info",
          "show_help"
      ],
      "name": "CR Apply Model Merge",
      "display_name": "\u26cf\ufe0f CR Apply Model Merge",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\u26cf\ufe0f Model Merge",
      "output_node": false
  },
  "CR Model Merge Stack": {
      "input": {
          "required": {
              "switch_1": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "ckpt_name1": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "model_ratio1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "clip_ratio1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "switch_2": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "ckpt_name2": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "model_ratio2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "clip_ratio2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "switch_3": [
                  [
                      "Off",
                      "On"
                  ]
              ],
              "ckpt_name3": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "model_ratio3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "clip_ratio3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "model_stack": [
                  "MODEL_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "switch_1",
              "ckpt_name1",
              "model_ratio1",
              "clip_ratio1",
              "switch_2",
              "ckpt_name2",
              "model_ratio2",
              "clip_ratio2",
              "switch_3",
              "ckpt_name3",
              "model_ratio3",
              "clip_ratio3"
          ],
          "optional": [
              "model_stack"
          ]
      },
      "output": [
          "MODEL_STACK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL_STACK",
          "show_help"
      ],
      "name": "CR Model Merge Stack",
      "display_name": "\u26cf\ufe0f CR Model Merge Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\u26cf\ufe0f Model Merge",
      "output_node": false
  },
  "CR Data Bus In": {
      "input": {
          "required": {},
          "optional": {
              "pipe": [
                  "*"
              ],
              "any1": [
                  "*"
              ],
              "any2": [
                  "*"
              ],
              "any3": [
                  "*"
              ],
              "any4": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "pipe",
              "any1",
              "any2",
              "any3",
              "any4"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR Data Bus In",
      "display_name": "\ud83d\ude8c CR Data Bus In",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
      "output_node": false
  },
  "CR Data Bus Out": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ]
      },
      "output": [
          "PIPE_LINE",
          "*",
          "*",
          "*",
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pipe",
          "any1",
          "any2",
          "any3",
          "any4",
          "show_help"
      ],
      "name": "CR Data Bus Out",
      "display_name": "\ud83d\ude8c CR Data Bus Out",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
      "output_node": false
  },
  "CR 8 Channel In": {
      "input": {
          "required": {},
          "optional": {
              "pipe": [
                  "*"
              ],
              "ch1": [
                  "*"
              ],
              "ch2": [
                  "*"
              ],
              "ch3": [
                  "*"
              ],
              "ch4": [
                  "*"
              ],
              "ch5": [
                  "*"
              ],
              "ch6": [
                  "*"
              ],
              "ch7": [
                  "*"
              ],
              "ch8": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "pipe",
              "ch1",
              "ch2",
              "ch3",
              "ch4",
              "ch5",
              "ch6",
              "ch7",
              "ch8"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR 8 Channel In",
      "display_name": "\ud83d\ude8c CR 8 Channel In",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
      "output_node": false
  },
  "CR 8 Channel Out": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ]
      },
      "output": [
          "PIPE_LINE",
          "*",
          "*",
          "*",
          "*",
          "*",
          "*",
          "*",
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pipe",
          "ch1",
          "ch2",
          "ch3",
          "ch4",
          "ch5",
          "ch6",
          "ch7",
          "ch8",
          "show_help"
      ],
      "name": "CR 8 Channel Out",
      "display_name": "\ud83d\ude8c CR 8 Channel Out",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\ude8c Bus",
      "output_node": false
  },
  "CR Module Pipe Loader": {
      "input": {
          "required": {},
          "optional": {
              "model": [
                  "MODEL"
              ],
              "pos": [
                  "CONDITIONING"
              ],
              "neg": [
                  "CONDITIONING"
              ],
              "latent": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "clip": [
                  "CLIP"
              ],
              "controlnet": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "model",
              "pos",
              "neg",
              "latent",
              "vae",
              "clip",
              "controlnet",
              "image",
              "seed"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR Module Pipe Loader",
      "display_name": "\u2708\ufe0f CR Module Pipe Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
      "output_node": false
  },
  "CR Module Input": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ]
      },
      "output": [
          "PIPE_LINE",
          "MODEL",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "VAE",
          "CLIP",
          "CONTROL_NET",
          "IMAGE",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pipe",
          "model",
          "pos",
          "neg",
          "latent",
          "vae",
          "clip",
          "controlnet",
          "image",
          "seed",
          "show_help"
      ],
      "name": "CR Module Input",
      "display_name": "\u2708\ufe0f CR Module Input",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
      "output_node": false
  },
  "CR Module Output": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          },
          "optional": {
              "model": [
                  "MODEL"
              ],
              "pos": [
                  "CONDITIONING"
              ],
              "neg": [
                  "CONDITIONING"
              ],
              "latent": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "clip": [
                  "CLIP"
              ],
              "controlnet": [
                  "CONTROL_NET"
              ],
              "image": [
                  "IMAGE"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ],
          "optional": [
              "model",
              "pos",
              "neg",
              "latent",
              "vae",
              "clip",
              "controlnet",
              "image",
              "seed"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR Module Output",
      "display_name": "\u2708\ufe0f CR Module Output",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\u2708\ufe0f Module",
      "output_node": false
  },
  "CR Image Pipe In": {
      "input": {
          "required": {},
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2000
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "image",
              "width",
              "height",
              "upscale_factor"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR Image Pipe In",
      "display_name": "\ud83d\udee9 CR Image Pipe In",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
      "output_node": false
  },
  "CR Image Pipe Edit": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048,
                      "forceInput": true
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048,
                      "forceInput": true
                  }
              ],
              "upscale_factor": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2000,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ],
          "optional": [
              "image",
              "width",
              "height",
              "upscale_factor"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pipe",
          "show_help"
      ],
      "name": "CR Image Pipe Edit",
      "display_name": "\ud83d\udee9\ufe0f CR Image Pipe Edit",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
      "output_node": false
  },
  "CR Image Pipe Out": {
      "input": {
          "required": {
              "pipe": [
                  "PIPE_LINE"
              ]
          }
      },
      "input_order": {
          "required": [
              "pipe"
          ]
      },
      "output": [
          "PIPE_LINE",
          "IMAGE",
          "INT",
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pipe",
          "image",
          "width",
          "height",
          "upscale_factor",
          "show_help"
      ],
      "name": "CR Image Pipe Out",
      "display_name": "\ud83d\udee9\ufe0f CR Image Pipe Out",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe/\ud83d\udee9\ufe0f Image",
      "output_node": false
  },
  "CR Pipe Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ],
              "pipe1": [
                  "PIPE_LINE"
              ],
              "pipe2": [
                  "PIPE_LINE"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input",
              "pipe1",
              "pipe2"
          ]
      },
      "output": [
          "PIPE_LINE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "PIPE_LINE",
          "show_help"
      ],
      "name": "CR Pipe Switch",
      "display_name": "\ud83d\udd00\ufe0f CR Pipe Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udfb7 Pipe",
      "output_node": true
  },
  "CR SDXL Prompt Mix Presets": {
      "input": {
          "required": {},
          "optional": {
              "prompt_positive": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt_pos"
                  }
              ],
              "prompt_negative": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt_neg"
                  }
              ],
              "style_positive": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "style_pos"
                  }
              ],
              "style_negative": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "style_neg"
                  }
              ],
              "preset": [
                  [
                      "default with no style text",
                      "default with style text",
                      "style boost 1",
                      "style boost 2",
                      "style text to refiner"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "prompt_positive",
              "prompt_negative",
              "style_positive",
              "style_negative",
              "preset"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "pos_g",
          "pos_l",
          "pos_r",
          "neg_g",
          "neg_l",
          "neg_r",
          "show_help"
      ],
      "name": "CR SDXL Prompt Mix Presets",
      "display_name": "\ud83c\udf1f CR SDXL Prompt Mix Presets",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
      "output_node": false
  },
  "CR SDXL Style Text": {
      "input": {
          "required": {
              "positive_style": [
                  "STRING",
                  {
                      "default": "POS_STYLE",
                      "multiline": true
                  }
              ],
              "negative_style": [
                  "STRING",
                  {
                      "default": "NEG_STYLE",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "positive_style",
              "negative_style"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "positive_prompt_text_l",
          "negative_prompt_text_l",
          "show_help"
      ],
      "name": "CR SDXL Style Text",
      "display_name": "\ud83c\udf1f CR SDXL Style Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
      "output_node": false
  },
  "CR SDXL Base Prompt Encoder": {
      "input": {
          "required": {
              "base_clip": [
                  "CLIP"
              ],
              "pos_g": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "POS_G"
                  }
              ],
              "pos_l": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "POS_L"
                  }
              ],
              "neg_g": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "NEG_G"
                  }
              ],
              "neg_l": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "NEG_L"
                  }
              ],
              "preset": [
                  [
                      "preset A",
                      "preset B",
                      "preset C"
                  ]
              ],
              "base_width": [
                  "INT",
                  {
                      "default": 4096.0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "base_height": [
                  "INT",
                  {
                      "default": 4096.0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "crop_w": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "crop_h": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "target_width": [
                  "INT",
                  {
                      "default": 4096.0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "target_height": [
                  "INT",
                  {
                      "default": 4096.0,
                      "min": 0,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "base_clip",
              "pos_g",
              "pos_l",
              "neg_g",
              "neg_l",
              "preset",
              "base_width",
              "base_height",
              "crop_w",
              "crop_h",
              "target_width",
              "target_height"
          ]
      },
      "output": [
          "CONDITIONING",
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "base_positive",
          "base_negative",
          "show_help"
      ],
      "name": "CR SDXL Base Prompt Encoder",
      "display_name": "\ud83c\udf1f CR SDXL Base Prompt Encoder",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83c\udf1f SDXL",
      "output_node": false
  },
  "CR Multi Upscale Stack": {
      "input": {
          "required": {
              "switch_1": [
                  [
                      "On",
                      "Off"
                  ]
              ],
              "upscale_model_1": [
                  [
                      "None"
                  ]
              ],
              "rescale_factor_1": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 16.0,
                      "step": 0.01
                  }
              ],
              "switch_2": [
                  [
                      "On",
                      "Off"
                  ]
              ],
              "upscale_model_2": [
                  [
                      "None"
                  ]
              ],
              "rescale_factor_2": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 16.0,
                      "step": 0.01
                  }
              ],
              "switch_3": [
                  [
                      "On",
                      "Off"
                  ]
              ],
              "upscale_model_3": [
                  [
                      "None"
                  ]
              ],
              "rescale_factor_3": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 16.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "upscale_stack": [
                  "UPSCALE_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "switch_1",
              "upscale_model_1",
              "rescale_factor_1",
              "switch_2",
              "upscale_model_2",
              "rescale_factor_2",
              "switch_3",
              "upscale_model_3",
              "rescale_factor_3"
          ],
          "optional": [
              "upscale_stack"
          ]
      },
      "output": [
          "UPSCALE_STACK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "UPSCALE_STACK",
          "show_help"
      ],
      "name": "CR Multi Upscale Stack",
      "display_name": "\ud83d\udd0d CR Multi Upscale Stack",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
      "output_node": false
  },
  "CR Upscale Image": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "upscale_model": [
                  []
              ],
              "mode": [
                  [
                      "rescale",
                      "resize"
                  ]
              ],
              "rescale_factor": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0.01,
                      "max": 16.0,
                      "step": 0.01
                  }
              ],
              "resize_width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 48000,
                      "step": 1
                  }
              ],
              "resampling_method": [
                  [
                      "lanczos",
                      "nearest",
                      "bilinear",
                      "bicubic"
                  ]
              ],
              "supersample": [
                  [
                      "true",
                      "false"
                  ]
              ],
              "rounding_modulus": [
                  "INT",
                  {
                      "default": 8,
                      "min": 8,
                      "max": 1024,
                      "step": 8
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "upscale_model",
              "mode",
              "rescale_factor",
              "resize_width",
              "resampling_method",
              "supersample",
              "rounding_modulus"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Upscale Image",
      "display_name": "\ud83d\udd0d CR Upscale Image",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
      "output_node": false
  },
  "CR Apply Multi Upscale": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "resampling_method": [
                  [
                      "lanczos",
                      "nearest",
                      "bilinear",
                      "bicubic"
                  ]
              ],
              "supersample": [
                  [
                      "true",
                      "false"
                  ]
              ],
              "rounding_modulus": [
                  "INT",
                  {
                      "default": 8,
                      "min": 8,
                      "max": 1024,
                      "step": 8
                  }
              ],
              "upscale_stack": [
                  "UPSCALE_STACK"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "resampling_method",
              "supersample",
              "rounding_modulus",
              "upscale_stack"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Apply Multi Upscale",
      "display_name": "\ud83d\udd0d CR Apply Multi Upscale",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udd0d Upscale",
      "output_node": false
  },
  "CR XY List": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "list1": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "x"
                  }
              ],
              "x_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "x_append": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "x_annotation_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "list2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "y"
                  }
              ],
              "y_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "y_append": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "y_annotation_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "list1",
              "x_prepend",
              "x_append",
              "x_annotation_prepend",
              "list2",
              "y_prepend",
              "y_append",
              "y_annotation_prepend"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "X",
          "Y",
          "x_annotation",
          "y_annotation",
          "trigger",
          "show_help"
      ],
      "name": "CR XY List",
      "display_name": "\ud83d\udcc9 CR XY List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
      "output_node": false
  },
  "CR XY Interpolate": {
      "input": {
          "required": {
              "x_columns": [
                  "INT",
                  {
                      "default": 5.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "x_start_value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "x_step": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "x_annotation_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "y_rows": [
                  "INT",
                  {
                      "default": 5.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "y_start_value": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "y_step": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "y_annotation_prepend": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "index": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "gradient_profile": [
                  [
                      "Lerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "x_columns",
              "x_start_value",
              "x_step",
              "x_annotation_prepend",
              "y_rows",
              "y_start_value",
              "y_step",
              "y_annotation_prepend",
              "index",
              "gradient_profile"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "STRING",
          "STRING",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "X",
          "Y",
          "x_annotation",
          "y_annotation",
          "trigger",
          "show_help"
      ],
      "name": "CR XY Interpolate",
      "display_name": "\ud83d\udcc9 CR XY Interpolate",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
      "output_node": false
  },
  "CR XY From Folder": {
      "input": {
          "required": {
              "image_folder": [
                  []
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "end_index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "max_columns": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "x_annotation": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "y_annotation": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1
                  }
              ],
              "gap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0
                  }
              ]
          },
          "optional": {
              "trigger": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image_folder",
              "start_index",
              "end_index",
              "max_columns",
              "x_annotation",
              "y_annotation",
              "font_size",
              "gap"
          ],
          "optional": [
              "trigger"
          ]
      },
      "output": [
          "IMAGE",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "trigger",
          "show_help"
      ],
      "name": "CR XY From Folder",
      "display_name": "\ud83d\udcc9 CR XY From Folder",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
      "output_node": false
  },
  "CR XY Save Grid Image": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Save",
                      "Preview"
                  ]
              ],
              "output_folder": [
                  []
              ],
              "image": [
                  "IMAGE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "CR"
                  }
              ],
              "file_format": [
                  [
                      "webp",
                      "jpg",
                      "png",
                      "tif"
                  ]
              ]
          },
          "optional": {
              "output_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "trigger": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "output_folder",
              "image",
              "filename_prefix",
              "file_format"
          ],
          "optional": [
              "output_path",
              "trigger"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "CR XY Save Grid Image",
      "display_name": "\ud83d\udcc9 CR XY Save Grid Image",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
      "output_node": true
  },
  "CR XY Index": {
      "input": {
          "required": {
              "x_columns": [
                  "INT",
                  {
                      "default": 5.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "y_rows": [
                  "INT",
                  {
                      "default": 5.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "index": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x_columns",
              "y_rows",
              "index"
          ]
      },
      "output": [
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "x",
          "y",
          "show_help"
      ],
      "name": "CR XY Index",
      "display_name": "\ud83d\udcc9 CR XY Index",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\u2728 Essential/\ud83d\udcc9 XY Grid",
      "output_node": false
  },
  "CR Halftone Grid": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "dot_style": [
                  [
                      "Accent",
                      "afmhot",
                      "autumn",
                      "binary",
                      "Blues",
                      "bone",
                      "BrBG",
                      "brg",
                      "BuGn",
                      "BuPu",
                      "bwr",
                      "cividis",
                      "CMRmap",
                      "cool",
                      "coolwarm",
                      "copper",
                      "cubehelix",
                      "Dark2",
                      "flag",
                      "gist_earth",
                      "gist_gray",
                      "gist_heat",
                      "gist_rainbow",
                      "gist_stern",
                      "gist_yarg",
                      "GnBu",
                      "gnuplot",
                      "gnuplot2",
                      "gray",
                      "Greens",
                      "Greys",
                      "hot",
                      "hsv",
                      "inferno",
                      "jet",
                      "magma",
                      "nipy_spectral",
                      "ocean",
                      "Oranges",
                      "OrRd",
                      "Paired",
                      "Pastel1",
                      "Pastel2",
                      "pink",
                      "PiYG",
                      "plasma",
                      "PRGn",
                      "prism",
                      "PuBu",
                      "PuBuGn",
                      "PuOr",
                      "PuRd",
                      "Purples",
                      "rainbow",
                      "RdBu",
                      "RdGy",
                      "RdPu",
                      "RdYlBu",
                      "RdYlGn",
                      "Reds",
                      "seismic",
                      "Set1",
                      "Set2",
                      "Set3",
                      "Spectral",
                      "spring",
                      "summer",
                      "tab10",
                      "tab20",
                      "tab20b",
                      "tab20c",
                      "terrain",
                      "turbo",
                      "twilight",
                      "twilight_shifted",
                      "viridis",
                      "winter",
                      "Wistia",
                      "YlGn",
                      "YlGnBu",
                      "YlOrBr",
                      "YlOrRd"
                  ]
              ],
              "reverse_dot_style": [
                  [
                      "No",
                      "Yes"
                  ]
              ],
              "dot_frequency": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 200,
                      "step": 1
                  }
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "x_pos": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "y_pos": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "dot_style",
              "reverse_dot_style",
              "dot_frequency",
              "background_color",
              "x_pos",
              "y_pos"
          ],
          "optional": [
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Halftone Grid",
      "display_name": "\ud83d\udfeb CR Halftone Grid",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Color Bars": {
      "input": {
          "required": {
              "mode": [
                  [
                      "2-color"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "color_1": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color_2": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "orientation": [
                  [
                      "vertical",
                      "horizontal",
                      "diagonal",
                      "alt_diagonal"
                  ]
              ],
              "bar_frequency": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 200,
                      "step": 1
                  }
              ],
              "offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 20,
                      "step": 0.05
                  }
              ]
          },
          "optional": {
              "color1_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color2_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "width",
              "height",
              "color_1",
              "color_2",
              "orientation",
              "bar_frequency",
              "offset"
          ],
          "optional": [
              "color1_hex",
              "color2_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Color Bars",
      "display_name": "\ud83d\udfeb CR Color Bars",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Style Bars": {
      "input": {
          "required": {
              "mode": [
                  [
                      "color bars",
                      "sin wave",
                      "gradient bars"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "bar_style": [
                  [
                      "Accent",
                      "afmhot",
                      "autumn",
                      "binary",
                      "Blues",
                      "bone",
                      "BrBG",
                      "brg",
                      "BuGn",
                      "BuPu",
                      "bwr",
                      "cividis",
                      "CMRmap",
                      "cool",
                      "coolwarm",
                      "copper",
                      "cubehelix",
                      "Dark2",
                      "flag",
                      "gist_earth",
                      "gist_gray",
                      "gist_heat",
                      "gist_rainbow",
                      "gist_stern",
                      "gist_yarg",
                      "GnBu",
                      "gnuplot",
                      "gnuplot2",
                      "gray",
                      "Greens",
                      "Greys",
                      "hot",
                      "hsv",
                      "inferno",
                      "jet",
                      "magma",
                      "nipy_spectral",
                      "ocean",
                      "Oranges",
                      "OrRd",
                      "Paired",
                      "Pastel1",
                      "Pastel2",
                      "pink",
                      "PiYG",
                      "plasma",
                      "PRGn",
                      "prism",
                      "PuBu",
                      "PuBuGn",
                      "PuOr",
                      "PuRd",
                      "Purples",
                      "rainbow",
                      "RdBu",
                      "RdGy",
                      "RdPu",
                      "RdYlBu",
                      "RdYlGn",
                      "Reds",
                      "seismic",
                      "Set1",
                      "Set2",
                      "Set3",
                      "Spectral",
                      "spring",
                      "summer",
                      "tab10",
                      "tab20",
                      "tab20b",
                      "tab20c",
                      "terrain",
                      "turbo",
                      "twilight",
                      "twilight_shifted",
                      "viridis",
                      "winter",
                      "Wistia",
                      "YlGn",
                      "YlGnBu",
                      "YlOrBr",
                      "YlOrRd"
                  ]
              ],
              "orientation": [
                  [
                      "vertical",
                      "horizontal"
                  ]
              ],
              "bar_frequency": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 200,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "width",
              "height",
              "bar_style",
              "orientation",
              "bar_frequency"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Style Bars",
      "display_name": "\ud83d\udfea CR Style Bars",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Checker Pattern": {
      "input": {
          "required": {
              "mode": [
                  [
                      "regular",
                      "stepped"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "color_1": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color_2": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "grid_frequency": [
                  "INT",
                  {
                      "default": 8,
                      "min": 1,
                      "max": 200,
                      "step": 1
                  }
              ],
              "step": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 200,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "color1_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color2_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "width",
              "height",
              "color_1",
              "color_2",
              "grid_frequency",
              "step"
          ],
          "optional": [
              "color1_hex",
              "color2_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Checker Pattern",
      "display_name": "\ud83d\udfe6 CR Checker Pattern",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Polygons": {
      "input": {
          "required": {
              "mode": [
                  [
                      "hexagons",
                      "triangles"
                  ]
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 512
                  }
              ],
              "columns": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 512
                  }
              ],
              "face_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "line_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "line_width": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 512
                  }
              ]
          },
          "optional": {
              "face_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "line_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "width",
              "height",
              "rows",
              "columns",
              "face_color",
              "background_color",
              "line_color",
              "line_width"
          ],
          "optional": [
              "face_color_hex",
              "bg_color_hex",
              "line_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Polygons",
      "display_name": "\ud83d\udfe9 CR Polygons",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Color Gradient": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "start_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "end_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "gradient_distance": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 2,
                      "step": 0.05
                  }
              ],
              "linear_transition": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ],
              "orientation": [
                  [
                      "vertical",
                      "horizontal"
                  ]
              ]
          },
          "optional": {
              "start_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "end_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "start_color",
              "end_color",
              "gradient_distance",
              "linear_transition",
              "orientation"
          ],
          "optional": [
              "start_color_hex",
              "end_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Color Gradient",
      "display_name": "\ud83d\udfe8 CR Color Gradient",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Radial Gradient": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "start_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "end_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "gradient_distance": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 2,
                      "step": 0.05
                  }
              ],
              "radial_center_x": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ],
              "radial_center_y": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ]
          },
          "optional": {
              "start_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "end_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "start_color",
              "end_color",
              "gradient_distance",
              "radial_center_x",
              "radial_center_y"
          ],
          "optional": [
              "start_color_hex",
              "end_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_Help"
      ],
      "name": "CR Radial Gradient",
      "display_name": "\ud83d\udfe8 CR Radial Gradient",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Starburst Lines": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "num_lines": [
                  "INT",
                  {
                      "default": 6,
                      "min": 1,
                      "max": 500
                  }
              ],
              "line_length": [
                  "FLOAT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "line_width": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 512
                  }
              ],
              "line_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "center_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "center_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "rotation": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 720
                  }
              ]
          },
          "optional": {
              "line_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "num_lines",
              "line_length",
              "line_width",
              "line_color",
              "background_color",
              "center_x",
              "center_y",
              "rotation"
          ],
          "optional": [
              "line_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Starburst Lines",
      "display_name": "\ud83d\udfe7 CR Starburst Lines",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Starburst Colors": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "num_triangles": [
                  "INT",
                  {
                      "default": 6,
                      "min": 1,
                      "max": 512
                  }
              ],
              "color_1": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color_2": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "center_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 512
                  }
              ],
              "center_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 512
                  }
              ],
              "rotation": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 720
                  }
              ],
              "bbox_factor": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 2,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "color1_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color2_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "num_triangles",
              "color_1",
              "color_2",
              "center_x",
              "center_y",
              "rotation",
              "bbox_factor"
          ],
          "optional": [
              "color1_hex",
              "color2_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Starburst Colors",
      "display_name": "\ud83d\udfe7 CR Starburst Colors",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Simple Binary Pattern": {
      "input": {
          "required": {
              "binary_pattern": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "10101"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "binary_pattern",
              "width",
              "height"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Simple Binary Pattern",
      "display_name": "\ud83d\udfe5 CR Simple Binary Pattern",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Binary Pattern": {
      "input": {
          "required": {
              "binary_pattern": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "10101"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color_0": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color_1": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "jitter_distance": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "bias": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          },
          "optional": {
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color0_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color1_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "outline_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "binary_pattern",
              "width",
              "height",
              "background_color",
              "color_0",
              "color_1",
              "outline_thickness",
              "outline_color",
              "jitter_distance",
              "bias"
          ],
          "optional": [
              "bg_color_hex",
              "color0_hex",
              "color1_hex",
              "outline_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Binary Pattern",
      "display_name": "\ud83d\udfe5 CR Binary Pattern",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf08 Pattern",
      "output_node": false
  },
  "CR Draw Shape": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "shape": [
                  [
                      "circle",
                      "oval",
                      "square",
                      "diamond",
                      "triangle",
                      "hexagon",
                      "octagon",
                      "quarter circle",
                      "half circle",
                      "quarter circle",
                      "starburst",
                      "star",
                      "cross",
                      "diagonal regions"
                  ]
              ],
              "shape_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "back_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "x_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "y_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "zoom": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.05
                  }
              ],
              "rotation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 3600.0,
                      "step": 0.1
                  }
              ]
          },
          "optional": {
              "shape_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "shape",
              "shape_color",
              "back_color",
              "x_offset",
              "y_offset",
              "zoom",
              "rotation"
          ],
          "optional": [
              "shape_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Draw Shape",
      "display_name": "\ud83d\udfe1 CR Draw Shape",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
      "output_node": false
  },
  "CR Draw Pie": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "pie_start": [
                  "FLOAT",
                  {
                      "default": 30.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.1
                  }
              ],
              "pie_stop": [
                  "FLOAT",
                  {
                      "default": 330.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.1
                  }
              ],
              "shape_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "back_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "x_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "y_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "zoom": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.05
                  }
              ],
              "rotation": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 3600.0,
                      "step": 0.1
                  }
              ]
          },
          "optional": {
              "shape_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "pie_start",
              "pie_stop",
              "shape_color",
              "back_color",
              "x_offset",
              "y_offset",
              "zoom",
              "rotation"
          ],
          "optional": [
              "shape_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Draw Pie",
      "display_name": "\ud83d\udfe2 CR Draw Pie",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
      "output_node": false
  },
  "CR Random Shape Pattern": {
      "input": {
          "required": {
              "width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 4096
                  }
              ],
              "num_rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 128
                  }
              ],
              "num_cols": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 128
                  }
              ],
              "color1": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "color2": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ]
          },
          "optional": {
              "color1_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "color2_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "width",
              "height",
              "num_rows",
              "num_cols",
              "color1",
              "color2"
          ],
          "optional": [
              "color1_hex",
              "color2_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Random Shape Pattern",
      "display_name": "\ud83d\udd35 CR Random Shape Pattern",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udfe3 Shape",
      "output_node": false
  },
  "CR Overlay Text": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "align": [
                  [
                      "center",
                      "top",
                      "bottom"
                  ]
              ],
              "justify": [
                  [
                      "center",
                      "left",
                      "right"
                  ]
              ],
              "margins": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "line_spacing": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "position_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "position_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "rotation_angle": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -360.0,
                      "max": 360.0,
                      "step": 0.1
                  }
              ],
              "rotation_options": [
                  [
                      "text center",
                      "image center"
                  ]
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text",
              "font_name",
              "font_size",
              "font_color",
              "align",
              "justify",
              "margins",
              "line_spacing",
              "position_x",
              "position_y",
              "rotation_angle",
              "rotation_options"
          ],
          "optional": [
              "font_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Overlay Text",
      "display_name": "\ud83d\udd24 CR Overlay Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Draw Text": {
      "input": {
          "required": {
              "image_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "image_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 2048
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "align": [
                  [
                      "center",
                      "top",
                      "bottom"
                  ]
              ],
              "justify": [
                  [
                      "center",
                      "left",
                      "right"
                  ]
              ],
              "margins": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "line_spacing": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "position_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "position_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "rotation_angle": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -360.0,
                      "max": 360.0,
                      "step": 0.1
                  }
              ],
              "rotation_options": [
                  [
                      "text center",
                      "image center"
                  ]
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image_width",
              "image_height",
              "text",
              "font_name",
              "font_size",
              "font_color",
              "background_color",
              "align",
              "justify",
              "margins",
              "line_spacing",
              "position_x",
              "position_y",
              "rotation_angle",
              "rotation_options"
          ],
          "optional": [
              "font_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Draw Text",
      "display_name": "\ud83d\udd24\ufe0f CR Draw Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Mask Text": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "align": [
                  [
                      "center",
                      "top",
                      "bottom"
                  ]
              ],
              "justify": [
                  [
                      "center",
                      "left",
                      "right"
                  ]
              ],
              "margins": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "line_spacing": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "position_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "position_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "rotation_angle": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -360.0,
                      "max": 360.0,
                      "step": 0.1
                  }
              ],
              "rotation_options": [
                  [
                      "text center",
                      "image center"
                  ]
              ]
          },
          "optional": {
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text",
              "font_name",
              "font_size",
              "background_color",
              "align",
              "justify",
              "margins",
              "line_spacing",
              "position_x",
              "position_y",
              "rotation_angle",
              "rotation_options"
          ],
          "optional": [
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Mask Text",
      "display_name": "\ud83d\udd24\ufe0f CR Mask Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Composite Text": {
      "input": {
          "required": {
              "image_text": [
                  "IMAGE"
              ],
              "image_background": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "align": [
                  [
                      "center",
                      "top",
                      "bottom"
                  ]
              ],
              "justify": [
                  [
                      "center",
                      "left",
                      "right"
                  ]
              ],
              "margins": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "line_spacing": [
                  "INT",
                  {
                      "default": 0,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "position_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "position_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "rotation_angle": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -360.0,
                      "max": 360.0,
                      "step": 0.1
                  }
              ],
              "rotation_options": [
                  [
                      "text center",
                      "image center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image_text",
              "image_background",
              "text",
              "font_name",
              "font_size",
              "align",
              "justify",
              "margins",
              "line_spacing",
              "position_x",
              "position_y",
              "rotation_angle",
              "rotation_options"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Composite Text",
      "display_name": "\ud83d\udd24\ufe0f CR Composite Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Simple Text Watermark": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "@ your name"
                  }
              ],
              "align": [
                  [
                      "center",
                      "top left",
                      "top center",
                      "top right",
                      "bottom left",
                      "bottom center",
                      "bottom right"
                  ]
              ],
              "opacity": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "x_margin": [
                  "INT",
                  {
                      "default": 20,
                      "min": -1024,
                      "max": 1024
                  }
              ],
              "y_margin": [
                  "INT",
                  {
                      "default": 20,
                      "min": -1024,
                      "max": 1024
                  }
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text",
              "align",
              "opacity",
              "font_name",
              "font_size",
              "font_color",
              "x_margin",
              "y_margin"
          ],
          "optional": [
              "font_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Simple Text Watermark",
      "display_name": "\ud83d\udd24\ufe0f CR Simple Text Watermark",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Select Font": {
      "input": {
          "required": {
              "font_name": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "font_name"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "font_name",
          "show_help"
      ],
      "name": "CR Select Font",
      "display_name": "\ud83d\udd24\ufe0f CR Select Font",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Halftone Filter": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "dot_size": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 30,
                      "step": 1
                  }
              ],
              "dot_shape": [
                  [
                      "ellipse",
                      "rectangle"
                  ],
                  {
                      "default": "ellipse"
                  }
              ],
              "resolution": [
                  [
                      "normal",
                      "hi-res (2x output size)"
                  ],
                  {
                      "default": "normal"
                  }
              ],
              "angle_c": [
                  "INT",
                  {
                      "default": 75,
                      "min": 0,
                      "max": 360,
                      "step": 1
                  }
              ],
              "angle_m": [
                  "INT",
                  {
                      "default": 45,
                      "min": 0,
                      "max": 360,
                      "step": 1
                  }
              ],
              "angle_y": [
                  "INT",
                  {
                      "default": 15,
                      "min": 0,
                      "max": 360,
                      "step": 1
                  }
              ],
              "angle_k": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 360,
                      "step": 1
                  }
              ],
              "greyscale": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "antialias": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "antialias_scale": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 4,
                      "step": 1
                  }
              ],
              "border_blending": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "dot_size",
              "dot_shape",
              "resolution",
              "angle_c",
              "angle_m",
              "angle_y",
              "angle_k",
              "greyscale",
              "antialias",
              "antialias_scale",
              "border_blending"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Halftone Filter",
      "display_name": "\ud83c\udfa8 Halftone Filter",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
      "output_node": false
  },
  "CR Color Tint": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 1.0,
                      "step": 0.1
                  }
              ],
              "mode": [
                  [
                      "custom",
                      "white",
                      "black",
                      "sepia",
                      "red",
                      "green",
                      "blue",
                      "cyan",
                      "magenta",
                      "yellow",
                      "purple",
                      "orange",
                      "warm",
                      "cool",
                      "lime",
                      "navy",
                      "vintage",
                      "rose",
                      "teal",
                      "maroon",
                      "peach",
                      "lavender",
                      "olive"
                  ]
              ]
          },
          "optional": {
              "tint_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "strength",
              "mode"
          ],
          "optional": [
              "tint_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Color Tint",
      "display_name": "\ud83c\udfa8 CR Color Tint",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
      "output_node": false
  },
  "CR Vignette Filter": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "vignette_shape": [
                  [
                      "circle",
                      "oval",
                      "square",
                      "diamond"
                  ]
              ],
              "feather_amount": [
                  "INT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "x_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "y_offset": [
                  "INT",
                  {
                      "default": 0,
                      "min": -2048,
                      "max": 2048
                  }
              ],
              "zoom": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "reverse": [
                  [
                      "no",
                      "yes"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "vignette_shape",
              "feather_amount",
              "x_offset",
              "y_offset",
              "zoom",
              "reverse"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "show_help"
      ],
      "name": "CR Vignette Filter",
      "display_name": "\ud83c\udfa8 CR Vignette Filter",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udfa8 Filter",
      "output_node": false
  },
  "CR Page Layout": {
      "input": {
          "required": {
              "layout_options": [
                  [
                      "header",
                      "footer",
                      "header and footer",
                      "no header or footer"
                  ]
              ],
              "image_panel": [
                  "IMAGE"
              ],
              "header_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "header_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "header_align": [
                  [
                      "left",
                      "center",
                      "right"
                  ]
              ],
              "footer_height": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "footer_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "footer_align": [
                  [
                      "left",
                      "center",
                      "right"
                  ]
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "header_font_size": [
                  "INT",
                  {
                      "default": 150,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "footer_font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "border_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "border_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "border_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "layout_options",
              "image_panel",
              "header_height",
              "header_text",
              "header_align",
              "footer_height",
              "footer_text",
              "footer_align",
              "font_name",
              "font_color",
              "header_font_size",
              "footer_font_size",
              "border_thickness",
              "border_color",
              "background_color"
          ],
          "optional": [
              "font_color_hex",
              "border_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Page Layout",
      "display_name": "\ud83c\udf01 CR Page Layout",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Image Panel": {
      "input": {
          "required": {
              "image_1": [
                  "IMAGE"
              ],
              "border_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "border_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_color": [
                  [
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "layout_direction": [
                  [
                      "horizontal",
                      "vertical"
                  ]
              ]
          },
          "optional": {
              "image_2": [
                  "IMAGE"
              ],
              "image_3": [
                  "IMAGE"
              ],
              "image_4": [
                  "IMAGE"
              ],
              "border_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image_1",
              "border_thickness",
              "border_color",
              "outline_thickness",
              "outline_color",
              "layout_direction"
          ],
          "optional": [
              "image_2",
              "image_3",
              "image_4",
              "border_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Image Panel",
      "display_name": "\ud83c\udf01 CR Image Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Image Grid Panel": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "border_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "border_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_color": [
                  [
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "max_columns": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 256
                  }
              ]
          },
          "optional": {
              "border_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "border_thickness",
              "border_color",
              "outline_thickness",
              "outline_color",
              "max_columns"
          ],
          "optional": [
              "border_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Image Grid Panel",
      "display_name": "\ud83c\udf01 CR Image Grid Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Image Border": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "top_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "bottom_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "left_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "right_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "border_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_color": [
                  [
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ]
          },
          "optional": {
              "border_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "top_thickness",
              "bottom_thickness",
              "left_thickness",
              "right_thickness",
              "border_color",
              "outline_thickness",
              "outline_color"
          ],
          "optional": [
              "border_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Image Border",
      "display_name": "\ud83c\udf01 CR Image Border",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Feathered Border": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "top_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "bottom_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "left_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "right_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ],
              "border_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "feather_amount": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1024
                  }
              ]
          },
          "optional": {
              "border_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "top_thickness",
              "bottom_thickness",
              "left_thickness",
              "right_thickness",
              "border_color",
              "feather_amount"
          ],
          "optional": [
              "border_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Feathered Border",
      "display_name": "\ud83c\udf01 CR Feathered Border",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Simple Text Panel": {
      "input": {
          "required": {
              "panel_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "panel_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "font_outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 50
                  }
              ],
              "font_outline_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "align": [
                  [
                      "top",
                      "center",
                      "bottom"
                  ]
              ],
              "justify": [
                  [
                      "left",
                      "center",
                      "right"
                  ]
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "panel_width",
              "panel_height",
              "text",
              "font_name",
              "font_color",
              "font_size",
              "font_outline_thickness",
              "font_outline_color",
              "background_color",
              "align",
              "justify"
          ],
          "optional": [
              "font_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Simple Text Panel",
      "display_name": "\ud83c\udf01 CR Simple Text Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Color Panel": {
      "input": {
          "required": {
              "panel_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "panel_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "fill_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ]
          },
          "optional": {
              "fill_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "panel_width",
              "panel_height",
              "fill_color"
          ],
          "optional": [
              "fill_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Color Panel",
      "display_name": "\ud83c\udf01 CR Color Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Overlay Transparent Image": {
      "input": {
          "required": {
              "back_image": [
                  "IMAGE"
              ],
              "overlay_image": [
                  "IMAGE"
              ],
              "transparency": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.1
                  }
              ],
              "offset_x": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "offset_y": [
                  "INT",
                  {
                      "default": 0,
                      "min": -4096,
                      "max": 4096
                  }
              ],
              "rotation_angle": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -360.0,
                      "max": 360.0,
                      "step": 0.1
                  }
              ],
              "overlay_scale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 100.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "back_image",
              "overlay_image",
              "transparency",
              "offset_x",
              "offset_y",
              "rotation_angle",
              "overlay_scale_factor"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CR Overlay Transparent Image",
      "display_name": "\ud83c\udf01 CR Overlay Transparent Image",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Half Drop Panel": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "pattern": [
                  [
                      "none",
                      "half drop",
                      "quarter drop",
                      "custom drop %"
                  ]
              ]
          },
          "optional": {
              "drop_percentage": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "pattern"
          ],
          "optional": [
              "drop_percentage"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Half Drop Panel",
      "display_name": "\ud83c\udf01 CR Half Drop Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Diamond Panel": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "pattern": [
                  [
                      "none",
                      "diamond"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "pattern"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Diamond Panel",
      "display_name": "\ud83c\udf01 CR Diamond Panel",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83c\udf01 Layout",
      "output_node": false
  },
  "CR Simple Meme Template": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "preset": [
                  [
                      "custom",
                      "One Does Not Simply ... MEME IN COMFY",
                      "This is fine.",
                      "Good Morning ... No Such Thing!"
                  ]
              ],
              "text_top": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text_top"
                  }
              ],
              "text_bottom": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text_bottom"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "max_font_size": [
                  "INT",
                  {
                      "default": 150,
                      "min": 20,
                      "max": 2048
                  }
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "font_outline": [
                  [
                      "none",
                      "thin",
                      "thick",
                      "extra thick"
                  ]
              ],
              "bar_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "bar_options": [
                  [
                      "no bars",
                      "top",
                      "bottom",
                      "top and bottom"
                  ]
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bar_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "preset",
              "text_top",
              "text_bottom",
              "font_name",
              "max_font_size",
              "font_color",
              "font_outline",
              "bar_color",
              "bar_options"
          ],
          "optional": [
              "font_color_hex",
              "bar_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Simple Meme Template",
      "display_name": "\ud83d\udcf1 CR Simple Meme Template",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": false
  },
  "CR Simple Banner": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "banner_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "max_font_size": [
                  "INT",
                  {
                      "default": 150,
                      "min": 20,
                      "max": 2048
                  }
              ],
              "font_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 500
                  }
              ],
              "outline_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "margin_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 500
                  }
              ]
          },
          "optional": {
              "font_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "outline_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "banner_text",
              "font_name",
              "max_font_size",
              "font_color",
              "outline_thickness",
              "outline_color",
              "margin_size"
          ],
          "optional": [
              "font_color_hex",
              "outline_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Simple Banner",
      "display_name": "\ud83d\udcf1 CR Simple Banner",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": false
  },
  "CR Comic Panel Templates": {
      "input": {
          "required": {
              "page_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "page_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 8,
                      "max": 4096
                  }
              ],
              "template": [
                  [
                      "custom",
                      "G22",
                      "G33",
                      "H2",
                      "H3",
                      "H12",
                      "H13",
                      "H21",
                      "H23",
                      "H31",
                      "H32",
                      "V2",
                      "V3",
                      "V12",
                      "V13",
                      "V21",
                      "V23",
                      "V31",
                      "V32"
                  ]
              ],
              "reading_direction": [
                  [
                      "left to right",
                      "right to left"
                  ]
              ],
              "border_thickness": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_thickness": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "outline_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "panel_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ],
              "background_color": [
                  [
                      "custom",
                      "white",
                      "black",
                      "red",
                      "green",
                      "blue",
                      "yellow",
                      "cyan",
                      "magenta",
                      "orange",
                      "purple",
                      "pink",
                      "brown",
                      "gray",
                      "lightgray",
                      "darkgray",
                      "olive",
                      "lime",
                      "teal",
                      "navy",
                      "maroon",
                      "fuchsia",
                      "aqua",
                      "silver",
                      "gold",
                      "turquoise",
                      "lavender",
                      "violet",
                      "coral",
                      "indigo"
                  ]
              ]
          },
          "optional": {
              "images": [
                  "IMAGE"
              ],
              "custom_panel_layout": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "H123"
                  }
              ],
              "outline_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "panel_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ],
              "bg_color_hex": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "#000000"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "page_width",
              "page_height",
              "template",
              "reading_direction",
              "border_thickness",
              "outline_thickness",
              "outline_color",
              "panel_color",
              "background_color"
          ],
          "optional": [
              "images",
              "custom_panel_layout",
              "outline_color_hex",
              "panel_color_hex",
              "bg_color_hex"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Comic Panel Templates",
      "display_name": "\ud83d\udcf1 CR Comic Panel Templates",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": false
  },
  "CR Simple Image Compare": {
      "input": {
          "required": {
              "text1": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "text2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "text"
                  }
              ],
              "footer_height": [
                  "INT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "font_name": [
                  [
                      "NotoSansArabic-Regular.ttf",
                      "Quicksand-Bold.ttf",
                      "Oswald-Bold.ttf",
                      "comic.ttf",
                      "AlumniSansCollegiateOne-Regular.ttf",
                      "YoungSerif-Regular.ttf",
                      "Roboto-Regular.ttf",
                      "PixelifySans-Bold.ttf",
                      "impact.ttf",
                      "Caveat-VariableFont_wght.ttf"
                  ]
              ],
              "font_size": [
                  "INT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 1024
                  }
              ],
              "mode": [
                  [
                      "normal",
                      "dark"
                  ]
              ],
              "border_thickness": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 1024
                  }
              ]
          },
          "optional": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "text1",
              "text2",
              "footer_height",
              "font_name",
              "font_size",
              "mode",
              "border_thickness"
          ],
          "optional": [
              "image1",
              "image2"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "image",
          "show_help"
      ],
      "name": "CR Simple Image Compare",
      "display_name": "\ud83d\udcf1 CR Simple Image Compare",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": false
  },
  "CR Thumbnail Preview": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "rescale_factor": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.1,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "max_columns": [
                  "INT",
                  {
                      "default": 5,
                      "min": 0,
                      "max": 256
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "rescale_factor",
              "max_columns"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "show_help"
      ],
      "name": "CR Thumbnail Preview",
      "display_name": "\ud83d\udcf1 CR Thumbnail Preview",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": true
  },
  "CR Seamless Checker": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "rescale_factor": [
                  "FLOAT",
                  {
                      "default": 0.25,
                      "min": 0.1,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "grid_options": [
                  [
                      "2x2",
                      "3x3",
                      "4x4",
                      "5x5",
                      "6x6"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "rescale_factor",
              "grid_options"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "show_help"
      ],
      "name": "CR Seamless Checker",
      "display_name": "\ud83d\udcf1 CR Seamless Checker",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udc7e Graphics/\ud83d\udcf1 Template",
      "output_node": true
  },
  "CR Image Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "image1",
              "image2"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Image Input Switch",
      "display_name": "\ud83d\udd00 CR Image Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Image Input Switch (4 way)": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4
                  }
              ]
          },
          "optional": {
              "image1": [
                  "IMAGE"
              ],
              "image2": [
                  "IMAGE"
              ],
              "image3": [
                  "IMAGE"
              ],
              "image4": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "image1",
              "image2",
              "image3",
              "image4"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Image Input Switch (4 way)",
      "display_name": "\ud83d\udd00 CR Image Input Switch (4 way)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Latent Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "latent1": [
                  "LATENT"
              ],
              "latent2": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "latent1",
              "latent2"
          ]
      },
      "output": [
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "show_help"
      ],
      "name": "CR Latent Input Switch",
      "display_name": "\ud83d\udd00 CR Latent Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Conditioning Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "conditioning1": [
                  "CONDITIONING"
              ],
              "conditioning2": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "conditioning1",
              "conditioning2"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "show_help"
      ],
      "name": "CR Conditioning Input Switch",
      "display_name": "\ud83d\udd00 CR Conditioning Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Clip Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "clip1": [
                  "CLIP"
              ],
              "clip2": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "clip1",
              "clip2"
          ]
      },
      "output": [
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CLIP",
          "show_help"
      ],
      "name": "CR Clip Input Switch",
      "display_name": "\ud83d\udd00 CR Clip Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Model Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "model1": [
                  "MODEL"
              ],
              "model2": [
                  "MODEL"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "model1",
              "model2"
          ]
      },
      "output": [
          "MODEL",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "show_help"
      ],
      "name": "CR Model Input Switch",
      "display_name": "\ud83d\udd00 CR Model Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR ControlNet Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ],
              "control_net1": [
                  "CONTROL_NET"
              ],
              "control_net2": [
                  "CONTROL_NET"
              ]
          },
          "optional": {
              "control_net1": [
                  "CONTROL_NET"
              ],
              "control_net2": [
                  "CONTROL_NET"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input",
              "control_net1",
              "control_net2"
          ],
          "optional": [
              "control_net1",
              "control_net2"
          ]
      },
      "output": [
          "CONTROL_NET",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONTROL_NET",
          "show_help"
      ],
      "name": "CR ControlNet Input Switch",
      "display_name": "\ud83d\udd00 CR ControlNet Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR VAE Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "VAE1": [
                  "VAE",
                  {
                      "forceInput": true
                  }
              ],
              "VAE2": [
                  "VAE",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "VAE1",
              "VAE2"
          ]
      },
      "output": [
          "VAE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "VAE",
          "show_help"
      ],
      "name": "CR VAE Input Switch",
      "display_name": "\ud83d\udd00 CR VAE Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Text Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ]
          },
          "optional": {
              "text1": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text2": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "text1",
              "text2"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Input Switch",
      "display_name": "\ud83d\udd00 CR Text Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Text Input Switch (4 way)": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 4
                  }
              ]
          },
          "optional": {
              "text1": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text2": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text3": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "text4": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "text1",
              "text2",
              "text3",
              "text4"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Input Switch (4 way)",
      "display_name": "\ud83d\udd00 CR Text Input Switch (4 way)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Switch Model and CLIP": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ],
              "model1": [
                  "MODEL"
              ],
              "clip1": [
                  "CLIP"
              ],
              "model2": [
                  "MODEL"
              ],
              "clip2": [
                  "CLIP"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input",
              "model1",
              "clip1",
              "model2",
              "clip2"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "show_help"
      ],
      "name": "CR Switch Model and CLIP",
      "display_name": "\ud83d\udd00 CR Switch Model and CLIP",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Logic",
      "output_node": false
  },
  "CR Batch Process Switch": {
      "input": {
          "required": {
              "Input": [
                  [
                      "image",
                      "image batch"
                  ]
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ],
              "image_batch": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "image",
              "image_batch"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Batch Process Switch",
      "display_name": "\ud83d\udd02 CR Batch Process Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
      "output_node": false
  },
  "CR Img2Img Process Switch": {
      "input": {
          "required": {
              "Input": [
                  [
                      "txt2img",
                      "img2img"
                  ]
              ]
          },
          "optional": {
              "txt2img": [
                  "LATENT"
              ],
              "img2img": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "txt2img",
              "img2img"
          ]
      },
      "output": [
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "show_help"
      ],
      "name": "CR Img2Img Process Switch",
      "display_name": "\ud83d\udd02 CR Img2Img Process Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
      "output_node": false
  },
  "CR Hires Fix Process Switch": {
      "input": {
          "required": {
              "Input": [
                  [
                      "latent_upscale",
                      "image_upscale"
                  ]
              ]
          },
          "optional": {
              "latent_upscale": [
                  "LATENT"
              ],
              "image_upscale": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input"
          ],
          "optional": [
              "latent_upscale",
              "image_upscale"
          ]
      },
      "output": [
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "STRING"
      ],
      "name": "CR Hires Fix Process Switch",
      "display_name": "\ud83d\udd02 CR Hires Fix Process Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd02 Process",
      "output_node": false
  },
  "CR Index": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000
                  }
              ],
              "print_to_console": [
                  [
                      "Yes",
                      "No"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "print_to_console"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Index",
      "display_name": "\ud83d\udd22 CR Index",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
      "output_node": false
  },
  "CR Index Increment": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 1,
                      "min": -10000,
                      "max": 10000,
                      "forceInput": true
                  }
              ],
              "interval": [
                  "INT",
                  {
                      "default": 1,
                      "min": -10000,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "interval"
          ]
      },
      "output": [
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "index",
          "interval",
          "show_help"
      ],
      "name": "CR Index Increment",
      "display_name": "\ud83d\udd22 CR Index Increment",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
      "output_node": false
  },
  "CR Index Multiply": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000,
                      "forceInput": true
                  }
              ],
              "factor": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "factor"
          ]
      },
      "output": [
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "index",
          "factor",
          "show_help"
      ],
      "name": "CR Index Multiply",
      "display_name": "\ud83d\udd22 CR Index Multiply",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
      "output_node": false
  },
  "CR Index Reset": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000,
                      "forceInput": true
                  }
              ],
              "reset_to": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "reset_to"
          ]
      },
      "output": [
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "index",
          "reset_to",
          "show_help"
      ],
      "name": "CR Index Reset",
      "display_name": "\ud83d\udd22 CR Index Reset",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
      "output_node": false
  },
  "CR Trigger": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "trigger_value": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "trigger_value"
          ]
      },
      "output": [
          "INT",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "index",
          "trigger",
          "show_help"
      ],
      "name": "CR Trigger",
      "display_name": "\ud83d\udd22 CR Trigger",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd22 Index",
      "output_node": false
  },
  "CR String To Number": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "text",
                      "forceInput": true
                  }
              ],
              "round_integer": [
                  [
                      "round",
                      "round down",
                      "round up"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "round_integer"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT",
          "show_help"
      ],
      "name": "CR String To Number",
      "display_name": "\ud83d\udd27 CR String To Number",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR String To Combo": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "any",
          "show_help"
      ],
      "name": "CR String To Combo",
      "display_name": "\ud83d\udd27 CR String To Combo",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR Float To String": {
      "input": {
          "required": {
              "float_": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1000000.0,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float_"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Float To String",
      "display_name": "\ud83d\udd27 CR Float To String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR Float To Integer": {
      "input": {
          "required": {
              "_float": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "_float"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Float To Integer",
      "display_name": "\ud83d\udd27 CR Float To Integer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR Integer To String": {
      "input": {
          "required": {
              "int_": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615,
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "int_"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Integer To String",
      "display_name": "\ud83d\udd27 CR Integer To String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR String To Boolean": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "BOOLEAN",
          "show_help"
      ],
      "name": "CR String To Boolean",
      "display_name": "\ud83d\udd27 CR String To Boolean",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd27 Conversion",
      "output_node": false
  },
  "CR Random Hex Color": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "hex_color1",
          "hex_color2",
          "hex_color3",
          "hex_color4",
          "show_help"
      ],
      "name": "CR Random Hex Color",
      "display_name": "\ud83c\udfb2 CR Random Hex Color",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Random RGB": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "STRING",
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "rgb_1",
          "rgb_2",
          "rgb_3",
          "rgb_4",
          "show_help"
      ],
      "name": "CR Random RGB",
      "display_name": "\ud83c\udfb2 CR Random RGB",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Random Multiline Values": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "value_type": [
                  [
                      "binary",
                      "decimal",
                      "natural",
                      "hexadecimal",
                      "alphabetic",
                      "alphanumeric",
                      "custom"
                  ]
              ],
              "rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 2048
                  }
              ],
              "string_length": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "custom_values": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "123ABC"
                  }
              ],
              "prepend_text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "value_type",
              "rows",
              "string_length",
              "custom_values",
              "prepend_text"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "multiline_text",
          "show_help"
      ],
      "name": "CR Random Multiline Values",
      "display_name": "\ud83c\udfb2 CR Random Multiline Values",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Random Multiline Colors": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "value_type": [
                  [
                      "rgb",
                      "hex color",
                      "matplotlib xkcd"
                  ]
              ],
              "rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 2048
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "value_type",
              "rows"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "multiline_text",
          "show_help"
      ],
      "name": "CR Random Multiline Colors",
      "display_name": "\ud83c\udfb2 CR Random Multiline Colors",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Random RGB Gradient": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 2048
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "rows"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "multiline_text",
          "show_help"
      ],
      "name": "CR Random RGB Gradient",
      "display_name": "\ud83c\udfb2 CR Random RGB Gradient",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Random Panel Codes": {
      "input": {
          "required": {
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "rows": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 2048
                  }
              ],
              "string_length": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 1024
                  }
              ],
              "values": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "123"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "seed",
              "rows",
              "string_length",
              "values"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "multiline_text",
          "show_help"
      ],
      "name": "CR Random Panel Codes",
      "display_name": "\ud83c\udfb2 CR Random Panel Codes",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83c\udfb2 Random",
      "output_node": false
  },
  "CR Text": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "text",
          "show_help"
      ],
      "name": "CR Text",
      "display_name": "\ud83d\udd24 CR Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Multiline Text": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "convert_from_csv": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "csv_quote_char": [
                  "STRING",
                  {
                      "default": "'",
                      "choices": [
                          "'",
                          "\""
                      ]
                  }
              ],
              "remove_chars": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "chars_to_remove": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "split_string": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "convert_from_csv",
              "csv_quote_char",
              "remove_chars",
              "chars_to_remove",
              "split_string"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "multiline_text",
          "show_help"
      ],
      "name": "CR Multiline Text",
      "display_name": "\ud83d\udd24 CR Multiline Text",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Split String": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "text"
                  }
              ]
          },
          "optional": {
              "delimiter": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ","
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ],
          "optional": [
              "delimiter"
          ]
      },
      "output": [
          "*",
          "*",
          "*",
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "string_1",
          "string_2",
          "string_3",
          "string_4",
          "show_help"
      ],
      "name": "CR Split String",
      "display_name": "\ud83d\udd24 CR Split String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Text Concatenate": {
      "input": {
          "required": {},
          "optional": {
              "text1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "text2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "separator": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "text1",
              "text2",
              "separator"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Concatenate",
      "display_name": "\ud83d\udd24 CR Text Concatenate",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Text Replace": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "find1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "replace1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "find2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "replace2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "find3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "replace3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ],
          "optional": [
              "find1",
              "replace1",
              "find2",
              "replace2",
              "find3",
              "replace3"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Replace",
      "display_name": "\ud83d\udd24 CR Text Replace",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Text Length": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Text Length",
      "display_name": "\ud83d\udd24 CR Text Length",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Text Operation": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "operation": [
                  [
                      "uppercase",
                      "lowercase",
                      "capitalize",
                      "invert_case",
                      "reverse",
                      "trim",
                      "remove_spaces"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "operation"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Operation",
      "display_name": "\ud83d\udd24 CR Text Operation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Text Blacklist": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "",
                      "forceInput": true
                  }
              ],
              "blacklist_words": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ]
          },
          "optional": {
              "replacement_text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text",
              "blacklist_words"
          ],
          "optional": [
              "replacement_text"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Blacklist",
      "display_name": "\ud83d\udd24 Text Blacklist",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": false
  },
  "CR Save Text To File": {
      "input": {
          "required": {
              "multiline_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "output_file_path": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_name": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_extension": [
                  [
                      "txt",
                      "csv"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "multiline_text",
              "output_file_path",
              "file_name",
              "file_extension"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "show_help"
      ],
      "name": "CR Save Text To File",
      "display_name": "\ud83d\udd24 CR Save Text To File",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd24 Text",
      "output_node": true
  },
  "CR Set Value On Boolean": {
      "input": {
          "required": {
              "boolean": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "forceInput": true
                  }
              ],
              "value_if_true": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ],
              "value_if_false": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "boolean",
              "value_if_true",
              "value_if_false"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT",
          "show_help"
      ],
      "name": "CR Set Value On Boolean",
      "display_name": "\u2699\ufe0f CR Set Value On Boolean",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
      "output_node": false
  },
  "CR Set Value On Binary": {
      "input": {
          "required": {
              "binary": [
                  "INT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 1,
                      "forceInput": true
                  }
              ],
              "value_if_1": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ],
              "value_if_0": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "binary",
              "value_if_1",
              "value_if_0"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT",
          "show_help"
      ],
      "name": "CR Set Value On Binary",
      "display_name": "\u2699\ufe0f CR Set Value On Binary",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
      "output_node": false
  },
  "CR Set Value on String": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "test_string": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "value_if_true": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "value_if_false": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ],
          "optional": [
              "test_string",
              "value_if_true",
              "value_if_false"
          ]
      },
      "output": [
          "*",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "STRING",
          "BOOLEAN",
          "show_help"
      ],
      "name": "CR Set Value on String",
      "display_name": "\u2699\ufe0f CR Set Value on String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
      "output_node": false
  },
  "CR Set Switch From String": {
      "input": {
          "required": {
              "text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "",
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "switch_1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "switch_2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "switch_3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "switch_4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "text"
          ],
          "optional": [
              "switch_1",
              "switch_2",
              "switch_3",
              "switch_4"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "switch",
          "show_help"
      ],
      "name": "CR Set Switch From String",
      "display_name": "\u2699\ufe0f CR Set Switch From String",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\ud83d\udd00 Conditional",
      "output_node": false
  },
  "CR Value": {
      "input": {
          "required": {
              "value": [
                  "FLOAT",
                  {
                      "default": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "value"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "INT",
          "show_help"
      ],
      "name": "CR Value",
      "display_name": "\u2699\ufe0f CR Value",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Integer Multiple": {
      "input": {
          "required": {
              "integer": [
                  "INT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ],
              "multiple": [
                  "FLOAT",
                  {
                      "default": 8,
                      "min": 1,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "integer",
              "multiple"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Integer Multiple",
      "display_name": "\u2699\ufe0f CR Integer Multiple",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Clamp Value": {
      "input": {
          "required": {
              "a": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ],
              "range_min": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ],
              "range_max": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": -18446744073709551615,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a",
              "range_min",
              "range_max"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "a",
          "show_help"
      ],
      "name": "CR Clamp Value",
      "display_name": "\u2699\ufe0f CR Clamp Value",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Math Operation": {
      "input": {
          "required": {
              "a": [
                  "FLOAT",
                  {
                      "default": 1.0
                  }
              ],
              "operation": [
                  [
                      "sin",
                      "cos",
                      "tan",
                      "sqrt",
                      "exp",
                      "log",
                      "neg",
                      "abs"
                  ]
              ],
              "decimal_places": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 10
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a",
              "operation",
              "decimal_places"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "a",
          "show_help"
      ],
      "name": "CR Math Operation",
      "display_name": "\u2699\ufe0f CR Math Operation",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Get Parameter From Prompt": {
      "input": {
          "required": {
              "prompt": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt",
                      "forceInput": true
                  }
              ],
              "search_string": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "!findme"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt",
              "search_string"
          ]
      },
      "output": [
          "STRING",
          "*",
          "FLOAT",
          "BOOLEAN",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "prompt",
          "text",
          "float",
          "boolean",
          "show_help"
      ],
      "name": "CR Get Parameter From Prompt",
      "display_name": "\u2699\ufe0f CR Get Parameter From Prompt",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Select Resize Method": {
      "input": {
          "required": {
              "method": [
                  [
                      "Fit",
                      "Crop"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "method"
          ]
      },
      "output": [
          "*",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "method",
          "show_help"
      ],
      "name": "CR Select Resize Method",
      "display_name": "\u2699\ufe0f CR Select Resize Method",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Select ISO Size": {
      "input": {
          "required": {
              "iso_size": [
                  [
                      "A0 - 9933x14043",
                      "A1 - 7016x9933",
                      "A2 - 4960x7016",
                      "A3 - 3508x4960",
                      "A4 - 2480x3508",
                      "A5 - 1748x2480",
                      "A6 - 1240x1748",
                      "A7 - 874x1240",
                      "A8 - 614x874",
                      "A9 - 437x614",
                      "A10 - 307x437",
                      "A11 - 213x307",
                      "A12 - 154x213",
                      "A13 - 106x154",
                      "B0 - 11811x16701",
                      "B1 - 8350x11811",
                      "B2 - 5906x8350",
                      "B3 - 4169x5906",
                      "B4 - 2953x4169",
                      "B5 - 2079x2953",
                      "B6 - 1476x2079",
                      "B7 - 1039x1476",
                      "B8 - 732x1039",
                      "B9 - 520x732",
                      "B10 - 366x520",
                      "C0 - 10831x15319",
                      "C1 - 7654x10831",
                      "C2 - 5409x7654",
                      "C3 - 3827x5409",
                      "C4 - 2705x3827",
                      "C5 - 1913x2705",
                      "C6 - 1346x1913",
                      "C7 - 957x1346",
                      "C8 - 673x957",
                      "C9 - 472x673",
                      "C10 - 331x472"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "iso_size"
          ]
      },
      "output": [
          "INT",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "width",
          "height",
          "show_help"
      ],
      "name": "CR Select ISO Size",
      "display_name": "\u2699\ufe0f CR Select ISO Size",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83d\udee0\ufe0f Utils/\u2699\ufe0f Other",
      "output_node": false
  },
  "CR Simple Schedule": {
      "input": {
          "required": {
              "schedule": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "frame_number, item_alias, [attr_value1, attr_value2]"
                  }
              ],
              "schedule_type": [
                  [
                      "Value",
                      "Text",
                      "Prompt",
                      "Prompt Weight",
                      "Model",
                      "LoRA",
                      "ControlNet",
                      "Style",
                      "Upscale",
                      "Camera",
                      "Job"
                  ]
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule",
              "schedule_type",
              "schedule_alias",
              "schedule_format"
          ]
      },
      "output": [
          "SCHEDULE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_help"
      ],
      "name": "CR Simple Schedule",
      "display_name": "\ud83d\udccb CR Simple Schedule",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": false
  },
  "CR Central Schedule": {
      "input": {
          "required": {
              "schedule_1": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "schedule"
                  }
              ],
              "schedule_type1": [
                  [
                      "Value",
                      "Text",
                      "Prompt",
                      "Prompt Weight",
                      "Model",
                      "LoRA",
                      "ControlNet",
                      "Style",
                      "Upscale",
                      "Camera",
                      "Job"
                  ]
              ],
              "schedule_alias1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "schedule_2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "schedule"
                  }
              ],
              "schedule_type2": [
                  [
                      "Value",
                      "Text",
                      "Prompt",
                      "Prompt Weight",
                      "Model",
                      "LoRA",
                      "ControlNet",
                      "Style",
                      "Upscale",
                      "Camera",
                      "Job"
                  ]
              ],
              "schedule_alias2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "schedule_3": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "schedule"
                  }
              ],
              "schedule_type3": [
                  [
                      "Value",
                      "Text",
                      "Prompt",
                      "Prompt Weight",
                      "Model",
                      "LoRA",
                      "ControlNet",
                      "Style",
                      "Upscale",
                      "Camera",
                      "Job"
                  ]
              ],
              "schedule_alias3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          },
          "optional": {
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule_1",
              "schedule_type1",
              "schedule_alias1",
              "schedule_2",
              "schedule_type2",
              "schedule_alias2",
              "schedule_3",
              "schedule_type3",
              "schedule_alias3",
              "schedule_format"
          ],
          "optional": [
              "schedule"
          ]
      },
      "output": [
          "SCHEDULE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_text"
      ],
      "name": "CR Central Schedule",
      "display_name": "\ud83d\udccb CR Central Schedule",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": false
  },
  "CR Combine Schedules": {
      "input": {
          "required": {},
          "optional": {
              "schedule_1": [
                  "SCHEDULE"
              ],
              "schedule_2": [
                  "SCHEDULE"
              ],
              "schedule_3": [
                  "SCHEDULE"
              ],
              "schedule_4": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "schedule_1",
              "schedule_2",
              "schedule_3",
              "schedule_4"
          ]
      },
      "output": [
          "SCHEDULE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_text"
      ],
      "name": "CR Combine Schedules",
      "display_name": "\ud83d\udccb CR Combine Schedules",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": false
  },
  "CR Output Schedule To File": {
      "input": {
          "required": {
              "output_file_path": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_name": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_extension": [
                  [
                      "txt",
                      "csv"
                  ]
              ],
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "output_file_path",
              "file_name",
              "file_extension",
              "schedule"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "CR Output Schedule To File",
      "display_name": "\ud83d\udccb CR Output Schedule To File",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": true
  },
  "CR Load Schedule From File": {
      "input": {
          "required": {
              "input_file_path": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_name": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "file_extension": [
                  [
                      "txt",
                      "csv"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "input_file_path",
              "file_name",
              "file_extension"
          ]
      },
      "output": [
          "SCHEDULE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_text"
      ],
      "name": "CR Load Schedule From File",
      "display_name": "\ud83d\udccb CR Load Schedule From File",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": false
  },
  "CR Schedule Input Switch": {
      "input": {
          "required": {
              "Input": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 2
                  }
              ],
              "schedule1": [
                  "SCHEDULE"
              ],
              "schedule2": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "Input",
              "schedule1",
              "schedule2"
          ]
      },
      "output": [
          "SCHEDULE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_help"
      ],
      "name": "CR Schedule Input Switch",
      "display_name": "\ud83d\udccb CR Schedule Input Switch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": true
  },
  "CR Bit Schedule": {
      "input": {
          "required": {
              "binary_string": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": ""
                  }
              ],
              "interval": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 99999
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "binary_string",
              "interval",
              "loops"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SCHEDULE",
          "show_text"
      ],
      "name": "CR Bit Schedule",
      "display_name": "\ud83d\udccb CR Bit Schedule",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udccb Schedule",
      "output_node": false
  },
  "CR Simple Value Scheduler": {
      "input": {
          "required": {
              "schedule": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "frame_number, value"
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule",
              "current_frame"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT",
          "show_help"
      ],
      "name": "CR Simple Value Scheduler",
      "display_name": "\ud83d\udcd1 CR Simple Value Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Simple Text Scheduler": {
      "input": {
          "required": {
              "schedule": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "frame_number, text"
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "schedule",
              "current_frame"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Simple Text Scheduler",
      "display_name": "\ud83d\udcd1 CR Simple Text Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Value Scheduler": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Default Value",
                      "Schedule"
                  ]
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "default_value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -9999.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          },
          "optional": {
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "current_frame",
              "schedule_alias",
              "default_value",
              "schedule_format"
          ],
          "optional": [
              "schedule"
          ]
      },
      "output": [
          "INT",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "INT",
          "FLOAT",
          "show_help"
      ],
      "name": "CR Value Scheduler",
      "display_name": "\ud83d\udcd1 CR Value Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Text Scheduler": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Default Text",
                      "Schedule"
                  ]
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "default_text": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "default text"
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          },
          "optional": {
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "current_frame",
              "schedule_alias",
              "default_text",
              "schedule_format"
          ],
          "optional": [
              "schedule"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Text Scheduler",
      "display_name": "\ud83d\udcd1 CR Text Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Load Scheduled Models": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Load default Model",
                      "Schedule"
                  ]
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "default_model": [
                  [
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          },
          "optional": {
              "model_list": [
                  "MODEL_LIST"
              ],
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "current_frame",
              "schedule_alias",
              "default_model",
              "schedule_format"
          ],
          "optional": [
              "model_list",
              "schedule"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE",
          "show_help"
      ],
      "name": "CR Load Scheduled Models",
      "display_name": "\ud83d\udcd1 CR Load Scheduled Models",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Load Scheduled LoRAs": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Off",
                      "Load default LoRA",
                      "Schedule"
                  ]
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "default_lora": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "strength_model": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "strength_clip": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          },
          "optional": {
              "lora_list": [
                  "LORA_LIST"
              ],
              "schedule": [
                  "SCHEDULE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "model",
              "clip",
              "current_frame",
              "schedule_alias",
              "default_lora",
              "strength_model",
              "strength_clip",
              "schedule_format"
          ],
          "optional": [
              "lora_list",
              "schedule"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "show_help"
      ],
      "name": "CR Load Scheduled LoRAs",
      "display_name": "\ud83d\udcd1 CR Load Scheduled LoRAs",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Prompt Scheduler": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Default Prompt",
                      "Keyframe List",
                      "Schedule"
                  ]
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "default_prompt": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": "default prompt"
                  }
              ],
              "schedule_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ],
              "interpolate_prompt": [
                  [
                      "Yes",
                      "No"
                  ]
              ]
          },
          "optional": {
              "schedule": [
                  "SCHEDULE"
              ],
              "schedule_alias": [
                  "STRING",
                  {
                      "default prompt": "",
                      "multiline": false
                  }
              ],
              "keyframe_list": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "keyframe list"
                  }
              ],
              "prepend_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prepend text"
                  }
              ],
              "append_text": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "append text"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "current_frame",
              "default_prompt",
              "schedule_format",
              "interpolate_prompt"
          ],
          "optional": [
              "schedule",
              "schedule_alias",
              "keyframe_list",
              "prepend_text",
              "append_text"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "current_prompt",
          "next_prompt",
          "weight",
          "show_help"
      ],
      "name": "CR Prompt Scheduler",
      "display_name": "\ud83d\udcd1 CR Prompt Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Simple Prompt Scheduler": {
      "input": {
          "required": {
              "keyframe_list": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "frame_number, text"
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "keyframe_format": [
                  [
                      "CR",
                      "Deforum"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "keyframe_list",
              "current_frame",
              "keyframe_format"
          ]
      },
      "output": [
          "STRING",
          "STRING",
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "current_prompt",
          "next_prompt",
          "weight",
          "show_help"
      ],
      "name": "CR Simple Prompt Scheduler",
      "display_name": "\ud83d\udcd1 CR Simple Prompt Scheduler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcd1 Schedulers",
      "output_node": false
  },
  "CR Keyframe List": {
      "input": {
          "required": {
              "keyframe_list": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "keyframes"
                  }
              ],
              "keyframe_format": [
                  [
                      "Deforum",
                      "CR"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "keyframe_list",
              "keyframe_format"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "keyframe_list",
          "show_help"
      ],
      "name": "CR Keyframe List",
      "display_name": "\ud83d\udcdd CR Keyframe List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcdd Prompt",
      "output_node": false
  },
  "CR Encode Scheduled Prompts": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "current_prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "next_prompt": [
                  "STRING",
                  {
                      "multiline": true
                  }
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -9999.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "current_prompt",
              "next_prompt",
              "weight"
          ]
      },
      "output": [
          "CONDITIONING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "CONDITIONING",
          "show_help"
      ],
      "name": "CR Encode Scheduled Prompts",
      "display_name": "\ud83d\udcdd CR Encode Scheduled Prompts",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udcdd Prompt",
      "output_node": false
  },
  "CR Gradient Float": {
      "input": {
          "required": {
              "start_value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "end_value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.01
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "frame_duration": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "gradient_profile": [
                  [
                      "Lerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "start_value",
              "end_value",
              "start_frame",
              "frame_duration",
              "current_frame",
              "gradient_profile"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "show_help"
      ],
      "name": "CR Gradient Float",
      "display_name": "\ud83d\udd22 CR Gradient Float",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
      "output_node": false
  },
  "CR Gradient Integer": {
      "input": {
          "required": {
              "start_value": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "end_value": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "frame_duration": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "gradient_profile": [
                  [
                      "Lerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "start_value",
              "end_value",
              "start_frame",
              "frame_duration",
              "current_frame",
              "gradient_profile"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Gradient Integer",
      "display_name": "\ud83d\udd22 CR Gradient Integer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
      "output_node": false
  },
  "CR Increment Float": {
      "input": {
          "required": {
              "start_value": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 0.001
                  }
              ],
              "step": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": -9999.0,
                      "max": 9999.0,
                      "step": 0.001
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "frame_duration": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_value",
              "step",
              "start_frame",
              "frame_duration",
              "current_frame"
          ]
      },
      "output": [
          "FLOAT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "show_help"
      ],
      "name": "CR Increment Float",
      "display_name": "\ud83d\udd22 CR Increment Float",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
      "output_node": true
  },
  "CR Increment Integer": {
      "input": {
          "required": {
              "start_value": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "step": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": -9999.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "frame_duration": [
                  "INT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_value",
              "step",
              "start_frame",
              "frame_duration",
              "current_frame"
          ]
      },
      "output": [
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "INT",
          "show_help"
      ],
      "name": "CR Increment Integer",
      "display_name": "\ud83d\udd22 CR Increment Integer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
      "output_node": true
  },
  "CR Interpolate Latents": {
      "input": {
          "required": {
              "latent1": [
                  "LATENT"
              ],
              "latent2": [
                  "LATENT"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "method": [
                  [
                      "lerp"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "latent1",
              "latent2",
              "weight",
              "method"
          ]
      },
      "output": [
          "LATENT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "show_help"
      ],
      "name": "CR Interpolate Latents",
      "display_name": "\ud83d\udd22 CR Interpolate Latents",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udd22 Interpolate",
      "output_node": false
  },
  "CR Debatch Frames": {
      "input": {
          "required": {
              "frames": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "frames"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          true
      ],
      "output_name": [
          "debatched_frames"
      ],
      "name": "CR Debatch Frames",
      "display_name": "\ud83d\udee0\ufe0f CR Debatch Frames",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR Current Frame": {
      "input": {
          "required": {
              "index": [
                  "INT",
                  {
                      "default": 1,
                      "min": -10000,
                      "max": 10000
                  }
              ],
              "print_to_console": [
                  [
                      "Yes",
                      "No"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "index",
              "print_to_console"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "index"
      ],
      "name": "CR Current Frame",
      "display_name": "\ud83d\udee0\ufe0f CR Current Frame",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udee0\ufe0f Utils",
      "output_node": false
  },
  "CR Load Animation Frames": {
      "input": {
          "required": {
              "image_sequence_folder": [
                  []
              ],
              "start_index": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "max_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 10000
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image_sequence_folder",
              "start_index",
              "max_frames"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Load Animation Frames",
      "display_name": "\u2328\ufe0f CR Load Animation Frames",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Load Flow Frames": {
      "input": {
          "required": {
              "input_folder": [
                  []
              ],
              "sort_by": [
                  [
                      "Index",
                      "Alphabetic"
                  ]
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000,
                      "forceInput": true
                  }
              ],
              "skip_start_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000
                  }
              ]
          },
          "optional": {
              "input_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "file_pattern": [
                  "STRING",
                  {
                      "default": "*.png",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "input_folder",
              "sort_by",
              "current_frame",
              "skip_start_frames"
          ],
          "optional": [
              "input_path",
              "file_pattern"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "INT",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "current_image",
          "previous_image",
          "current_frame",
          "show_help"
      ],
      "name": "CR Load Flow Frames",
      "display_name": "\u2328\ufe0f CR Load Flow Frames",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
      "output_node": false
  },
  "CR Output Flow Frames": {
      "input": {
          "required": {
              "output_folder": [
                  []
              ],
              "current_image": [
                  "IMAGE"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "CR"
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999999,
                      "forceInput": true
                  }
              ]
          },
          "optional": {
              "interpolated_img": [
                  "IMAGE"
              ],
              "output_path": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "output_folder",
              "current_image",
              "filename_prefix",
              "current_frame"
          ],
          "optional": [
              "interpolated_img",
              "output_path"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "CR Output Flow Frames",
      "display_name": "\u2328\ufe0f CR Output Flow Frames",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\u2328\ufe0f IO",
      "output_node": true
  },
  "CR Prompt List Keyframes": {
      "input": {
          "required": {
              "prompt_list": [
                  "PROMPT_LIST"
              ],
              "keyframe_format": [
                  [
                      "Deforum"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_list",
              "keyframe_format"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "keyframe_list",
          "show_help"
      ],
      "name": "CR Prompt List Keyframes",
      "display_name": "CR Prompt List Keyframes (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Simple Prompt List": {
      "input": {
          "required": {
              "prompt_1": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt"
                  }
              ],
              "prompt_2": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt"
                  }
              ],
              "prompt_3": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt"
                  }
              ],
              "prompt_4": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt"
                  }
              ],
              "prompt_5": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "prompt"
                  }
              ]
          },
          "optional": {
              "simple_prompt_list": [
                  "SIMPLE_PROMPT_LIST"
              ]
          }
      },
      "input_order": {
          "required": [
              "prompt_1",
              "prompt_2",
              "prompt_3",
              "prompt_4",
              "prompt_5"
          ],
          "optional": [
              "simple_prompt_list"
          ]
      },
      "output": [
          "SIMPLE_PROMPT_LIST",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "SIMPLE_PROMPT_LIST",
          "show_help"
      ],
      "name": "CR Simple Prompt List",
      "display_name": "CR Simple Prompt List (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Simple Prompt List Keyframes": {
      "input": {
          "required": {
              "simple_prompt_list": [
                  "SIMPLE_PROMPT_LIST"
              ],
              "keyframe_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "transition_type": [
                  [
                      "Default"
                  ]
              ],
              "transition_speed": [
                  [
                      "Default"
                  ]
              ],
              "transition_profile": [
                  [
                      "Default"
                  ]
              ],
              "keyframe_format": [
                  [
                      "Deforum"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "simple_prompt_list",
              "keyframe_interval",
              "loops",
              "transition_type",
              "transition_speed",
              "transition_profile",
              "keyframe_format"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "keyframe_list",
          "show_help"
      ],
      "name": "CR Simple Prompt List Keyframes",
      "display_name": "CR Simple Prompt List Keyframes (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle Models": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Off",
                      "Sequential"
                  ]
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "model_list": [
                  "MODEL_LIST"
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "model",
              "clip",
              "model_list",
              "frame_interval",
              "loops",
              "current_frame"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "VAE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "VAE",
          "show_help"
      ],
      "name": "CR Cycle Models",
      "display_name": "CR Cycle Models (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle LoRAs": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Off",
                      "Sequential"
                  ]
              ],
              "model": [
                  "MODEL"
              ],
              "clip": [
                  "CLIP"
              ],
              "lora_list": [
                  "LORA_LIST"
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "model",
              "clip",
              "lora_list",
              "frame_interval",
              "loops",
              "current_frame"
          ]
      },
      "output": [
          "MODEL",
          "CLIP",
          "STRING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CLIP",
          "show_help"
      ],
      "name": "CR Cycle LoRAs",
      "display_name": "CR Cycle LoRAs (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle Text": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Sequential"
                  ]
              ],
              "text_list": [
                  "TEXT_LIST"
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "text_list",
              "frame_interval",
              "loops",
              "current_frame"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Cycle Text",
      "display_name": "CR Cycle Text (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle Text Simple": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Sequential"
                  ]
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          },
          "optional": {
              "text_1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_5": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_list_simple": [
                  "TEXT_LIST_SIMPLE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "frame_interval",
              "loops",
              "current_frame"
          ],
          "optional": [
              "text_1",
              "text_2",
              "text_3",
              "text_4",
              "text_5",
              "text_list_simple"
          ]
      },
      "output": [
          "STRING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "STRING",
          "show_help"
      ],
      "name": "CR Cycle Text Simple",
      "display_name": "CR Cycle Text Simple (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle Images": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Sequential"
                  ]
              ],
              "image_list": [
                  "IMAGE_LIST"
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "image_list",
              "frame_interval",
              "loops",
              "current_frame"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Cycle Images",
      "display_name": "CR Cycle Images (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Cycle Images Simple": {
      "input": {
          "required": {
              "mode": [
                  [
                      "Sequential"
                  ]
              ],
              "frame_interval": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 999,
                      "step": 1
                  }
              ],
              "loops": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "current_frame": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 9999.0,
                      "step": 1.0
                  }
              ]
          },
          "optional": {
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "image_3": [
                  "IMAGE"
              ],
              "image_4": [
                  "IMAGE"
              ],
              "image_5": [
                  "IMAGE"
              ],
              "image_list_simple": [
                  "IMAGE_LIST_SIMPLE"
              ]
          }
      },
      "input_order": {
          "required": [
              "mode",
              "frame_interval",
              "loops",
              "current_frame"
          ],
          "optional": [
              "image_1",
              "image_2",
              "image_3",
              "image_4",
              "image_5",
              "image_list_simple"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "show_help"
      ],
      "name": "CR Cycle Images Simple",
      "display_name": "CR Cycle Images Simple (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Model List": {
      "input": {
          "required": {
              "ckpt_name1": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "alias1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "ckpt_name2": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "alias2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "ckpt_name3": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "alias3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "ckpt_name4": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "alias4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "ckpt_name5": [
                  [
                      "None",
                      "CRM.pth",
                      "cardosAnime_v20.safetensors",
                      "disneyrealcartoonmix_v10.safetensors",
                      "dynavisionXLAllInOneStylized_releaseV0610Bakedvae.safetensors",
                      "epicrealism_naturalSinRC1VAE.safetensors",
                      "flat2DAnimerge_v45Sharp.safetensors",
                      "juggernautXL_juggXIByRundiffusion.safetensors",
                      "juggernautXL_v9Rdphoto2Lightning.safetensors",
                      "juggernaut_reborn.safetensors",
                      "modernDisneyXL_v3.safetensors",
                      "photon_v1.safetensors",
                      "realisticVisionV60B1_v51HyperVAE.safetensors",
                      "sd_xl_base_1.0.safetensors",
                      "sd_xl_base_1.0_0.9vae.safetensors",
                      "sd_xl_turbo_1.0.safetensors",
                      "turbovisionxlSuperFastXLBasedOnNew_tvxlV431Bakedvae.safetensors"
                  ]
              ],
              "alias5": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ]
          },
          "optional": {
              "model_list": [
                  "MODEL_LIST"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name1",
              "alias1",
              "ckpt_name2",
              "alias2",
              "ckpt_name3",
              "alias3",
              "ckpt_name4",
              "alias4",
              "ckpt_name5",
              "alias5"
          ],
          "optional": [
              "model_list"
          ]
      },
      "output": [
          "MODEL_LIST",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL_LIST",
          "show_text"
      ],
      "name": "CR Model List",
      "display_name": "CR Model List (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR LoRA List": {
      "input": {
          "required": {
              "lora_name1": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "alias1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "model_strength_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_strength_1": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_name2": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "alias2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "model_strength_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_strength_2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "lora_name3": [
                  [
                      "None",
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ]
              ],
              "alias3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "model_strength_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "clip_strength_3": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "lora_list": [
                  "lora_LIST"
              ]
          }
      },
      "input_order": {
          "required": [
              "lora_name1",
              "alias1",
              "model_strength_1",
              "clip_strength_1",
              "lora_name2",
              "alias2",
              "model_strength_2",
              "clip_strength_2",
              "lora_name3",
              "alias3",
              "model_strength_3",
              "clip_strength_3"
          ],
          "optional": [
              "lora_list"
          ]
      },
      "output": [
          "LORA_LIST",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LORA_LIST",
          "show_text"
      ],
      "name": "CR LoRA List",
      "display_name": "CR LoRA List (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Text List Simple": {
      "input": {
          "required": {},
          "optional": {
              "text_1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_5": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "text_list_simple": [
                  "TEXT_LIST_SIMPLE"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "text_1",
              "text_2",
              "text_3",
              "text_4",
              "text_5",
              "text_list_simple"
          ]
      },
      "output": [
          "TEXT_LIST_SIMPLE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "TEXT_LIST_SIMPLE",
          "show_help"
      ],
      "name": "CR Text List Simple",
      "display_name": "CR Text List Simple (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Image List": {
      "input": {
          "required": {},
          "optional": {
              "image_1": [
                  "IMAGE"
              ],
              "alias1": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "image_2": [
                  "IMAGE"
              ],
              "alias2": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "image_3": [
                  "IMAGE"
              ],
              "alias3": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "image_4": [
                  "IMAGE"
              ],
              "alias4": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "image_5": [
                  "IMAGE"
              ],
              "alias5": [
                  "STRING",
                  {
                      "multiline": false,
                      "default": ""
                  }
              ],
              "image_list": [
                  "image_LIST"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "image_1",
              "alias1",
              "image_2",
              "alias2",
              "image_3",
              "alias3",
              "image_4",
              "alias4",
              "image_5",
              "alias5",
              "image_list"
          ]
      },
      "output": [
          "IMAGE_LIST",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE_LIST",
          "show_help"
      ],
      "name": "CR Image List",
      "display_name": "CR Image List (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "CR Image List Simple": {
      "input": {
          "required": {},
          "optional": {
              "image_1": [
                  "IMAGE"
              ],
              "image_2": [
                  "IMAGE"
              ],
              "image_3": [
                  "IMAGE"
              ],
              "image_4": [
                  "IMAGE"
              ],
              "image_5": [
                  "IMAGE"
              ],
              "image_list_simple": [
                  "IMAGE_LIST_SIMPLE"
              ]
          }
      },
      "input_order": {
          "required": [],
          "optional": [
              "image_1",
              "image_2",
              "image_3",
              "image_4",
              "image_5",
              "image_list_simple"
          ]
      },
      "output": [
          "IMAGE_LIST_SIMPLE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE_LIST_SIMPLE",
          "show_help"
      ],
      "name": "CR Image List Simple",
      "display_name": "CR Image List Simple (Legacy)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_Comfyroll_CustomNodes",
      "category": "\ud83e\udde9 Comfyroll Studio/\ud83c\udfa5 Animation/\ud83d\udc80 Legacy",
      "output_node": false
  },
  "BlackAndWhite": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "cyan": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "magenta": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "yellow": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "red",
              "green",
              "blue",
              "cyan",
              "magenta",
              "yellow"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BlackAndWhite",
      "display_name": "Black and White",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "BlendIf": {
      "input": {
          "required": {
              "top_layer": [
                  "IMAGE"
              ],
              "bottom_layer": [
                  "IMAGE"
              ],
              "blend_if_layer": [
                  [
                      "top",
                      "bottom"
                  ]
              ],
              "blend_if_channel": [
                  [
                      "gray",
                      "red",
                      "green",
                      "blue"
                  ]
              ],
              "start_rise": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "end_rise": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "start_fall": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "end_fall": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "opacity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "match_size": [
                  [
                      "crop",
                      "stretch"
                  ]
              ],
              "invert_mask": [
                  [
                      "yes",
                      "no"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "top_layer",
              "bottom_layer",
              "blend_if_layer",
              "blend_if_channel",
              "start_rise",
              "end_rise",
              "start_fall",
              "end_fall",
              "opacity",
              "match_size",
              "invert_mask"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "BlendIf",
      "display_name": "Blend If",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso",
      "output_node": false
  },
  "BlendModes": {
      "input": {
          "required": {
              "backdrop": [
                  "IMAGE"
              ],
              "source": [
                  "IMAGE"
              ],
              "blend_mode": [
                  [
                      "normal",
                      "dissolve",
                      "darken",
                      "multiply",
                      "color burn",
                      "linear burn",
                      "darker color",
                      "lighten",
                      "screen",
                      "color dodge",
                      "linear dodge (add)",
                      "lighter color",
                      "overlay",
                      "soft light",
                      "hard light",
                      "vivid light",
                      "linear light",
                      "pin light",
                      "hard mix",
                      "difference",
                      "exclusion",
                      "subtract",
                      "divide",
                      "hue",
                      "saturation",
                      "color",
                      "luminosity",
                      "grain extract",
                      "grain merge"
                  ]
              ],
              "opacity": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "source_adjust": [
                  [
                      "crop",
                      "stretch"
                  ]
              ],
              "invert_mask": [
                  [
                      "yes",
                      "no"
                  ]
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "backdrop",
              "source",
              "blend_mode",
              "opacity",
              "source_adjust",
              "invert_mask"
          ],
          "optional": [
              "mask"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BlendModes",
      "display_name": "Blend Modes",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso",
      "output_node": false
  },
  "ColorBalance": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "lows_cyan_red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "lows_magenta_green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "lows_yellow_blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "mids_cyan_red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "mids_magenta_green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "mids_yellow_blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "highs_cyan_red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "highs_magenta_green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "highs_yellow_blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "preserve_luminosity": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "lows_cyan_red",
              "lows_magenta_green",
              "lows_yellow_blue",
              "mids_cyan_red",
              "mids_magenta_green",
              "mids_yellow_blue",
              "highs_cyan_red",
              "highs_magenta_green",
              "highs_yellow_blue",
              "preserve_luminosity"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ColorBalance",
      "display_name": "Color Balance",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "ColorBalanceAdvanced": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "brightness_target": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.001,
                      "max": 0.999,
                      "step": 0.001,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "cyan_red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "magenta_green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "yellow_blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "preserve_luminosity": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "brightness_target",
              "cyan_red",
              "magenta_green",
              "yellow_blue",
              "preserve_luminosity"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ColorBalanceAdvanced",
      "display_name": "Color Balance Advanced",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "HueSat": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "hue": [
                  [
                      "red",
                      "yellow",
                      "green",
                      "cyan",
                      "blue",
                      "magenta"
                  ]
              ],
              "hue_width": [
                  [
                      "normal",
                      "narrow",
                      "wide"
                  ]
              ],
              "feather": [
                  [
                      "normal",
                      "none",
                      "wide"
                  ]
              ],
              "hue_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "sat_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -100,
                      "max": 100,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "lightness_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "hue",
              "hue_width",
              "feather",
              "hue_offset",
              "sat_offset",
              "lightness_offset"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "HueSat",
      "display_name": "Hue/Saturation",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "HueSatAdvanced": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "hue_low": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 360.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "hue_low_feather": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 180,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "hue_high": [
                  "FLOAT",
                  {
                      "default": 360,
                      "min": 0,
                      "max": 360.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "hue_high_feather": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 180,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "hue_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -180.0,
                      "max": 180.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "sat_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -100,
                      "max": 100,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "lightness_offset": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": -100.0,
                      "max": 100.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "hue_low",
              "hue_low_feather",
              "hue_high",
              "hue_high_feather",
              "hue_offset",
              "sat_offset",
              "lightness_offset"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "HueSatAdvanced",
      "display_name": "Hue/Saturation Advanced",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "Levels": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "channel": [
                  [
                      "RGB",
                      "red",
                      "green",
                      "blue"
                  ]
              ],
              "input_black_point": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 0.98,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "input_gamma": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.01,
                      "max": 9.99,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "input_white_point": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "output_black_point": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ],
              "output_white_point": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.001,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "channel",
              "input_black_point",
              "input_gamma",
              "input_white_point",
              "output_black_point",
              "output_white_point"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Levels",
      "display_name": "Levels",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "LensBlur": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "radius": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "components": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 6,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "exposure_gamma": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": -100,
                      "max": 100,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "radius",
              "components",
              "exposure_gamma"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "LensBlur",
      "display_name": "Lens Blur",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "MotionBlur": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "size": [
                  "INT",
                  {
                      "default": 100.0,
                      "min": 0.0,
                      "max": 4096.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "angle": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 360.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "size",
              "angle"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MotionBlur",
      "display_name": "Motion Blur",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "GaussianBlur": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "amount": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "amount"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "GaussianBlur",
      "display_name": "Gaussian Blur",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "LensBlurDepth": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "depth_map": [
                  "IMAGE"
              ],
              "components": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 6,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "exposure_gamma": [
                  "FLOAT",
                  {
                      "default": 2,
                      "min": -100,
                      "max": 100,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "num_layers": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "min_blur": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "max_blur": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "depth_map",
              "components",
              "exposure_gamma",
              "num_layers",
              "min_blur",
              "max_blur"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "LensBlurDepth",
      "display_name": "Lens Blur with Depth Map",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "MotionBlurDepth": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "depth_map": [
                  "IMAGE"
              ],
              "angle": [
                  "INT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 360.0,
                      "step": 0.1,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "num_layers": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "min_blur": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "max_blur": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "depth_map",
              "angle",
              "num_layers",
              "min_blur",
              "max_blur"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MotionBlurDepth",
      "display_name": "Motion Blur with Depth Map",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "GaussianBlurDepth": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "depth_map": [
                  "IMAGE"
              ],
              "sigma": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "num_layers": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "min_blur": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "max_blur": [
                  "INT",
                  {
                      "default": 100,
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "depth_map",
              "sigma",
              "num_layers",
              "min_blur",
              "max_blur"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "GaussianBlurDepth",
      "display_name": "Gaussian Blur with Depth Map",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Blur",
      "output_node": false
  },
  "MergeRGB": {
      "input": {
          "required": {
              "red": [
                  "IMAGE"
              ],
              "green": [
                  "IMAGE"
              ],
              "blue": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "red",
              "green",
              "blue"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MergeRGB",
      "display_name": "Merge RGB",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Channels",
      "output_node": false
  },
  "SplitRGB": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "IMAGE",
          "IMAGE",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "red",
          "green",
          "blue"
      ],
      "name": "SplitRGB",
      "display_name": "Split RGB",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Channels",
      "output_node": false
  },
  "SelectiveColor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "color_range": [
                  [
                      "reds",
                      "yellows",
                      "greens",
                      "cyans",
                      "blues",
                      "magentas",
                      "whites",
                      "neutrals",
                      "blacks"
                  ]
              ],
              "cyan": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "magenta": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "yellow": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "black": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.01,
                      "round": 0.01,
                      "display": "number"
                  }
              ],
              "method": [
                  [
                      "absolute",
                      "relative"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "color_range",
              "cyan",
              "magenta",
              "yellow",
              "black",
              "method"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SelectiveColor",
      "display_name": "Selective Color",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Adjustment",
      "output_node": false
  },
  "SolidColor": {
      "input": {
          "required": {
              "color": [
                  [
                      "black",
                      "silver",
                      "gray",
                      "white",
                      "maroon",
                      "red",
                      "purple",
                      "fuchsia",
                      "green",
                      "lime",
                      "olive",
                      "yellow",
                      "navy",
                      "blue",
                      "teal",
                      "aqua"
                  ]
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "color",
              "height",
              "width"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "solid color image"
      ],
      "name": "SolidColor",
      "display_name": "Solid Color",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Solid Color",
      "output_node": false
  },
  "SolidColorRGB": {
      "input": {
          "required": {
              "red": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "green": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "blue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 255.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          },
          "optional": {
              "hex": [
                  "STRING",
                  {
                      "default": ""
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "red",
              "green",
              "blue",
              "height",
              "width"
          ],
          "optional": [
              "hex"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "solid color image"
      ],
      "name": "SolidColorRGB",
      "display_name": "Solid Color RGB",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Solid Color",
      "output_node": false
  },
  "SolidColorHSV": {
      "input": {
          "required": {
              "hue": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 360.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "saturation": [
                  "FLOAT",
                  {
                      "default": 50,
                      "min": 0,
                      "max": 100.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "value": [
                  "FLOAT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 100.0,
                      "step": 1,
                      "round": 0.1,
                      "display": "number"
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096,
                      "step": 1,
                      "round": 1,
                      "display": "number"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "hue",
              "saturation",
              "value",
              "height",
              "width"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "solid color image"
      ],
      "name": "SolidColorHSV",
      "display_name": "Solid Color HSV",
      "description": "",
      "python_module": "custom_nodes.virtuoso-nodes",
      "category": "Virtuoso/Solid Color",
      "output_node": false
  },
  "SAMModelLoader (segment anything)": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "sam_vit_h (2.56GB)",
                      "sam_vit_l (1.25GB)",
                      "sam_vit_b (375MB)",
                      "sam_hq_vit_h (2.57GB)",
                      "sam_hq_vit_l (1.25GB)",
                      "sam_hq_vit_b (379MB)",
                      "mobile_sam(39MB)"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ]
      },
      "output": [
          "SAM_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "SAM_MODEL"
      ],
      "name": "SAMModelLoader (segment anything)",
      "display_name": "SAMModelLoader (segment anything)",
      "description": "",
      "python_module": "custom_nodes.comfyui_segment_anything",
      "category": "segment_anything",
      "output_node": false
  },
  "GroundingDinoModelLoader (segment anything)": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "GroundingDINO_SwinT_OGC (694MB)",
                      "GroundingDINO_SwinB (938MB)"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ]
      },
      "output": [
          "GROUNDING_DINO_MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "GROUNDING_DINO_MODEL"
      ],
      "name": "GroundingDinoModelLoader (segment anything)",
      "display_name": "GroundingDinoModelLoader (segment anything)",
      "description": "",
      "python_module": "custom_nodes.comfyui_segment_anything",
      "category": "segment_anything",
      "output_node": false
  },
  "GroundingDinoSAMSegment (segment anything)": {
      "input": {
          "required": {
              "sam_model": [
                  "SAM_MODEL",
                  {}
              ],
              "grounding_dino_model": [
                  "GROUNDING_DINO_MODEL",
                  {}
              ],
              "image": [
                  "IMAGE",
                  {}
              ],
              "prompt": [
                  "STRING",
                  {}
              ],
              "threshold": [
                  "FLOAT",
                  {
                      "default": 0.3,
                      "min": 0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "sam_model",
              "grounding_dino_model",
              "image",
              "prompt",
              "threshold"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "GroundingDinoSAMSegment (segment anything)",
      "display_name": "GroundingDinoSAMSegment (segment anything)",
      "description": "",
      "python_module": "custom_nodes.comfyui_segment_anything",
      "category": "segment_anything",
      "output_node": false
  },
  "InvertMask (segment anything)": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "InvertMask (segment anything)",
      "display_name": "InvertMask (segment anything)",
      "description": "",
      "python_module": "custom_nodes.comfyui_segment_anything",
      "category": "segment_anything",
      "output_node": false
  },
  "IsMaskEmpty": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "NUMBER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "boolean_number"
      ],
      "name": "IsMaskEmpty",
      "display_name": "IsMaskEmpty",
      "description": "",
      "python_module": "custom_nodes.comfyui_segment_anything",
      "category": "segment_anything",
      "output_node": false
  },
  "CogVideoSampler": {
      "input": {
          "required": {
              "model": [
                  "COGVIDEOMODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 49,
                      "min": 1,
                      "max": 1024,
                      "step": 1
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 50,
                      "min": 1
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 6.0,
                      "min": 0.0,
                      "max": 30.0,
                      "step": 0.01
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "scheduler": [
                  [
                      "DPM++",
                      "Euler",
                      "Euler A",
                      "PNDM",
                      "DDIM",
                      "CogVideoXDDIM",
                      "CogVideoXDPMScheduler",
                      "SASolverScheduler",
                      "UniPCMultistepScheduler",
                      "HeunDiscreteScheduler",
                      "DEISMultistepScheduler",
                      "LCMScheduler"
                  ],
                  {
                      "default": "CogVideoXDDIM"
                  }
              ]
          },
          "optional": {
              "samples": [
                  "LATENT",
                  {
                      "tooltip": "init Latents to use for video2video process"
                  }
              ],
              "image_cond_latents": [
                  "LATENT",
                  {
                      "tooltip": "Latent to use for image2video conditioning"
                  }
              ],
              "denoise_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "context_options": [
                  "COGCONTEXT"
              ],
              "controlnet": [
                  "COGVIDECONTROLNET"
              ],
              "tora_trajectory": [
                  "TORAFEATURES"
              ],
              "fastercache": [
                  "FASTERCACHEARGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "num_frames",
              "steps",
              "cfg",
              "seed",
              "scheduler"
          ],
          "optional": [
              "samples",
              "image_cond_latents",
              "denoise_strength",
              "context_options",
              "controlnet",
              "tora_trajectory",
              "fastercache"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "samples"
      ],
      "name": "CogVideoSampler",
      "display_name": "CogVideo Sampler",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoDecode": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "samples": [
                  "LATENT"
              ],
              "enable_vae_tiling": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Drastically reduces memory use but may introduce seams"
                  }
              ],
              "tile_sample_min_height": [
                  "INT",
                  {
                      "default": 240,
                      "min": 16,
                      "max": 2048,
                      "step": 8,
                      "tooltip": "Minimum tile height, default is half the height"
                  }
              ],
              "tile_sample_min_width": [
                  "INT",
                  {
                      "default": 360,
                      "min": 16,
                      "max": 2048,
                      "step": 8,
                      "tooltip": "Minimum tile width, default is half the width"
                  }
              ],
              "tile_overlap_factor_height": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "tile_overlap_factor_width": [
                  "FLOAT",
                  {
                      "default": 0.2,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "auto_tile_size": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Auto size based on height and width, default is half the size"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "vae",
              "samples",
              "enable_vae_tiling",
              "tile_sample_min_height",
              "tile_sample_min_width",
              "tile_overlap_factor_height",
              "tile_overlap_factor_width",
              "auto_tile_size"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "images"
      ],
      "name": "CogVideoDecode",
      "display_name": "CogVideo Decode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoTextEncode": {
      "input": {
          "required": {
              "clip": [
                  "CLIP"
              ],
              "prompt": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "force_offload": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "clip",
              "prompt"
          ],
          "optional": [
              "strength",
              "force_offload"
          ]
      },
      "output": [
          "CONDITIONING",
          "CLIP"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "conditioning",
          "clip"
      ],
      "name": "CogVideoTextEncode",
      "display_name": "CogVideo TextEncode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoImageEncode": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "start_image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "end_image": [
                  "IMAGE"
              ],
              "enable_tiling": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable tiling for the VAE to reduce memory usage"
                  }
              ],
              "noise_aug_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001,
                      "tooltip": "Augment image with noise"
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "vae",
              "start_image"
          ],
          "optional": [
              "end_image",
              "enable_tiling",
              "noise_aug_strength",
              "strength",
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "samples"
      ],
      "name": "CogVideoImageEncode",
      "display_name": "CogVideo ImageEncode",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoTextEncodeCombine": {
      "input": {
          "required": {
              "conditioning_1": [
                  "CONDITIONING"
              ],
              "conditioning_2": [
                  "CONDITIONING"
              ],
              "combination_mode": [
                  [
                      "average",
                      "weighted_average",
                      "concatenate"
                  ],
                  {
                      "default": "weighted_average"
                  }
              ],
              "weighted_average_ratio": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "conditioning_1",
              "conditioning_2",
              "combination_mode",
              "weighted_average_ratio"
          ]
      },
      "output": [
          "CONDITIONING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "conditioning"
      ],
      "name": "CogVideoTextEncodeCombine",
      "display_name": "CogVideo TextEncode Combine",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoTransformerEdit": {
      "input": {
          "required": {
              "remove_blocks": [
                  "STRING",
                  {
                      "default": "15, 25, 37",
                      "multiline": true,
                      "tooltip": "Comma separated list of block indices to remove, 5b blocks: 0-41, 2b model blocks 0-29"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "remove_blocks"
          ]
      },
      "output": [
          "TRANSFORMERBLOCKS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "block_list"
      ],
      "name": "CogVideoTransformerEdit",
      "display_name": "CogVideo TransformerEdit",
      "description": "EXPERIMENTAL:Remove specific transformer blocks from the model",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoContextOptions": {
      "input": {
          "required": {
              "context_schedule": [
                  [
                      "uniform_standard",
                      "uniform_looped",
                      "static_standard"
                  ]
              ],
              "context_frames": [
                  "INT",
                  {
                      "default": 48,
                      "min": 2,
                      "max": 100,
                      "step": 1,
                      "tooltip": "Number of pixel frames in the context, NOTE: the latent space has 4 frames in 1"
                  }
              ],
              "context_stride": [
                  "INT",
                  {
                      "default": 4,
                      "min": 4,
                      "max": 100,
                      "step": 1,
                      "tooltip": "Context stride as pixel frames, NOTE: the latent space has 4 frames in 1"
                  }
              ],
              "context_overlap": [
                  "INT",
                  {
                      "default": 4,
                      "min": 4,
                      "max": 100,
                      "step": 1,
                      "tooltip": "Context overlap as pixel frames, NOTE: the latent space has 4 frames in 1"
                  }
              ],
              "freenoise": [
                  "BOOLEAN",
                  {
                      "default": true,
                      "tooltip": "Shuffle the noise"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "context_schedule",
              "context_frames",
              "context_stride",
              "context_overlap",
              "freenoise"
          ]
      },
      "output": [
          "COGCONTEXT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "context_options"
      ],
      "name": "CogVideoContextOptions",
      "display_name": "CogVideo Context Options",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoControlNet": {
      "input": {
          "required": {
              "controlnet": [
                  "COGVIDECONTROLNETMODEL"
              ],
              "images": [
                  "IMAGE"
              ],
              "control_strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "control_start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "control_end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "controlnet",
              "images",
              "control_strength",
              "control_start_percent",
              "control_end_percent"
          ]
      },
      "output": [
          "COGVIDECONTROLNET"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "cogvideo_controlnet"
      ],
      "name": "CogVideoControlNet",
      "display_name": "CogVideoControlNet",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "ToraEncodeTrajectory": {
      "input": {
          "required": {
              "tora_model": [
                  "TORAMODEL"
              ],
              "vae": [
                  "VAE"
              ],
              "coordinates": [
                  "STRING",
                  {
                      "forceInput": true
                  }
              ],
              "width": [
                  "INT",
                  {
                      "default": 720,
                      "min": 128,
                      "max": 2048,
                      "step": 8
                  }
              ],
              "height": [
                  "INT",
                  {
                      "default": 480,
                      "min": 128,
                      "max": 2048,
                      "step": 8
                  }
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 49,
                      "min": 2,
                      "max": 1024,
                      "step": 1
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "enable_tiling": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "tora_model",
              "vae",
              "coordinates",
              "width",
              "height",
              "num_frames",
              "strength",
              "start_percent",
              "end_percent"
          ],
          "optional": [
              "enable_tiling"
          ]
      },
      "output": [
          "TORAFEATURES",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "tora_trajectory",
          "video_flow_images"
      ],
      "name": "ToraEncodeTrajectory",
      "display_name": "Tora Encode Trajectory",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "ToraEncodeOpticalFlow": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "tora_model": [
                  "TORAMODEL"
              ],
              "optical_flow": [
                  "IMAGE"
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "start_percent": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "end_percent": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "vae",
              "tora_model",
              "optical_flow",
              "strength",
              "start_percent",
              "end_percent"
          ]
      },
      "output": [
          "TORAFEATURES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "tora_trajectory"
      ],
      "name": "ToraEncodeOpticalFlow",
      "display_name": "Tora Encode OpticalFlow",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoXFasterCache": {
      "input": {
          "required": {
              "start_step": [
                  "INT",
                  {
                      "default": 15,
                      "min": 0,
                      "max": 1024,
                      "step": 1
                  }
              ],
              "hf_step": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 1024,
                      "step": 1
                  }
              ],
              "lf_step": [
                  "INT",
                  {
                      "default": 40,
                      "min": 0,
                      "max": 1024,
                      "step": 1
                  }
              ],
              "cache_device": [
                  [
                      "main_device",
                      "offload_device",
                      "cuda:1"
                  ],
                  {
                      "default": "main_device",
                      "tooltip": "The device to use for the cache, main_device is on GPU and uses a lot of VRAM"
                  }
              ],
              "num_blocks_to_cache": [
                  "INT",
                  {
                      "default": 42,
                      "min": 0,
                      "max": 1024,
                      "step": 1,
                      "tooltip": "Number of transformer blocks to cache, 5b model has 42 blocks, tradeoff between speed and memory"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "start_step",
              "hf_step",
              "lf_step",
              "cache_device",
              "num_blocks_to_cache"
          ]
      },
      "output": [
          "FASTERCACHEARGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "fastercache"
      ],
      "name": "CogVideoXFasterCache",
      "display_name": "CogVideoX FasterCache",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoXFunResizeToClosestBucket": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "base_resolution": [
                  "INT",
                  {
                      "min": 64,
                      "max": 1280,
                      "step": 64,
                      "default": 512,
                      "tooltip": "Base resolution, closest training data bucket resolution is chosen based on the selection."
                  }
              ],
              "upscale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "lanczos"
                  ],
                  {
                      "default": "lanczos",
                      "tooltip": "Upscale method to use"
                  }
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "base_resolution",
              "upscale_method",
              "crop"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "images",
          "width",
          "height"
      ],
      "name": "CogVideoXFunResizeToClosestBucket",
      "display_name": "CogVideoXFun ResizeToClosestBucket",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoLatentPreview": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "min_val": [
                  "FLOAT",
                  {
                      "default": -0.15,
                      "min": -1.0,
                      "max": 0.0,
                      "step": 0.001
                  }
              ],
              "max_val": [
                  "FLOAT",
                  {
                      "default": 0.15,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "r_bias": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "g_bias": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "b_bias": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -1.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "seed",
              "min_val",
              "max_val",
              "r_bias",
              "g_bias",
              "b_bias"
          ]
      },
      "output": [
          "IMAGE",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "images",
          "latent_rgb_factors"
      ],
      "name": "CogVideoLatentPreview",
      "display_name": "CogVideo LatentPreview",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "PyramidFlowWrapper",
      "output_node": false
  },
  "CogVideoXTorchCompileSettings": {
      "input": {
          "required": {
              "backend": [
                  [
                      "inductor",
                      "cudagraphs"
                  ],
                  {
                      "default": "inductor"
                  }
              ],
              "fullgraph": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable full graph mode"
                  }
              ],
              "mode": [
                  [
                      "default",
                      "max-autotune",
                      "max-autotune-no-cudagraphs",
                      "reduce-overhead"
                  ],
                  {
                      "default": "default"
                  }
              ],
              "dynamic": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable dynamic mode"
                  }
              ],
              "dynamo_cache_size_limit": [
                  "INT",
                  {
                      "default": 64,
                      "min": 0,
                      "max": 1024,
                      "step": 1,
                      "tooltip": "torch._dynamo.config.cache_size_limit"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "backend",
              "fullgraph",
              "mode",
              "dynamic",
              "dynamo_cache_size_limit"
          ]
      },
      "output": [
          "COMPILEARGS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "torch_compile_args"
      ],
      "name": "CogVideoXTorchCompileSettings",
      "display_name": "CogVideo TorchCompileSettings",
      "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "MochiWrapper",
      "output_node": false
  },
  "CogVideoImageEncodeFunInP": {
      "input": {
          "required": {
              "vae": [
                  "VAE"
              ],
              "start_image": [
                  "IMAGE"
              ],
              "num_frames": [
                  "INT",
                  {
                      "default": 49,
                      "min": 2,
                      "max": 1024,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "end_image": [
                  "IMAGE"
              ],
              "enable_tiling": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Enable tiling for the VAE to reduce memory usage"
                  }
              ],
              "noise_aug_strength": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001,
                      "tooltip": "Augment image with noise"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "vae",
              "start_image",
              "num_frames"
          ],
          "optional": [
              "end_image",
              "enable_tiling",
              "noise_aug_strength"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image_cond_latents"
      ],
      "name": "CogVideoImageEncodeFunInP",
      "display_name": "CogVideo ImageEncode FunInP",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "DownloadAndLoadCogVideoModel": {
      "input": {
          "required": {
              "model": [
                  [
                      "THUDM/CogVideoX-2b",
                      "THUDM/CogVideoX-5b",
                      "THUDM/CogVideoX-5b-I2V",
                      "kijai/CogVideoX-5b-1.5-T2V",
                      "kijai/CogVideoX-5b-1.5-I2V",
                      "bertjiazheng/KoolCogVideoX-5b",
                      "kijai/CogVideoX-Fun-2b",
                      "kijai/CogVideoX-Fun-5b",
                      "kijai/CogVideoX-5b-Tora",
                      "alibaba-pai/CogVideoX-Fun-V1.1-2b-InP",
                      "alibaba-pai/CogVideoX-Fun-V1.1-5b-InP",
                      "alibaba-pai/CogVideoX-Fun-V1.1-2b-Pose",
                      "alibaba-pai/CogVideoX-Fun-V1.1-5b-Pose",
                      "alibaba-pai/CogVideoX-Fun-V1.1-5b-Control",
                      "alibaba-pai/CogVideoX-Fun-V1.5-5b-InP",
                      "feizhengcong/CogvideoX-Interpolation",
                      "NimVideo/cogvideox-2b-img2vid"
                  ]
              ]
          },
          "optional": {
              "precision": [
                  [
                      "fp16",
                      "fp32",
                      "bf16"
                  ],
                  {
                      "default": "bf16",
                      "tooltip": "official recommendation is that 2b model should be fp16, 5b model should be bf16"
                  }
              ],
              "quantization": [
                  [
                      "disabled",
                      "fp8_e4m3fn",
                      "fp8_e4m3fn_fastmode",
                      "torchao_fp8dq",
                      "torchao_fp8dqrow",
                      "torchao_int8dq",
                      "torchao_fp6"
                  ],
                  {
                      "default": "disabled",
                      "tooltip": "enabled casts the transformer to torch.float8_e4m3fn, fastmode is only for latest nvidia GPUs and requires torch 2.4.0 and cu124 minimum"
                  }
              ],
              "enable_sequential_cpu_offload": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "significantly reducing memory usage and slows down the inference"
                  }
              ],
              "block_edit": [
                  "TRANSFORMERBLOCKS",
                  {
                      "default": null
                  }
              ],
              "lora": [
                  "COGLORA",
                  {
                      "default": null
                  }
              ],
              "compile_args": [
                  "COMPILEARGS"
              ],
              "attention_mode": [
                  [
                      "sdpa",
                      "fused_sdpa",
                      "sageattn",
                      "fused_sageattn",
                      "sageattn_qk_int8_pv_fp8_cuda",
                      "sageattn_qk_int8_pv_fp16_cuda",
                      "sageattn_qk_int8_pv_fp16_triton",
                      "fused_sageattn_qk_int8_pv_fp8_cuda",
                      "fused_sageattn_qk_int8_pv_fp16_cuda",
                      "fused_sageattn_qk_int8_pv_fp16_triton",
                      "comfy"
                  ],
                  {
                      "default": "sdpa"
                  }
              ],
              "load_device": [
                  [
                      "main_device",
                      "offload_device"
                  ],
                  {
                      "default": "main_device"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ],
          "optional": [
              "precision",
              "quantization",
              "enable_sequential_cpu_offload",
              "block_edit",
              "lora",
              "compile_args",
              "attention_mode",
              "load_device"
          ]
      },
      "output": [
          "COGVIDEOMODEL",
          "VAE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "model",
          "vae"
      ],
      "name": "DownloadAndLoadCogVideoModel",
      "display_name": "(Down)load CogVideo Model",
      "description": "Downloads and loads the selected CogVideo model from Huggingface to 'ComfyUI/models/CogVideo'",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "DownloadAndLoadCogVideoGGUFModel": {
      "input": {
          "required": {
              "model": [
                  [
                      "CogVideoX_5b_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_I2V_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_1_5_I2V_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_fun_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_fun_1_1_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_fun_1_1_Pose_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_Interpolation_GGUF_Q4_0.safetensors",
                      "CogVideoX_5b_Tora_GGUF_Q4_0.safetensors"
                  ]
              ],
              "vae_precision": [
                  [
                      "fp16",
                      "fp32",
                      "bf16"
                  ],
                  {
                      "default": "bf16",
                      "tooltip": "VAE dtype"
                  }
              ],
              "fp8_fastmode": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "only supported on 4090 and later GPUs, also requires torch 2.4.0 with cu124 minimum"
                  }
              ],
              "load_device": [
                  [
                      "main_device",
                      "offload_device"
                  ],
                  {
                      "default": "main_device"
                  }
              ],
              "enable_sequential_cpu_offload": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "significantly reducing memory usage and slows down the inference"
                  }
              ]
          },
          "optional": {
              "block_edit": [
                  "TRANSFORMERBLOCKS",
                  {
                      "default": null
                  }
              ],
              "attention_mode": [
                  [
                      "sdpa",
                      "sageattn"
                  ],
                  {
                      "default": "sdpa"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "vae_precision",
              "fp8_fastmode",
              "load_device",
              "enable_sequential_cpu_offload"
          ],
          "optional": [
              "block_edit",
              "attention_mode"
          ]
      },
      "output": [
          "COGVIDEOMODEL",
          "VAE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "model",
          "vae"
      ],
      "name": "DownloadAndLoadCogVideoGGUFModel",
      "display_name": "(Down)load CogVideo GGUF Model",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "DownloadAndLoadCogVideoControlNet": {
      "input": {
          "required": {
              "model": [
                  [
                      "TheDenk/cogvideox-2b-controlnet-hed-v1",
                      "TheDenk/cogvideox-2b-controlnet-canny-v1",
                      "TheDenk/cogvideox-5b-controlnet-hed-v1",
                      "TheDenk/cogvideox-5b-controlnet-canny-v1"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "COGVIDECONTROLNETMODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "cogvideo_controlnet"
      ],
      "name": "DownloadAndLoadCogVideoControlNet",
      "display_name": "(Down)load CogVideo ControlNet",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "DownloadAndLoadToraModel": {
      "input": {
          "required": {
              "model": [
                  [
                      "kijai/CogVideoX-5b-Tora"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "TORAMODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "tora_model"
      ],
      "name": "DownloadAndLoadToraModel",
      "display_name": "(Down)load Tora Model",
      "description": "Downloads and loads the the Tora model from Huggingface to 'ComfyUI/models/CogVideo/CogVideoX-5b-Tora'",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoLoraSelect": {
      "input": {
          "required": {
              "lora": [
                  [
                      "CogVideoX-Fun-V1.1-2b-InP-HPS2.1.safetensors",
                      "CogVideoX-Fun-V1.1-2b-InP-MPS.safetensors",
                      "CogVideoX-Fun-V1.1-5b-InP-HPS2.1.safetensors",
                      "CogVideoX-Fun-V1.1-5b-InP-MPS.safetensors",
                      "CogVideoX-Fun-V1.5-5b-InP-HPS2.1.safetensors",
                      "CogVideoX-Fun-V1.5-5b-InP-MPS.safetensors",
                      "cogvideox_bladerunner.safetensors",
                      "orbit_left_lora_weights.safetensors"
                  ],
                  {
                      "tooltip": "LORA models are expected to be in ComfyUI/models/CogVideo/loras with .safetensors extension"
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.0001,
                      "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
                  }
              ]
          },
          "optional": {
              "prev_lora": [
                  "COGLORA",
                  {
                      "default": null,
                      "tooltip": "For loading multiple LoRAs"
                  }
              ],
              "fuse_lora": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Fuse the LoRA weights into the transformer"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "lora",
              "strength"
          ],
          "optional": [
              "prev_lora",
              "fuse_lora"
          ]
      },
      "output": [
          "COGLORA"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "lora"
      ],
      "name": "CogVideoLoraSelect",
      "display_name": "CogVideo LoraSelect",
      "description": "Select a LoRA model from ComfyUI/models/CogVideo/loras",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoXVAELoader": {
      "input": {
          "required": {
              "model_name": [
                  [
                      "YOZORA.vae.pt",
                      "ae.safetensors",
                      "mochi.safetensors",
                      "mochi_preview_vae_encoder_b16.safetensors",
                      "sdxl_vae.safetensors",
                      "vae-ft-mse-840000-ema-pruned.ckpt"
                  ],
                  {
                      "tooltip": "These models are loaded from 'ComfyUI/models/vae'"
                  }
              ]
          },
          "optional": {
              "precision": [
                  [
                      "fp16",
                      "fp32",
                      "bf16"
                  ],
                  {
                      "default": "bf16"
                  }
              ],
              "compile_args": [
                  "COMPILEARGS"
              ]
          }
      },
      "input_order": {
          "required": [
              "model_name"
          ],
          "optional": [
              "precision",
              "compile_args"
          ]
      },
      "output": [
          "VAE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "vae"
      ],
      "name": "CogVideoXVAELoader",
      "display_name": "CogVideoX VAE Loader",
      "description": "Loads CogVideoX VAE model from 'ComfyUI/models/vae'",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoXModelLoader": {
      "input": {
          "required": {
              "model": [
                  [
                      "IC-Light/iclight_sd15_fc.safetensors",
                      "flux1-dev-fp8.safetensors",
                      "flux1-dev.safetensors",
                      "flux1-schnell.safetensors"
                  ],
                  {
                      "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
                  }
              ],
              "base_precision": [
                  [
                      "fp16",
                      "fp32",
                      "bf16"
                  ],
                  {
                      "default": "bf16"
                  }
              ],
              "quantization": [
                  [
                      "disabled",
                      "fp8_e4m3fn",
                      "fp8_e4m3fn_fast",
                      "torchao_fp8dq",
                      "torchao_fp8dqrow",
                      "torchao_int8dq",
                      "torchao_fp6"
                  ],
                  {
                      "default": "disabled",
                      "tooltip": "optional quantization method"
                  }
              ],
              "load_device": [
                  [
                      "main_device",
                      "offload_device"
                  ],
                  {
                      "default": "main_device"
                  }
              ],
              "enable_sequential_cpu_offload": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "significantly reducing memory usage and slows down the inference"
                  }
              ]
          },
          "optional": {
              "block_edit": [
                  "TRANSFORMERBLOCKS",
                  {
                      "default": null
                  }
              ],
              "lora": [
                  "COGLORA",
                  {
                      "default": null
                  }
              ],
              "compile_args": [
                  "COMPILEARGS"
              ],
              "attention_mode": [
                  [
                      "sdpa",
                      "fused_sdpa",
                      "sageattn",
                      "fused_sageattn",
                      "sageattn_qk_int8_pv_fp8_cuda",
                      "sageattn_qk_int8_pv_fp16_cuda",
                      "sageattn_qk_int8_pv_fp16_triton",
                      "fused_sageattn_qk_int8_pv_fp8_cuda",
                      "fused_sageattn_qk_int8_pv_fp16_cuda",
                      "fused_sageattn_qk_int8_pv_fp16_triton",
                      "comfy"
                  ],
                  {
                      "default": "sdpa"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "base_precision",
              "quantization",
              "load_device",
              "enable_sequential_cpu_offload"
          ],
          "optional": [
              "block_edit",
              "lora",
              "compile_args",
              "attention_mode"
          ]
      },
      "output": [
          "COGVIDEOMODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "model"
      ],
      "name": "CogVideoXModelLoader",
      "display_name": "CogVideoX Model Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "CogVideoLoraSelectComfy": {
      "input": {
          "required": {
              "lora": [
                  [
                      "AnimateLCM_sd15_t2v_lora.safetensors",
                      "Lego_XL_v2.1.safetensors",
                      "Red_Bull_Canned_Drink__Flux_Lora.safetensors",
                      "Retro_Comic_Flux_v1_renderartist.safetensors",
                      "flux_dev_frostinglane_araminta_k.safetensors",
                      "flux_realism_lora.safetensors",
                      "flux_spirited_away.safetensors",
                      "ip-adapter-faceid-plusv2_sd15_lora.safetensors",
                      "ip-adapter-faceid-plusv2_sdxl_lora.safetensors",
                      "ip-adapter-faceid_sd15_lora.safetensors",
                      "ip-adapter-faceid_sdxl_lora.safetensors",
                      "ps1_style_SDXL_v2.safetensors",
                      "sdxl_lightning_4step_lora.safetensors",
                      "yarn_art_Flux_LoRA.safetensors"
                  ],
                  {
                      "tooltip": "LORA models are expected to be in ComfyUI/models/loras with .safetensors extension"
                  }
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -10.0,
                      "max": 10.0,
                      "step": 0.0001,
                      "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
                  }
              ]
          },
          "optional": {
              "prev_lora": [
                  "COGLORA",
                  {
                      "default": null,
                      "tooltip": "For loading multiple LoRAs"
                  }
              ],
              "fuse_lora": [
                  "BOOLEAN",
                  {
                      "default": false,
                      "tooltip": "Fuse the LoRA weights into the transformer"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "lora",
              "strength"
          ],
          "optional": [
              "prev_lora",
              "fuse_lora"
          ]
      },
      "output": [
          "COGLORA"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "lora"
      ],
      "name": "CogVideoLoraSelectComfy",
      "display_name": "CogVideo LoraSelect Comfy",
      "description": "Select a LoRA model from ComfyUI/models/loras",
      "python_module": "custom_nodes.ComfyUI-CogVideoXWrapper",
      "category": "CogVideoWrapper",
      "output_node": false
  },
  "VHS_VideoCombine": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "frame_rate": [
                  "FLOAT",
                  {
                      "default": 8,
                      "min": 1,
                      "step": 1
                  }
              ],
              "loop_count": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "AnimateDiff"
                  }
              ],
              "format": [
                  [
                      "image/gif",
                      "image/webp",
                      "video/16bit-png",
                      "video/8bit-png",
                      [
                          "video/ProRes",
                          [
                              [
                                  "profile",
                                  [
                                      "1",
                                      "2",
                                      "3",
                                      "4"
                                  ],
                                  {
                                      "default": "3"
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/av1-webm",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p10le",
                                      "yuv420p"
                                  ]
                              ],
                              [
                                  "crf",
                                  "INT",
                                  {
                                      "default": 23,
                                      "min": 0,
                                      "max": 100,
                                      "step": 1
                                  }
                              ],
                              [
                                  "input_color_depth",
                                  [
                                      "8bit",
                                      "16bit"
                                  ]
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/ffmpeg-gif",
                          [
                              [
                                  "dither",
                                  [
                                      "bayer",
                                      "heckbert",
                                      "floyd_steinberg",
                                      "sierra2",
                                      "sierra2_4a",
                                      "sierra3",
                                      "burkes",
                                      "atkinson",
                                      "none"
                                  ],
                                  {
                                      "default": "sierra2_4a"
                                  },
                                  "[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val"
                              ]
                          ]
                      ],
                      [
                          "video/h264-mp4",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p",
                                      "yuv420p10le"
                                  ]
                              ],
                              [
                                  "crf",
                                  "INT",
                                  {
                                      "default": 19,
                                      "min": 0,
                                      "max": 100,
                                      "step": 1
                                  }
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ],
                              [
                                  "trim_to_audio",
                                  "BOOLEAN",
                                  {
                                      "default": false
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/h265-mp4",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p10le",
                                      "yuv420p"
                                  ]
                              ],
                              [
                                  "crf",
                                  "INT",
                                  {
                                      "default": 22,
                                      "min": 0,
                                      "max": 100,
                                      "step": 1
                                  }
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/nvenc_h264-mp4",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p",
                                      "yuv420p10le",
                                      "rgba"
                                  ]
                              ],
                              [
                                  "bitrate",
                                  "INT",
                                  {
                                      "default": 10,
                                      "min": 1,
                                      "max": 999,
                                      "step": 1
                                  }
                              ],
                              [
                                  "megabit",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/nvenc_hevc-mp4",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p",
                                      "yuv420p10le",
                                      "rgba"
                                  ]
                              ],
                              [
                                  "bitrate",
                                  "INT",
                                  {
                                      "default": 10,
                                      "min": 1,
                                      "max": 999,
                                      "step": 1
                                  }
                              ],
                              [
                                  "megabit",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ]
                          ]
                      ],
                      [
                          "video/webm",
                          [
                              [
                                  "pix_fmt",
                                  [
                                      "yuv420p",
                                      "yuva420p"
                                  ]
                              ],
                              [
                                  "crf",
                                  "INT",
                                  {
                                      "default": 20,
                                      "min": 0,
                                      "max": 100,
                                      "step": 1
                                  }
                              ],
                              [
                                  "save_metadata",
                                  "BOOLEAN",
                                  {
                                      "default": true
                                  }
                              ],
                              [
                                  "trim_to_audio",
                                  "BOOLEAN",
                                  {
                                      "default": false
                                  }
                              ]
                          ]
                      ]
                  ]
              ],
              "pingpong": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "save_output": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "audio": [
                  "AUDIO"
              ],
              "meta_batch": [
                  "VHS_BatchManager"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "extra_pnginfo": "EXTRA_PNGINFO",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "images",
              "frame_rate",
              "loop_count",
              "filename_prefix",
              "format",
              "pingpong",
              "save_output"
          ],
          "optional": [
              "audio",
              "meta_batch",
              "vae"
          ],
          "hidden": [
              "prompt",
              "extra_pnginfo",
              "unique_id"
          ]
      },
      "output": [
          "VHS_FILENAMES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "Filenames"
      ],
      "name": "VHS_VideoCombine",
      "display_name": "Video Combine \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Video Combine \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine an image sequence into a video</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The images to be turned into a video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: (optional) audio to add to the video</div></div><div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long image sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided, the node will take latents as input instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Unlike on Load Video, this isn't always a strict upgrade over using a standalone VAE Decode.</div><div style=\"font-size: 1em\">If you have multiple Video Combine outputs, then the VAE decode will be performed for each output node increasing execution time</div><div style=\"font-size: 1em\">If you make any change to output settings on the Video Combine (such as changing the output format), the VAE decode will be performed again as the decoded result is (by design) not cached</div></div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"frame_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_rate: The frame rate which will be used for the output video. Consider converting this to an input and connecting this to a Load Video with Video Info(Loaded)->fps. When including audio, failure to properly set this will result in audio desync</div></div><div vhs_title=\"loop_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loop_count: The number of additional times the video should repeat. Can cause performance issues when used with long (100+ frames) sequences</div></div><div vhs_title=\"filename_prefix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename_prefix: A prefix to add to the name of the output filename. This can include subfolders or format strings.</div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: The output format to use. Formats starting with, 'image' are saved with PIL, but formats starting with 'video' utilize the video_formats system. 'video' options require ffmpeg and selecting one frequently adds additional options to the node.</div></div><div vhs_title=\"pingpong\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pingpong: Play the video normally, then repeat the video in reverse so that it 'pingpongs' back and forth. This is frequently used to minimize the appearance of skips on very short animations.</div></div><div vhs_title=\"save_output\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">save_output: Specifies if output files should be saved to the output folder, or the temporary output folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the processed result. If advanced previews is enabled, the output is always converted to a format viewable from the browser. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div><div vhs_title=\"Common Format Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Common Format Widgets: <div vhs_title=\"crf\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crf: Determines how much to prioritize quality over filesize. Numbers vary between formats, but on each format that includes it, the default value provides visually loss less output</div></div><div vhs_title=\"pix_fmt\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pix_fmt: The pixel format to use for output. Alternative options will often have higher quality at the cost of increased file size and reduced compatibility with external software.<div style=\"font-size: 1em\"><div vhs_title=\"yuv420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuv420p: The most common and default format</div></div><div vhs_title=\"yuv420p10le\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuv420p10le: Use 10 bit color depth. This can improve color quality when combined with 16bit input color depth</div></div><div vhs_title=\"yuva420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuva420p: Include transparency in the output video</div></div></div></div></div><div vhs_title=\"input_color_depth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">input_color_depth: VHS supports outputting 16bit images. While this produces higher quality output, the difference usually isn't visible without postprocessing and it significantly increases file size and processing time.</div></div><div vhs_title=\"save_metadata\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">save_metadata: Determines if metadata for the workflow should be included in the output video file</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": true
  },
  "VHS_LoadVideo": {
      "input": {
          "required": {
              "video": [
                  []
              ],
              "force_rate": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 60,
                      "step": 1
                  }
              ],
              "force_size": [
                  [
                      "Disabled",
                      "Custom Height",
                      "Custom Width",
                      "Custom",
                      "256x?",
                      "?x256",
                      "256x256",
                      "512x?",
                      "?x512",
                      "512x512"
                  ]
              ],
              "custom_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "custom_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "frame_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "meta_batch": [
                  "VHS_BatchManager"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "video",
              "force_rate",
              "force_size",
              "custom_width",
              "custom_height",
              "frame_load_cap",
              "skip_first_frames",
              "select_every_nth"
          ],
          "optional": [
              "meta_batch",
              "vae"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "AUDIO",
          "VHS_VIDEOINFO"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "frame_count",
          "audio",
          "video_info"
      ],
      "name": "VHS_LoadVideo",
      "display_name": "Load Video (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Video \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from the input folder</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder</div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose video to upload: An upload button is provided to upload local files to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_LoadVideoPath": {
      "input": {
          "required": {
              "video": [
                  "STRING",
                  {
                      "placeholder": "X://insert/path/here.mp4",
                      "vhs_path_extensions": [
                          "webm",
                          "mp4",
                          "mkv",
                          "gif",
                          "mov"
                      ]
                  }
              ],
              "force_rate": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 60,
                      "step": 1
                  }
              ],
              "force_size": [
                  [
                      "Disabled",
                      "Custom Height",
                      "Custom Width",
                      "Custom",
                      "256x?",
                      "?x256",
                      "256x256",
                      "512x?",
                      "?x512",
                      "512x512"
                  ]
              ],
              "custom_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "custom_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "frame_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "meta_batch": [
                  "VHS_BatchManager"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "video",
              "force_rate",
              "force_size",
              "custom_width",
              "custom_height",
              "frame_load_cap",
              "skip_first_frames",
              "select_every_nth"
          ],
          "optional": [
              "meta_batch",
              "vae"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "AUDIO",
          "VHS_VIDEOINFO"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "frame_count",
          "audio",
          "video_info"
      ],
      "name": "VHS_LoadVideoPath",
      "display_name": "Load Video (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Video (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded.<div style=\"font-size: 1em\">You can also select an image to load it as a single frame</div><div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_LoadVideoFFmpeg": {
      "input": {
          "required": {
              "video": [
                  []
              ],
              "force_rate": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 60,
                      "step": 1
                  }
              ],
              "force_size": [
                  [
                      "Disabled",
                      "Custom Height",
                      "Custom Width",
                      "Custom",
                      "256x?",
                      "?x256",
                      "256x256",
                      "512x?",
                      "?x512",
                      "512x512"
                  ]
              ],
              "custom_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "custom_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "frame_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "start_time": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "meta_batch": [
                  "VHS_BatchManager"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "video",
              "force_rate",
              "force_size",
              "custom_width",
              "custom_height",
              "frame_load_cap",
              "start_time"
          ],
          "optional": [
              "meta_batch",
              "vae"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "AUDIO",
          "VHS_VIDEOINFO"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "mask",
          "audio",
          "video_info"
      ],
      "name": "VHS_LoadVideoFFmpeg",
      "display_name": "Load Video FFmpeg (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Video FFmpeg \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from the input folder using ffmpeg instead of opencv</div></div><div style=\"font-size: 0.8em\">Provides faster execution speed, transparency support, and allows specifying start time in seconds</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: Transparency data from the loaded video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder</div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: A timestamp, in seconds from the start of the video, to start loading frames from. </div></div><div vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose video to upload: An upload button is provided to upload local files to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false,
      "experimental": true
  },
  "VHS_LoadVideoFFmpegPath": {
      "input": {
          "required": {
              "video": [
                  "STRING",
                  {
                      "placeholder": "X://insert/path/here.mp4",
                      "vhs_path_extensions": [
                          "webm",
                          "mp4",
                          "mkv",
                          "gif",
                          "mov"
                      ]
                  }
              ],
              "force_rate": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 60,
                      "step": 1
                  }
              ],
              "force_size": [
                  [
                      "Disabled",
                      "Custom Height",
                      "Custom Width",
                      "Custom",
                      "256x?",
                      "?x256",
                      "256x256",
                      "512x?",
                      "?x512",
                      "512x512"
                  ]
              ],
              "custom_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "custom_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "frame_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "start_time": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "meta_batch": [
                  "VHS_BatchManager"
              ],
              "vae": [
                  "VAE"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "video",
              "force_rate",
              "force_size",
              "custom_width",
              "custom_height",
              "frame_load_cap",
              "start_time"
          ],
          "optional": [
              "meta_batch",
              "vae"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "AUDIO",
          "VHS_VIDEOINFO"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "mask",
          "audio",
          "video_info"
      ],
      "name": "VHS_LoadVideoFFmpegPath",
      "display_name": "Load Video FFmpeg (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Video FFmpeg (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from an arbitrary path using ffmpeg instead of opencv</div></div><div style=\"font-size: 0.8em\">Provides faster execution speed, transparency support, and allows specifying start time in seconds</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: Transparency data from the loaded video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded.<div style=\"font-size: 1em\">You can also select an image to load it as a single frame</div><div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false,
      "experimental": true
  },
  "VHS_LoadImagePath": {
      "input": {
          "required": {
              "image": [
                  "STRING",
                  {
                      "placeholder": "X://insert/path/here.png",
                      "vhs_path_extensions": [
                          ".tiff",
                          ".pgm",
                          ".tif",
                          ".ppm",
                          ".jpeg",
                          ".jpg",
                          ".png",
                          ".webp",
                          ".bmp"
                      ]
                  }
              ],
              "force_size": [
                  [
                      "Disabled",
                      "Custom Height",
                      "Custom Width",
                      "Custom",
                      "256x?",
                      "?x256",
                      "256x256",
                      "512x?",
                      "?x512",
                      "512x512"
                  ]
              ],
              "custom_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "custom_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ]
          },
          "optional": {
              "vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "force_size",
              "custom_width",
              "custom_height"
          ],
          "optional": [
              "vae"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "mask"
      ],
      "name": "VHS_LoadImagePath",
      "display_name": "Load Image (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Image (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Load a single image from a given path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"image\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image: The image file to be loaded.<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false,
      "experimental": true
  },
  "VHS_LoadImages": {
      "input": {
          "required": {
              "directory": [
                  [
                      "3d"
                  ]
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_images": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "meta_batch": [
                  "VHS_BatchManager"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "directory"
          ],
          "optional": [
              "image_load_cap",
              "skip_first_images",
              "select_every_nth",
              "meta_batch"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "frame_count"
      ],
      "name": "VHS_LoadImages",
      "display_name": "Load Images (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a sequence of images from a subdirectory of the input folder</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">directory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files</div></div><div vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image_load_cap: The maximum number of images to load. If 0, all images are loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: A timestamp, in seconds from the start of the video, to start loading frames from. </div></div><div vhs_title=\"choose folder to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose folder to upload: An upload button is provided to upload a local folder containing images to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_LoadImagesPath": {
      "input": {
          "required": {
              "directory": [
                  "STRING",
                  {
                      "placeholder": "X://path/to/images",
                      "vhs_path_extensions": []
                  }
              ]
          },
          "optional": {
              "image_load_cap": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_images": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "meta_batch": [
                  "VHS_BatchManager"
              ]
          },
          "hidden": {
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "directory"
          ],
          "optional": [
              "image_load_cap",
              "skip_first_images",
              "select_every_nth",
              "meta_batch"
          ],
          "hidden": [
              "unique_id"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK",
          "frame_count"
      ],
      "name": "VHS_LoadImagesPath",
      "display_name": "Load Images (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Images (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a sequence of images from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">directory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image_load_cap: The maximum number of images to load. If 0, all images are loaded.</div></div><div vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_images: A number of images which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Keeps only the first of every n frames and discard the rest.</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_LoadAudio": {
      "input": {
          "required": {
              "audio_file": [
                  "STRING",
                  {
                      "default": "input/",
                      "vhs_path_extensions": [
                          "wav",
                          "mp3",
                          "ogg",
                          "m4a",
                          "flac"
                      ]
                  }
              ]
          },
          "optional": {
              "seek_seconds": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "audio_file"
          ],
          "optional": [
              "seek_seconds"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "audio"
      ],
      "name": "VHS_LoadAudio",
      "display_name": "Load Audio (Path)\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Audio (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads an audio file from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The loaded audio</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"audio_file\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio_file: The audio file to be loaded.<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"seek_seconds\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">seek_seconds: An offset from the start of the sound file that the audio should start from</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
      "output_node": false
  },
  "VHS_LoadAudioUpload": {
      "input": {
          "required": {
              "audio": [
                  []
              ],
              "start_time": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000000,
                      "step": 0.01
                  }
              ],
              "duration": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 10000000,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "audio",
              "start_time",
              "duration"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "audio"
      ],
      "name": "VHS_LoadAudioUpload",
      "display_name": "Load Audio (Upload)\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Load Audio (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads an audio file from the input directory</div></div><div style=\"font-size: 0.8em\">Very similar in functionality to the built-in LoadAudio. It was originally added before VHS swapped to use Comfy's internal AUDIO format, but provides the additional options for start time and duration</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The loaded audio</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio file to be loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: An offset from the start of the sound file that the audio should start from</div></div><div vhs_title=\"duration\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">duration: A maximum limit for the audio. Disabled if 0</div></div><div vhs_title=\"choose audio to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose audio to upload: An upload button is provided to upload an audio file to the input folder</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
      "output_node": false
  },
  "VHS_AudioToVHSAudio": {
      "input": {
          "required": {
              "audio": [
                  "AUDIO"
              ]
          }
      },
      "input_order": {
          "required": [
              "audio"
          ]
      },
      "output": [
          "VHS_AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "vhs_audio"
      ],
      "name": "VHS_AudioToVHSAudio",
      "display_name": "Audio to legacy VHS_AUDIO\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Audio to legacy VHS_AUDIO \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>utility function for compatibility with external nodes</div></div><div style=\"font-size: 0.8em\">VHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: An input in the standardized AUDIO format</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An output in the legacy VHS_AUDIO format for use with external nodes</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
      "output_node": false
  },
  "VHS_VHSAudioToAudio": {
      "input": {
          "required": {
              "vhs_audio": [
                  "VHS_AUDIO"
              ]
          }
      },
      "input_order": {
          "required": [
              "vhs_audio"
          ]
      },
      "output": [
          "AUDIO"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "audio"
      ],
      "name": "VHS_VHSAudioToAudio",
      "display_name": "Legacy VHS_AUDIO to Audio\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Legacy VHS_AUDIO to Audio \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>utility function for compatibility with external nodes</div></div><div style=\"font-size: 0.8em\">VHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An input in the legacy VHS_AUDIO format produced by an external node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An output in the standardized AUDIO format</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
      "output_node": false
  },
  "VHS_PruneOutputs": {
      "input": {
          "required": {
              "filenames": [
                  "VHS_FILENAMES"
              ],
              "options": [
                  [
                      "Intermediate",
                      "Intermediate and Utility"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "filenames",
              "options"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "VHS_PruneOutputs",
      "display_name": "Prune Outputs \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Prune Outputs \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Automates deletion of undesired outputs from a Video Combine node.</div></div><div style=\"font-size: 0.8em\">Video Combine produces a number of file outputs in addition to the final output. Some of these, such as a video file without audio included, are implementation limitations and are not feasible to solve. As an alternative, the Prune Outputs node is added to automate the deletion of these file outputs if they are not desired</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filenames: A connection from a Video Combine node to indicate which outputs should be pruned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"options\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">options: Which files should be deleted<div style=\"font-size: 1em\"><div vhs_title=\"Intermediate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Intermediate: Delete any files that were required for intermediate processing but are not the final output, like the no-audio output file when audio is included</div></div><div vhs_title=\"Intermediate and Utility\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Intermediate and Utility: Delete all produced files that aren't the final output, including the first frame png</div></div></div></div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": true
  },
  "VHS_BatchManager": {
      "input": {
          "required": {
              "frames_per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          },
          "hidden": {
              "prompt": "PROMPT",
              "unique_id": "UNIQUE_ID"
          }
      },
      "input_order": {
          "required": [
              "frames_per_batch"
          ],
          "hidden": [
              "prompt",
              "unique_id"
          ]
      },
      "output": [
          "VHS_BatchManager"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "meta_batch"
      ],
      "name": "VHS_BatchManager",
      "display_name": "Meta Batch Manager \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Meta Batch Manager \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split the processing of a very long video into sets of smaller Meta Batches</div></div><div style=\"font-size: 0.8em\">The Meta Batch Manager allows for extremely long input videos to be processed when all other methods for fitting the content in RAM fail. It does not effect VRAM usage.</div><div style=\"font-size: 0.8em\">It must be connected to at least one Input (a Load Video or Load Images) AND at least one Video Combine</div><div style=\"font-size: 0.8em\"><img src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/7cb3fb7e-59d8-4cb2-a09f-9c6698de8b1f style=\"width: 0px; min-width: 100%\"></div><div style=\"font-size: 0.8em\">It functions by holding both the inputs and ouputs open between executions, and automatically requeue's the workflow until one of the inputs is unable to provide additional images.</div><div style=\"font-size: 0.8em\">Because each sub execution only contains a subset of the total frames, each sub execution creates a hard window which temporal smoothing can not be applied across. This results in jumps in the output.</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: Add all connected nodes to this Meta Batch</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"frames_per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frames_per_batch: How many frames to process for each sub execution. If loading as image, each frame will use about 50MB of RAM (not VRAM), and this can safely be set in the 100-1000 range, depending on available memory. When loading and combining from latent space (no blue image noodles exist), this value can be much higher, around the 2,000 to 20,000 range</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_VideoInfo": {
      "input": {
          "required": {
              "video_info": [
                  "VHS_VIDEOINFO"
              ]
          }
      },
      "input_order": {
          "required": [
              "video_info"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "FLOAT",
          "INT",
          "INT",
          "FLOAT",
          "INT",
          "FLOAT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "source_fps\ud83d\udfe8",
          "source_frame_count\ud83d\udfe8",
          "source_duration\ud83d\udfe8",
          "source_width\ud83d\udfe8",
          "source_height\ud83d\udfe8",
          "loaded_fps\ud83d\udfe6",
          "loaded_frame_count\ud83d\udfe6",
          "loaded_duration\ud83d\udfe6",
          "loaded_width\ud83d\udfe6",
          "loaded_height\ud83d\udfe6"
      ],
      "name": "VHS_VideoInfo",
      "display_name": "Video Info \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Video Info \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"source_fps\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_fps\ud83d\udfe8: The frame rate of the video</div></div><div vhs_title=\"source_frame_count\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_frame_count\ud83d\udfe8: How many total frames the video contains before accounting for frame rate or select_every_nth</div></div><div vhs_title=\"source_duration\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_duration\ud83d\udfe8: The length of images just returned in seconds</div></div><div vhs_title=\"source_width\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_width\ud83d\udfe8: The width</div></div><div vhs_title=\"source_height\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_height\ud83d\udfe8: The height</div></div><div vhs_title=\"loaded_fps\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_fps\ud83d\udfe6: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.</div></div><div vhs_title=\"loaded_frame_count\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_frame_count\ud83d\udfe6: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself</div></div><div vhs_title=\"loaded_duration\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_duration\ud83d\udfe6: The duration in seconds of returned images after accounting for frame_load_cap</div></div><div vhs_title=\"loaded_width\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_width\ud83d\udfe6: The width of the video after scaling. These coordinates are in image space even if loading to latent space</div></div><div vhs_title=\"loaded_height\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_height\ud83d\udfe6: The height of the video after scaling. These coordinates are in image space even if loading to latent space</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_VideoInfoSource": {
      "input": {
          "required": {
              "video_info": [
                  "VHS_VIDEOINFO"
              ]
          }
      },
      "input_order": {
          "required": [
              "video_info"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "FLOAT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "fps\ud83d\udfe8",
          "frame_count\ud83d\udfe8",
          "duration\ud83d\udfe8",
          "width\ud83d\udfe8",
          "height\ud83d\udfe8"
      ],
      "name": "VHS_VideoInfoSource",
      "display_name": "Video Info (Source) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Video Info Source \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs describing the file itself without accounting for load options</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"source_fps\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_fps\ud83d\udfe8: The frame rate of the video</div></div><div vhs_title=\"source_frame_count\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_frame_count\ud83d\udfe8: How many total frames the video contains before accounting for frame rate or select_every_nth</div></div><div vhs_title=\"source_duration\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_duration\ud83d\udfe8: The length of images just returned in seconds</div></div><div vhs_title=\"source_width\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_width\ud83d\udfe8: The original width</div></div><div vhs_title=\"source_height\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_height\ud83d\udfe8: The original height</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_VideoInfoLoaded": {
      "input": {
          "required": {
              "video_info": [
                  "VHS_VIDEOINFO"
              ]
          }
      },
      "input_order": {
          "required": [
              "video_info"
          ]
      },
      "output": [
          "FLOAT",
          "INT",
          "FLOAT",
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "fps\ud83d\udfe6",
          "frame_count\ud83d\udfe6",
          "duration\ud83d\udfe6",
          "width\ud83d\udfe6",
          "height\ud83d\udfe6"
      ],
      "name": "VHS_VideoInfoLoaded",
      "display_name": "Video Info (Loaded) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Video Info Loaded \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs describing the file itself after accounting for load options</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"loaded_fps\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_fps\ud83d\udfe6: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.</div></div><div vhs_title=\"loaded_frame_count\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_frame_count\ud83d\udfe6: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself</div></div><div vhs_title=\"loaded_duration\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_duration\ud83d\udfe6: The duration in seconds of returned images after accounting for frame_load_cap</div></div><div vhs_title=\"loaded_width\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_width\ud83d\udfe6: The width of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly</div></div><div vhs_title=\"loaded_height\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_height\ud83d\udfe6: The height of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_SelectFilename": {
      "input": {
          "required": {
              "filenames": [
                  "VHS_FILENAMES"
              ],
              "index": [
                  "INT",
                  {
                      "default": -1,
                      "step": 1,
                      "min": -1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "filenames",
              "index"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "Filename"
      ],
      "name": "VHS_SelectFilename",
      "display_name": "Select Filename \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "VAE Select Filename \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Select a single filename from the VHS_FILENAMES output by a Video Combine and return it as a string</div></div><div style=\"font-size: 0.8em\">Take care when combining this node with Prune Outputs. The VHS_FILENAMES object is immutable and will always contain the full list of output files, but execution order is undefined behavior (currently, Prune Outputs will generally execute first) and SelectFilename may return a path to a file that no longer exists.</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filenames: A VHS_FILENAMES from a Video Combine node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"filename\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename: A string representation of the full output path for the chosen file</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">index: The index of which file should be selected. The default, -1, chooses the most complete output</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false
  },
  "VHS_VAEEncodeBatched": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "vae": [
                  "VAE"
              ],
              "per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "vae",
              "per_batch"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VHS_VAEEncodeBatched",
      "display_name": "VAE Encode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "VAE Encode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Encode images as latents with a manually specified batch size.</div></div><div style=\"font-size: 0.8em\">Some people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when encoding images.</div><div style=\"font-size: 0.8em\">Unless these issues have been encountered, it is simpler to use the native VAE Encode or to encode directly from a Load Video</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"pixels\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pixels: The images to be encoded.</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: The VAE to use when encoding.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The encoded latents.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">per_batch: The maximum number of images to encode in each batch.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/batched nodes",
      "output_node": false
  },
  "VHS_VAEDecodeBatched": {
      "input": {
          "required": {
              "samples": [
                  "LATENT"
              ],
              "vae": [
                  "VAE"
              ],
              "per_batch": [
                  "INT",
                  {
                      "default": 16,
                      "min": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "samples",
              "vae",
              "per_batch"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "VHS_VAEDecodeBatched",
      "display_name": "VAE Decode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "VAE Decode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Decode latents to images with a manually specified batch size</div></div><div style=\"font-size: 0.8em\">Some people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when decoding latents.</div><div style=\"font-size: 0.8em\">Unless these issues have been encountered, it is simpler to use the native VAE Decode or to decode from a Video Combine directly</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"samples\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">samples: The latents to be decoded.</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: The VAE to use when decoding.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The decoded images.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">per_batch: The maximum number of images to decode in each batch.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/batched nodes",
      "output_node": false
  },
  "VHS_SplitLatents": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "split_index": [
                  "INT",
                  {
                      "default": 0,
                      "step": 1,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "split_index"
          ]
      },
      "output": [
          "LATENT",
          "INT",
          "LATENT",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "LATENT_A",
          "A_count",
          "LATENT_B",
          "B_count"
      ],
      "name": "VHS_SplitLatents",
      "display_name": "Split Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Split Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of latents into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The latents to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT_A: The first group of latents</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of latents in group A. This will be equal to split_index unless the latents input has length less than split_index</div></div><div vhs_title=\"LATENT_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT_B: The second group of latents</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of latents in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_SplitImages": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "split_index": [
                  "INT",
                  {
                      "default": 0,
                      "step": 1,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "split_index"
          ]
      },
      "output": [
          "IMAGE",
          "INT",
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "IMAGE_A",
          "A_count",
          "IMAGE_B",
          "B_count"
      ],
      "name": "VHS_SplitImages",
      "display_name": "Split Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Split Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of images into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The images to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE_A: The first group of images</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of images in group A. This will be equal to split_index unless the images input has length less than split_index</div></div><div vhs_title=\"IMAGE_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE_B: The second group of images</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of images in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_SplitMasks": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "split_index": [
                  "INT",
                  {
                      "default": 0,
                      "step": 1,
                      "min": -9007199254740991,
                      "max": 9007199254740991
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "split_index"
          ]
      },
      "output": [
          "MASK",
          "INT",
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MASK_A",
          "A_count",
          "MASK_B",
          "B_count"
      ],
      "name": "VHS_SplitMasks",
      "display_name": "Split Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Split Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of masks into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: The masks to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK_A: The first group of masks</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of masks in group A. This will be equal to split_index unless the mask input has length less than split_index</div></div><div vhs_title=\"MASK_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK_B: The second group of masks</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of masks in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_MergeLatents": {
      "input": {
          "required": {
              "latents_A": [
                  "LATENT"
              ],
              "latents_B": [
                  "LATENT"
              ],
              "merge_strategy": [
                  [
                      "match A",
                      "match B",
                      "match smaller",
                      "match larger"
                  ]
              ],
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "bislerp"
                  ]
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "latents_A",
              "latents_B",
              "merge_strategy",
              "scale_method",
              "crop"
          ]
      },
      "output": [
          "LATENT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "count"
      ],
      "name": "VHS_MergeLatents",
      "display_name": "Merge Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Merge Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of latents into a single group of latents</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents_A: The first group of latents</div></div><div vhs_title=\"latents_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents_B: The first group of latents</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The combined group of latents</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_MergeImages": {
      "input": {
          "required": {
              "images_A": [
                  "IMAGE"
              ],
              "images_B": [
                  "IMAGE"
              ],
              "merge_strategy": [
                  [
                      "match A",
                      "match B",
                      "match smaller",
                      "match larger"
                  ]
              ],
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "bislerp"
                  ]
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "images_A",
              "images_B",
              "merge_strategy",
              "scale_method",
              "crop"
          ]
      },
      "output": [
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "count"
      ],
      "name": "VHS_MergeImages",
      "display_name": "Merge Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Merge Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of images into a single group of images</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images_A: The first group of images</div></div><div vhs_title=\"images_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images_B: The first group of images</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The combined group of images</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_MergeMasks": {
      "input": {
          "required": {
              "mask_A": [
                  "MASK"
              ],
              "mask_B": [
                  "MASK"
              ],
              "merge_strategy": [
                  [
                      "match A",
                      "match B",
                      "match smaller",
                      "match larger"
                  ]
              ],
              "scale_method": [
                  [
                      "nearest-exact",
                      "bilinear",
                      "area",
                      "bicubic",
                      "bislerp"
                  ]
              ],
              "crop": [
                  [
                      "disabled",
                      "center"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "mask_A",
              "mask_B",
              "merge_strategy",
              "scale_method",
              "crop"
          ]
      },
      "output": [
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MASK",
          "count"
      ],
      "name": "VHS_MergeMasks",
      "display_name": "Merge Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Merge Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of masks into a single group of masks</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask_A: The first group of masks</div></div><div vhs_title=\"mask_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask_B: The first group of masks</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The combined group of masks</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_GetLatentCount": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "latents"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "count"
      ],
      "name": "VHS_GetLatentCount",
      "display_name": "Get Latent Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Get Latent Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of latents in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The input latent</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the input</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_GetImageCount": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "images"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "count"
      ],
      "name": "VHS_GetImageCount",
      "display_name": "Get Image Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Get Image Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of images in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The input image</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of images in the input</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_GetMaskCount": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "mask"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "count"
      ],
      "name": "VHS_GetMaskCount",
      "display_name": "Get Mask Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Get Mask Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of masks in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">masks: The input mask</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of masks in the input</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_DuplicateLatents": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "multiply_by": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "multiply_by"
          ]
      },
      "output": [
          "LATENT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "count"
      ],
      "name": "VHS_DuplicateLatents",
      "display_name": "Repeat Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Repeat Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a latent to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The latents to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The latent with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the output. Equal to the length of the input latent * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the latent should repeat. 1, the default, means no change.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_DuplicateImages": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "multiply_by": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "multiply_by"
          ]
      },
      "output": [
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "count"
      ],
      "name": "VHS_DuplicateImages",
      "display_name": "Repeat Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Repeat Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a image to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"IMAGES\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGES: The image to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The image with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of image in the output. Equal to the length of the input image * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_DuplicateMasks": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "multiply_by": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "multiply_by"
          ]
      },
      "output": [
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MASK",
          "count"
      ],
      "name": "VHS_DuplicateMasks",
      "display_name": "Repeat Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Repeat Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a mask to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">masks: The masks to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The mask with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of mask in the output. Equal to the length of the input mask * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_SelectEveryNthLatent": {
      "input": {
          "required": {
              "latents": [
                  "LATENT"
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_latents": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latents",
              "select_every_nth",
              "skip_first_latents"
          ]
      },
      "output": [
          "LATENT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "LATENT",
          "count"
      ],
      "name": "VHS_SelectEveryNthLatent",
      "display_name": "Select Every Nth Latent \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Select Every Nth Latent \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 latent for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The input latent</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The output latents</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_latents: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the latent into groups</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_SelectEveryNthImage": {
      "input": {
          "required": {
              "images": [
                  "IMAGE"
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_images": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "images",
              "select_every_nth",
              "skip_first_images"
          ]
      },
      "output": [
          "IMAGE",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "count"
      ],
      "name": "VHS_SelectEveryNthImage",
      "display_name": "Select Every Nth Image \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Select Every Nth Image \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 image for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The input image</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The output images</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of images in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_images: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the image into groups</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_SelectEveryNthMask": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "select_every_nth": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ],
              "skip_first_masks": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9007199254740991,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "select_every_nth",
              "skip_first_masks"
          ]
      },
      "output": [
          "MASK",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MASK",
          "count"
      ],
      "name": "VHS_SelectEveryNthMask",
      "display_name": "Select Every Nth Mask \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Select Every Nth Mask \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 mask for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: The input mask</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The output mask</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of mask in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_mask: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the mask into groups</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_SelectLatents": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0"
                  }
              ],
              "err_if_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "err_if_empty": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "latent",
              "indexes",
              "err_if_missing",
              "err_if_empty"
          ]
      },
      "output": [
          "LATENT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "LATENT"
      ],
      "name": "VHS_SelectLatents",
      "display_name": "Select Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
      "output_node": false
  },
  "VHS_SelectImages": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0"
                  }
              ],
              "err_if_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "err_if_empty": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "indexes",
              "err_if_missing",
              "err_if_empty"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "VHS_SelectImages",
      "display_name": "Select Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
      "output_node": false
  },
  "VHS_SelectMasks": {
      "input": {
          "required": {
              "mask": [
                  "MASK"
              ],
              "indexes": [
                  "STRING",
                  {
                      "default": "0"
                  }
              ],
              "err_if_missing": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "err_if_empty": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "mask",
              "indexes",
              "err_if_missing",
              "err_if_empty"
          ]
      },
      "output": [
          "MASK"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MASK"
      ],
      "name": "VHS_SelectMasks",
      "display_name": "Select Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
      "output_node": false
  },
  "VHS_Unbatch": {
      "input": {
          "required": {
              "batched": [
                  "*"
              ]
          }
      },
      "input_order": {
          "required": [
              "batched"
          ]
      },
      "output": [
          "*"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "unbatched"
      ],
      "name": "VHS_Unbatch",
      "display_name": "Unbatch \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "description": "Unbatch \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Experimental node to unbatch a list of items into a single concatenated item</div></div><div style=\"font-size: 0.8em\">Useful for when you want a single video output from a complex workflow</div><div style=\"font-size: 0.8em\">Has no relation to the Meta Batch system of VHS</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"batched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">batched: Any input which may or may not be batched</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"unbatched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">unbatched: A single output element. Torch tensors are concatenated across dim 0, all other types are added which functions as concatenation for strings and arrays, but may give undesired results for other types</div></div></div></div></div>",
      "python_module": "custom_nodes.ComfyUI-VideoHelperSuite",
      "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
      "output_node": false,
      "experimental": true
  },
  "DownloadAndLoadFlorence2Model": {
      "input": {
          "required": {
              "model": [
                  [
                      "microsoft/Florence-2-base",
                      "microsoft/Florence-2-base-ft",
                      "microsoft/Florence-2-large",
                      "microsoft/Florence-2-large-ft",
                      "HuggingFaceM4/Florence-2-DocVQA",
                      "thwri/CogFlorence-2.1-Large",
                      "thwri/CogFlorence-2.2-Large",
                      "gokaygokay/Florence-2-SD3-Captioner",
                      "gokaygokay/Florence-2-Flux-Large",
                      "MiaoshouAI/Florence-2-base-PromptGen-v1.5",
                      "MiaoshouAI/Florence-2-large-PromptGen-v1.5",
                      "MiaoshouAI/Florence-2-base-PromptGen-v2.0",
                      "MiaoshouAI/Florence-2-large-PromptGen-v2.0"
                  ],
                  {
                      "default": "microsoft/Florence-2-base"
                  }
              ],
              "precision": [
                  [
                      "fp16",
                      "bf16",
                      "fp32"
                  ],
                  {
                      "default": "fp16"
                  }
              ],
              "attention": [
                  [
                      "flash_attention_2",
                      "sdpa",
                      "eager"
                  ],
                  {
                      "default": "sdpa"
                  }
              ]
          },
          "optional": {
              "lora": [
                  "PEFTLORA"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "precision",
              "attention"
          ],
          "optional": [
              "lora"
          ]
      },
      "output": [
          "FL2MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "florence2_model"
      ],
      "name": "DownloadAndLoadFlorence2Model",
      "display_name": "DownloadAndLoadFlorence2Model",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Florence2",
      "category": "Florence2",
      "output_node": false
  },
  "DownloadAndLoadFlorence2Lora": {
      "input": {
          "required": {
              "model": [
                  [
                      "NikshepShetty/Florence-2-pixelprose"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "model"
          ]
      },
      "output": [
          "PEFTLORA"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "lora"
      ],
      "name": "DownloadAndLoadFlorence2Lora",
      "display_name": "DownloadAndLoadFlorence2Lora",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Florence2",
      "category": "Florence2",
      "output_node": false
  },
  "Florence2ModelLoader": {
      "input": {
          "required": {
              "model": [
                  [
                      "Florence-2-base"
                  ],
                  {
                      "tooltip": "models are expected to be in Comfyui/models/LLM folder"
                  }
              ],
              "precision": [
                  [
                      "fp16",
                      "bf16",
                      "fp32"
                  ]
              ],
              "attention": [
                  [
                      "flash_attention_2",
                      "sdpa",
                      "eager"
                  ],
                  {
                      "default": "sdpa"
                  }
              ]
          },
          "optional": {
              "lora": [
                  "PEFTLORA"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "precision",
              "attention"
          ],
          "optional": [
              "lora"
          ]
      },
      "output": [
          "FL2MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "florence2_model"
      ],
      "name": "Florence2ModelLoader",
      "display_name": "Florence2ModelLoader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Florence2",
      "category": "Florence2",
      "output_node": false
  },
  "Florence2Run": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "florence2_model": [
                  "FL2MODEL"
              ],
              "text_input": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ],
              "task": [
                  [
                      "region_caption",
                      "dense_region_caption",
                      "region_proposal",
                      "caption",
                      "detailed_caption",
                      "more_detailed_caption",
                      "caption_to_phrase_grounding",
                      "referring_expression_segmentation",
                      "ocr",
                      "ocr_with_region",
                      "docvqa",
                      "prompt_gen_tags",
                      "prompt_gen_mixed_caption",
                      "prompt_gen_analyze",
                      "prompt_gen_mixed_caption_plus"
                  ]
              ],
              "fill_mask": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "keep_model_loaded": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "max_new_tokens": [
                  "INT",
                  {
                      "default": 1024,
                      "min": 1,
                      "max": 4096
                  }
              ],
              "num_beams": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 64
                  }
              ],
              "do_sample": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "output_mask_select": [
                  "STRING",
                  {
                      "default": ""
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "florence2_model",
              "text_input",
              "task",
              "fill_mask"
          ],
          "optional": [
              "keep_model_loaded",
              "max_new_tokens",
              "num_beams",
              "do_sample",
              "output_mask_select",
              "seed"
          ]
      },
      "output": [
          "IMAGE",
          "MASK",
          "STRING",
          "JSON"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "image",
          "mask",
          "caption",
          "data"
      ],
      "name": "Florence2Run",
      "display_name": "Florence2Run",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Florence2",
      "category": "Florence2",
      "output_node": false
  },
  "IPAdapter": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "weight_type": [
                  [
                      "standard",
                      "prompt is more important",
                      "style transfer"
                  ]
              ]
          },
          "optional": {
              "attn_mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "start_at",
              "end_at",
              "weight_type"
          ],
          "optional": [
              "attn_mask"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapter",
      "display_name": "IPAdapter",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterAdvanced": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterAdvanced",
      "display_name": "IPAdapter Advanced",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ],
              "encode_batch_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "embeds_scaling",
              "encode_batch_size"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterBatch",
      "display_name": "IPAdapter Batch (Adv.)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterFaceID": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_faceidv2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5.0,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "insightface": [
                  "INSIGHTFACE"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_faceidv2",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision",
              "insightface"
          ]
      },
      "output": [
          "MODEL",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "face_image"
      ],
      "name": "IPAdapterFaceID",
      "display_name": "IPAdapter FaceID",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/faceid",
      "output_node": false
  },
  "IPAdapterFaceIDKolors": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_faceidv2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5.0,
                      "step": 0.05
                  }
              ],
              "weight_kolors": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5.0,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "insightface": [
                  "INSIGHTFACE"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_faceidv2",
              "weight_kolors",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision",
              "insightface"
          ]
      },
      "output": [
          "MODEL",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "face_image"
      ],
      "name": "IPAdapterFaceIDKolors",
      "display_name": "IPAdapter FaceID Kolors",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/faceid",
      "output_node": false
  },
  "IPAAdapterFaceIDBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_faceidv2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5.0,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "insightface": [
                  "INSIGHTFACE"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_faceidv2",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision",
              "insightface"
          ]
      },
      "output": [
          "MODEL",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "face_image"
      ],
      "name": "IPAAdapterFaceIDBatch",
      "display_name": "IPAdapter FaceID Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/faceid",
      "output_node": false
  },
  "IPAdapterTiled": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "sharpening": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "sharpening",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL",
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "tiles",
          "masks"
      ],
      "name": "IPAdapterTiled",
      "display_name": "IPAdapter Tiled",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/tiled",
      "output_node": false
  },
  "IPAdapterTiledBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "sharpening": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ],
              "encode_batch_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "sharpening",
              "embeds_scaling",
              "encode_batch_size"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL",
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "tiles",
          "masks"
      ],
      "name": "IPAdapterTiledBatch",
      "display_name": "IPAdapter Tiled Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/tiled",
      "output_node": false
  },
  "IPAdapterEmbeds": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "pos_embed": [
                  "EMBEDS"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "neg_embed": [
                  "EMBEDS"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "pos_embed",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "neg_embed",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterEmbeds",
      "display_name": "IPAdapter Embeds",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": false
  },
  "IPAdapterEmbedsBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "pos_embed": [
                  "EMBEDS"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 3,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "neg_embed": [
                  "EMBEDS"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "pos_embed",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "neg_embed",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterEmbedsBatch",
      "display_name": "IPAdapter Embeds Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": false
  },
  "IPAdapterStyleComposition": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image_style": [
                  "IMAGE"
              ],
              "image_composition": [
                  "IMAGE"
              ],
              "weight_style": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_composition": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "expand_style": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ],
                  {
                      "default": "average"
                  }
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image_style",
              "image_composition",
              "weight_style",
              "weight_composition",
              "expand_style",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterStyleComposition",
      "display_name": "IPAdapter Style & Composition SDXL",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/style_composition",
      "output_node": false
  },
  "IPAdapterStyleCompositionBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image_style": [
                  "IMAGE"
              ],
              "image_composition": [
                  "IMAGE"
              ],
              "weight_style": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_composition": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "expand_style": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image_style",
              "image_composition",
              "weight_style",
              "weight_composition",
              "expand_style",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterStyleCompositionBatch",
      "display_name": "IPAdapter Style & Composition Batch SDXL",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/style_composition",
      "output_node": false
  },
  "IPAdapterMS": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_faceidv2": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5.0,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ],
              "layer_weights": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ],
              "insightface": [
                  "INSIGHTFACE"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_faceidv2",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling",
              "layer_weights"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision",
              "insightface"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterMS",
      "display_name": "IPAdapter Mad Scientist",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/dev",
      "output_node": false
  },
  "IPAdapterClipVisionEnhancer": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ],
              "enhance_tiles": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 16
                  }
              ],
              "enhance_ratio": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling",
              "enhance_tiles",
              "enhance_ratio"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterClipVisionEnhancer",
      "display_name": "IPAdapter ClipVision Enhancer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/dev",
      "output_node": false
  },
  "IPAdapterClipVisionEnhancerBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ],
              "enhance_tiles": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1,
                      "max": 16
                  }
              ],
              "enhance_ratio": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "encode_batch_size": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 4096
                  }
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "weight_type",
              "start_at",
              "end_at",
              "embeds_scaling",
              "enhance_tiles",
              "enhance_ratio",
              "encode_batch_size"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterClipVisionEnhancerBatch",
      "display_name": "IPAdapter ClipVision Enhancer Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/dev",
      "output_node": false
  },
  "IPAdapterFromParams": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "ipadapter_params": [
                  "IPADAPTER_PARAMS"
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "ipadapter_params",
              "combine_embeds",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterFromParams",
      "display_name": "IPAdapter from Params",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/params",
      "output_node": false
  },
  "IPAdapterPreciseStyleTransfer": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "style_boost": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -5,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "style_boost",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterPreciseStyleTransfer",
      "display_name": "IPAdapter Precise Style Transfer",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterPreciseStyleTransferBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "style_boost": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -5,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "style_boost",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterPreciseStyleTransferBatch",
      "display_name": "IPAdapter Precise Style Transfer Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterPreciseComposition": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "composition_boost": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -5,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "composition_boost",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterPreciseComposition",
      "display_name": "IPAdapter Precise Composition",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterPreciseCompositionBatch": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "composition_boost": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": -5,
                      "max": 5,
                      "step": 0.05
                  }
              ],
              "combine_embeds": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "embeds_scaling": [
                  [
                      "V only",
                      "K+V",
                      "K+V w/ C penalty",
                      "K+mean(V) w/ C penalty"
                  ]
              ]
          },
          "optional": {
              "image_negative": [
                  "IMAGE"
              ],
              "attn_mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "ipadapter",
              "image",
              "weight",
              "composition_boost",
              "combine_embeds",
              "start_at",
              "end_at",
              "embeds_scaling"
          ],
          "optional": [
              "image_negative",
              "attn_mask",
              "clip_vision"
          ]
      },
      "output": [
          "MODEL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "MODEL"
      ],
      "name": "IPAdapterPreciseCompositionBatch",
      "display_name": "IPAdapter Precise Composition Batch",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterUnifiedLoader": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "preset": [
                  [
                      "LIGHT - SD1.5 only (low strength)",
                      "STANDARD (medium strength)",
                      "VIT-G (medium strength)",
                      "PLUS (high strength)",
                      "PLUS FACE (portraits)",
                      "FULL FACE - SD1.5 only (portraits stronger)"
                  ]
              ]
          },
          "optional": {
              "ipadapter": [
                  "IPADAPTER"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "preset"
          ],
          "optional": [
              "ipadapter"
          ]
      },
      "output": [
          "MODEL",
          "IPADAPTER"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "model",
          "ipadapter"
      ],
      "name": "IPAdapterUnifiedLoader",
      "display_name": "IPAdapter Unified Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter",
      "output_node": false
  },
  "IPAdapterUnifiedLoaderFaceID": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "preset": [
                  [
                      "FACEID",
                      "FACEID PLUS - SD1.5 only",
                      "FACEID PLUS V2",
                      "FACEID PORTRAIT (style transfer)",
                      "FACEID PORTRAIT UNNORM - SDXL only (strong)"
                  ]
              ],
              "lora_strength": [
                  "FLOAT",
                  {
                      "default": 0.6,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "provider": [
                  [
                      "CPU",
                      "CUDA",
                      "ROCM",
                      "DirectML",
                      "OpenVINO",
                      "CoreML"
                  ]
              ]
          },
          "optional": {
              "ipadapter": [
                  "IPADAPTER"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "preset",
              "lora_strength",
              "provider"
          ],
          "optional": [
              "ipadapter"
          ]
      },
      "output": [
          "MODEL",
          "IPADAPTER"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "ipadapter"
      ],
      "name": "IPAdapterUnifiedLoaderFaceID",
      "display_name": "IPAdapter Unified Loader FaceID",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/faceid",
      "output_node": false
  },
  "IPAdapterModelLoader": {
      "input": {
          "required": {
              "ipadapter_file": [
                  [
                      "ip-adapter-full-face_sd15.safetensors",
                      "ip-adapter-plus-face_sd15.safetensors",
                      "ip-adapter-plus-face_sdxl_vit-h.safetensors",
                      "ip-adapter-plus_sd15.safetensors",
                      "ip-adapter-plus_sdxl_vit-h.safetensors",
                      "ip-adapter_sd15.safetensors",
                      "ip-adapter_sd15_light_v11.bin",
                      "ip-adapter_sd15_vit-G.safetensors",
                      "ip-adapter_sdxl.safetensors",
                      "ip-adapter_sdxl_vit-h.safetensors"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "ipadapter_file"
          ]
      },
      "output": [
          "IPADAPTER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IPADAPTER"
      ],
      "name": "IPAdapterModelLoader",
      "display_name": "IPAdapter Model Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/loaders",
      "output_node": false
  },
  "IPAdapterInsightFaceLoader": {
      "input": {
          "required": {
              "provider": [
                  [
                      "CPU",
                      "CUDA",
                      "ROCM"
                  ]
              ],
              "model_name": [
                  [
                      "buffalo_l",
                      "antelopev2"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "provider",
              "model_name"
          ]
      },
      "output": [
          "INSIGHTFACE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INSIGHTFACE"
      ],
      "name": "IPAdapterInsightFaceLoader",
      "display_name": "IPAdapter InsightFace Loader",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/loaders",
      "output_node": false
  },
  "IPAdapterUnifiedLoaderCommunity": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "preset": [
                  [
                      "Composition",
                      "Kolors"
                  ]
              ]
          },
          "optional": {
              "ipadapter": [
                  "IPADAPTER"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "preset"
          ],
          "optional": [
              "ipadapter"
          ]
      },
      "output": [
          "MODEL",
          "IPADAPTER"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "model",
          "ipadapter"
      ],
      "name": "IPAdapterUnifiedLoaderCommunity",
      "display_name": "IPAdapter Unified Loader Community",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/loaders",
      "output_node": false
  },
  "IPAdapterEncoder": {
      "input": {
          "required": {
              "ipadapter": [
                  "IPADAPTER"
              ],
              "image": [
                  "IMAGE"
              ],
              "weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1.0,
                      "max": 3.0,
                      "step": 0.01
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "clip_vision": [
                  "CLIP_VISION"
              ]
          }
      },
      "input_order": {
          "required": [
              "ipadapter",
              "image",
              "weight"
          ],
          "optional": [
              "mask",
              "clip_vision"
          ]
      },
      "output": [
          "EMBEDS",
          "EMBEDS"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "pos_embed",
          "neg_embed"
      ],
      "name": "IPAdapterEncoder",
      "display_name": "IPAdapter Encoder",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": false
  },
  "IPAdapterCombineEmbeds": {
      "input": {
          "required": {
              "embed1": [
                  "EMBEDS"
              ],
              "method": [
                  [
                      "concat",
                      "add",
                      "subtract",
                      "average",
                      "norm average",
                      "max",
                      "min"
                  ]
              ]
          },
          "optional": {
              "embed2": [
                  "EMBEDS"
              ],
              "embed3": [
                  "EMBEDS"
              ],
              "embed4": [
                  "EMBEDS"
              ],
              "embed5": [
                  "EMBEDS"
              ]
          }
      },
      "input_order": {
          "required": [
              "embed1",
              "method"
          ],
          "optional": [
              "embed2",
              "embed3",
              "embed4",
              "embed5"
          ]
      },
      "output": [
          "EMBEDS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "EMBEDS"
      ],
      "name": "IPAdapterCombineEmbeds",
      "display_name": "IPAdapter Combine Embeds",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": false
  },
  "IPAdapterNoise": {
      "input": {
          "required": {
              "type": [
                  [
                      "fade",
                      "dissolve",
                      "gaussian",
                      "shuffle"
                  ]
              ],
              "strength": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ],
              "blur": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 32,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "image_optional": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "type",
              "strength",
              "blur"
          ],
          "optional": [
              "image_optional"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "IPAdapterNoise",
      "display_name": "IPAdapter Noise",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/utils",
      "output_node": false
  },
  "PrepImageForClipVision": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "interpolation": [
                  [
                      "LANCZOS",
                      "BICUBIC",
                      "HAMMING",
                      "BILINEAR",
                      "BOX",
                      "NEAREST"
                  ]
              ],
              "crop_position": [
                  [
                      "top",
                      "bottom",
                      "left",
                      "right",
                      "center",
                      "pad"
                  ]
              ],
              "sharpening": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0,
                      "max": 1,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "interpolation",
              "crop_position",
              "sharpening"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "PrepImageForClipVision",
      "display_name": "Prep Image For ClipVision",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/utils",
      "output_node": false
  },
  "IPAdapterSaveEmbeds": {
      "input": {
          "required": {
              "embeds": [
                  "EMBEDS"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "IP_embeds"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "embeds",
              "filename_prefix"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "IPAdapterSaveEmbeds",
      "display_name": "IPAdapter Save Embeds",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": true
  },
  "IPAdapterLoadEmbeds": {
      "input": {
          "required": {
              "embeds": [
                  []
              ]
          }
      },
      "input_order": {
          "required": [
              "embeds"
          ]
      },
      "output": [
          "EMBEDS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "EMBEDS"
      ],
      "name": "IPAdapterLoadEmbeds",
      "display_name": "IPAdapter Load Embeds",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/embeds",
      "output_node": false
  },
  "IPAdapterWeights": {
      "input": {
          "required": {
              "weights": [
                  "STRING",
                  {
                      "default": "1.0, 0.0",
                      "multiline": true
                  }
              ],
              "timing": [
                  [
                      "custom",
                      "linear",
                      "ease_in_out",
                      "ease_in",
                      "ease_out",
                      "random"
                  ],
                  {
                      "default": "linear"
                  }
              ],
              "frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "start_frame": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "end_frame": [
                  "INT",
                  {
                      "default": 9999,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "add_starting_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "add_ending_frames": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 9999,
                      "step": 1
                  }
              ],
              "method": [
                  [
                      "full batch",
                      "shift batches",
                      "alternate batches"
                  ],
                  {
                      "default": "full batch"
                  }
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "weights",
              "timing",
              "frames",
              "start_frame",
              "end_frame",
              "add_starting_frames",
              "add_ending_frames",
              "method"
          ],
          "optional": [
              "image"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "INT",
          "IMAGE",
          "IMAGE",
          "WEIGHTS_STRATEGY"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "weights",
          "weights_invert",
          "total_frames",
          "image_1",
          "image_2",
          "weights_strategy"
      ],
      "name": "IPAdapterWeights",
      "display_name": "IPAdapter Weights",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/weights",
      "output_node": false
  },
  "IPAdapterCombineWeights": {
      "input": {
          "required": {
              "weights_1": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ],
              "weights_2": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.05
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weights_1",
              "weights_2"
          ]
      },
      "output": [
          "FLOAT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "weights",
          "count"
      ],
      "name": "IPAdapterCombineWeights",
      "display_name": "IPAdapter Combine Weights",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/utils",
      "output_node": false
  },
  "IPAdapterWeightsFromStrategy": {
      "input": {
          "required": {
              "weights_strategy": [
                  "WEIGHTS_STRATEGY"
              ]
          },
          "optional": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "weights_strategy"
          ],
          "optional": [
              "image"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "INT",
          "IMAGE",
          "IMAGE",
          "WEIGHTS_STRATEGY"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "weights",
          "weights_invert",
          "total_frames",
          "image_1",
          "image_2",
          "weights_strategy"
      ],
      "name": "IPAdapterWeightsFromStrategy",
      "display_name": "IPAdapter Weights From Strategy",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/weights",
      "output_node": false
  },
  "IPAdapterPromptScheduleFromWeightsStrategy": {
      "input": {
          "required": {
              "weights_strategy": [
                  "WEIGHTS_STRATEGY"
              ],
              "prompt": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "weights_strategy",
              "prompt"
          ]
      },
      "output": [
          "STRING"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "prompt_schedule"
      ],
      "name": "IPAdapterPromptScheduleFromWeightsStrategy",
      "display_name": "Prompt Schedule From Weights Strategy",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/weights",
      "output_node": false
  },
  "IPAdapterRegionalConditioning": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "image_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": -1.0,
                      "max": 3.0,
                      "step": 0.05
                  }
              ],
              "prompt_weight": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.05
                  }
              ],
              "weight_type": [
                  [
                      "linear",
                      "ease in",
                      "ease out",
                      "ease in-out",
                      "reverse in-out",
                      "weak input",
                      "weak output",
                      "weak middle",
                      "strong middle",
                      "style transfer",
                      "composition",
                      "strong style transfer",
                      "style and composition",
                      "style transfer precise",
                      "composition precise"
                  ]
              ],
              "start_at": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ],
              "end_at": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.001
                  }
              ]
          },
          "optional": {
              "mask": [
                  "MASK"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "image_weight",
              "prompt_weight",
              "weight_type",
              "start_at",
              "end_at"
          ],
          "optional": [
              "mask",
              "positive",
              "negative"
          ]
      },
      "output": [
          "IPADAPTER_PARAMS",
          "CONDITIONING",
          "CONDITIONING"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "IPADAPTER_PARAMS",
          "POSITIVE",
          "NEGATIVE"
      ],
      "name": "IPAdapterRegionalConditioning",
      "display_name": "IPAdapter Regional Conditioning",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/params",
      "output_node": false
  },
  "IPAdapterCombineParams": {
      "input": {
          "required": {
              "params_1": [
                  "IPADAPTER_PARAMS"
              ],
              "params_2": [
                  "IPADAPTER_PARAMS"
              ]
          },
          "optional": {
              "params_3": [
                  "IPADAPTER_PARAMS"
              ],
              "params_4": [
                  "IPADAPTER_PARAMS"
              ],
              "params_5": [
                  "IPADAPTER_PARAMS"
              ]
          }
      },
      "input_order": {
          "required": [
              "params_1",
              "params_2"
          ],
          "optional": [
              "params_3",
              "params_4",
              "params_5"
          ]
      },
      "output": [
          "IPADAPTER_PARAMS"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IPADAPTER_PARAMS"
      ],
      "name": "IPAdapterCombineParams",
      "display_name": "IPAdapter Combine Params",
      "description": "",
      "python_module": "custom_nodes.ComfyUI_IPAdapter_plus",
      "category": "ipadapter/params",
      "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "environment": [
                  [
                      "indoor",
                      "urban",
                      "natrual"
                  ],
                  {
                      "default": "indoor"
                  }
              ],
              "patch_batch_size": [
                  "INT",
                  {
                      "default": 4,
                      "min": 1,
                      "max": 16,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "environment",
              "patch_batch_size",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DiffusionEdge_Preprocessor",
      "display_name": "Diffusion Edge (batch size \u2191 => speed \u2191, VRAM \u2191)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
      "input": {
          "required": {
              "pose_kps": [
                  "POSE_KEYPOINT"
              ],
              "filename_prefix": [
                  "STRING",
                  {
                      "default": "PoseKeypoint"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pose_kps",
              "filename_prefix"
          ]
      },
      "output": [],
      "output_is_list": [],
      "output_name": [],
      "name": "SavePoseKpsAsJsonFile",
      "display_name": "Save Pose Keypoints",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
      "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
      "input": {
          "required": {
              "pose_kps": [
                  "POSE_KEYPOINT"
              ],
              "mode": [
                  [
                      "point",
                      "polygon"
                  ],
                  {
                      "default": "polygon"
                  }
              ],
              "skin": [
                  "STRING",
                  {
                      "default": "rgb(0, 153, 255)",
                      "multiline": false
                  }
              ],
              "left_eye": [
                  "STRING",
                  {
                      "default": "rgb(0, 204, 153)",
                      "multiline": false
                  }
              ],
              "right_eye": [
                  "STRING",
                  {
                      "default": "rgb(255, 153, 0)",
                      "multiline": false
                  }
              ],
              "nose": [
                  "STRING",
                  {
                      "default": "rgb(255, 102, 255)",
                      "multiline": false
                  }
              ],
              "upper_lip": [
                  "STRING",
                  {
                      "default": "rgb(102, 0, 51)",
                      "multiline": false
                  }
              ],
              "inner_mouth": [
                  "STRING",
                  {
                      "default": "rgb(255, 204, 255)",
                      "multiline": false
                  }
              ],
              "lower_lip": [
                  "STRING",
                  {
                      "default": "rgb(255, 0, 102)",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pose_kps",
              "mode",
              "skin",
              "left_eye",
              "right_eye",
              "nose",
              "upper_lip",
              "inner_mouth",
              "lower_lip"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "FacialPartColoringFromPoseKps",
      "display_name": "Colorize Facial Parts from PoseKPS",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
      "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
      "input": {
          "required": {
              "pose_kps": [
                  "POSE_KEYPOINT"
              ],
              "id_include": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "Head_width_height": [
                  "STRING",
                  {
                      "default": "256, 256",
                      "multiline": false
                  }
              ],
              "Neck_width_height": [
                  "STRING",
                  {
                      "default": "100, 100",
                      "multiline": false
                  }
              ],
              "Shoulder_width_height": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ],
              "Torso_width_height": [
                  "STRING",
                  {
                      "default": "350, 450",
                      "multiline": false
                  }
              ],
              "RArm_width_height": [
                  "STRING",
                  {
                      "default": "128, 256",
                      "multiline": false
                  }
              ],
              "RForearm_width_height": [
                  "STRING",
                  {
                      "default": "128, 256",
                      "multiline": false
                  }
              ],
              "LArm_width_height": [
                  "STRING",
                  {
                      "default": "128, 256",
                      "multiline": false
                  }
              ],
              "LForearm_width_height": [
                  "STRING",
                  {
                      "default": "128, 256",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "pose_kps",
              "id_include",
              "Head_width_height",
              "Neck_width_height",
              "Shoulder_width_height",
              "Torso_width_height",
              "RArm_width_height",
              "RForearm_width_height",
              "LArm_width_height",
              "LForearm_width_height"
          ]
      },
      "output": [
          "TRACKING",
          "STRING"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "tracking",
          "prompt"
      ],
      "name": "UpperBodyTrackingFromPoseKps",
      "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
      "output_node": false
  },
  "RenderPeopleKps": {
      "input": {
          "required": {
              "kps": [
                  "POSE_KEYPOINT"
              ],
              "render_body": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "render_hand": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "render_face": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "kps",
              "render_body",
              "render_hand",
              "render_face"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RenderPeopleKps",
      "display_name": "Render Pose JSON (Human)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
      "output_node": false
  },
  "RenderAnimalKps": {
      "input": {
          "required": {
              "kps": [
                  "POSE_KEYPOINT"
              ]
          }
      },
      "input_order": {
          "required": [
              "kps"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RenderAnimalKps",
      "display_name": "Render Pose JSON (Animal)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
      "output_node": false
  },
  "ScribblePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ScribblePreprocessor",
      "display_name": "Scribble Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "threshold": [
                  "INT",
                  {
                      "default": 32,
                      "min": 1,
                      "max": 64,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Scribble_XDoG_Preprocessor",
      "display_name": "Scribble XDoG Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "safe": [
                  [
                      "enable",
                      "disable"
                  ]
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "safe",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Scribble_PiDiNet_Preprocessor",
      "display_name": "Scribble PiDiNet Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "fov": [
                  "FLOAT",
                  {
                      "default": 60.0,
                      "min": 0,
                      "max": 365.0,
                      "step": 0.01
                  }
              ],
              "iterations": [
                  "INT",
                  {
                      "default": 5,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "fov",
              "iterations",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DSINE-NormalMapPreprocessor",
      "display_name": "DSINE Normal Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "max_faces": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 50,
                      "step": 1
                  }
              ],
              "min_confidence": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.1,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "max_faces",
              "min_confidence",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MediaPipe-FaceMeshPreprocessor",
      "display_name": "MediaPipe Face Mesh",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Faces and Poses Estimators",
      "output_node": false
  },
  "LineartStandardPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "guassian_sigma": [
                  "FLOAT",
                  {
                      "default": 6.0,
                      "min": 0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "intensity_threshold": [
                  "INT",
                  {
                      "default": 8,
                      "min": 0,
                      "max": 16,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "guassian_sigma",
              "intensity_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "LineartStandardPreprocessor",
      "display_name": "Standard Lineart",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "AnimeLineArtPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "AnimeLineArtPreprocessor",
      "display_name": "Anime Lineart",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "TilePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "pyrUp_iters": [
                  "INT",
                  {
                      "default": 3,
                      "min": 1,
                      "max": 10,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "pyrUp_iters",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TilePreprocessor",
      "display_name": "Tile",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/tile",
      "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 1.0,
                      "max": 8.0,
                      "step": 0.01
                  }
              ],
              "blur_strength": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 1.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "radius": [
                  "INT",
                  {
                      "default": 7,
                      "min": 1,
                      "max": 20,
                      "step": 1
                  }
              ],
              "eps": [
                  "FLOAT",
                  {
                      "default": 0.01,
                      "min": 0.001,
                      "max": 0.1,
                      "step": 0.001
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "scale_factor",
              "blur_strength",
              "radius",
              "eps",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TTPlanet_TileGF_Preprocessor",
      "display_name": "TTPlanet Tile GuidedFilter",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/tile",
      "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 1.0,
                      "max": 8.0,
                      "step": 0.01
                  }
              ],
              "blur_strength": [
                  "FLOAT",
                  {
                      "default": 2.0,
                      "min": 1.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "scale_factor",
              "blur_strength"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TTPlanet_TileSimple_Preprocessor",
      "display_name": "TTPlanet Tile Simple",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/tile",
      "output_node": false
  },
  "HEDPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "safe": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "safe",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "HEDPreprocessor",
      "display_name": "HED Soft-Edge Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "FakeScribblePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "safe": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "safe",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "FakeScribblePreprocessor",
      "display_name": "Fake Scribble Lines (aka scribble_hed)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "ImageLuminanceDetector": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "gamma_correction": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 2.0,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "gamma_correction",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageLuminanceDetector",
      "display_name": "Image Luminance",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Recolor",
      "output_node": false
  },
  "ImageIntensityDetector": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "gamma_correction": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 2.0,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "gamma_correction",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ImageIntensityDetector",
      "display_name": "Image Intensity",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Recolor",
      "output_node": false
  },
  "DepthAnythingPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "ckpt_name": [
                  [
                      "depth_anything_vitl14.pth",
                      "depth_anything_vitb14.pth",
                      "depth_anything_vits14.pth"
                  ],
                  {
                      "default": "depth_anything_vitl14.pth"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "ckpt_name",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DepthAnythingPreprocessor",
      "display_name": "Depth Anything",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "environment": [
                  [
                      "indoor",
                      "outdoor"
                  ],
                  {
                      "default": "indoor"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "environment",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Zoe_DepthAnythingPreprocessor",
      "display_name": "Zoe Depth Anything",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "ColorPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ColorPreprocessor",
      "display_name": "Color Pallete",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/T2IAdapter-only",
      "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "UniFormer-SemSegPreprocessor",
      "display_name": "UniFormer Segmentor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Semantic Segmentation",
      "output_node": false
  },
  "SemSegPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SemSegPreprocessor",
      "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Semantic Segmentation",
      "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BAE-NormalMapPreprocessor",
      "display_name": "BAE Normal Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "a": [
                  "FLOAT",
                  {
                      "default": 6.283185307179586,
                      "min": 0.0,
                      "max": 15.707963267948966,
                      "step": 0.01
                  }
              ],
              "bg_threshold": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "a",
              "bg_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MiDaS-NormalMapPreprocessor",
      "display_name": "MiDaS Normal Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "a": [
                  "FLOAT",
                  {
                      "default": 6.283185307179586,
                      "min": 0.0,
                      "max": 15.707963267948966,
                      "step": 0.01
                  }
              ],
              "bg_threshold": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "a",
              "bg_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "MiDaS-DepthMapPreprocessor",
      "display_name": "MiDaS Depth Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "ckpt_name": [
                  [
                      "gmflow-scale1-mixdata.pth",
                      "gmflow-scale2-mixdata.pth",
                      "gmflow-scale2-regrefine6-mixdata.pth"
                  ],
                  {
                      "default": "gmflow-scale2-regrefine6-mixdata.pth"
                  }
              ],
              "backward_flow": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "bidirectional_flow": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "ckpt_name",
              "backward_flow",
              "bidirectional_flow"
          ]
      },
      "output": [
          "OPTICAL_FLOW",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "OPTICAL_FLOW",
          "PREVIEW_IMAGE"
      ],
      "name": "Unimatch_OptFlowPreprocessor",
      "display_name": "Unimatch Optical Flow",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Optical Flow",
      "output_node": false
  },
  "MaskOptFlow": {
      "input": {
          "required": {
              "optical_flow": [
                  "OPTICAL_FLOW"
              ],
              "mask": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "optical_flow",
              "mask"
          ]
      },
      "output": [
          "OPTICAL_FLOW",
          "IMAGE"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "OPTICAL_FLOW",
          "PREVIEW_IMAGE"
      ],
      "name": "MaskOptFlow",
      "display_name": "Mask Optical Flow (DragNUWA)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Optical Flow",
      "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "backbone": [
                  [
                      "vit-small",
                      "vit-large",
                      "vit-giant2"
                  ],
                  {
                      "default": "vit-small"
                  }
              ],
              "fx": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "fy": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "backbone",
              "fx",
              "fy",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Metric3D-DepthMapPreprocessor",
      "display_name": "Metric3D Depth Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "backbone": [
                  [
                      "vit-small",
                      "vit-large",
                      "vit-giant2"
                  ],
                  {
                      "default": "vit-small"
                  }
              ],
              "fx": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "fy": [
                  "INT",
                  {
                      "default": 1000,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "backbone",
              "fx",
              "fy",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Metric3D-NormalMapPreprocessor",
      "display_name": "Metric3D Normal Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "OpenposePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "detect_hand": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "detect_body": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "detect_face": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "scale_stick_for_xinsr_cn": [
                  [
                      "disable",
                      "enable"
                  ],
                  {
                      "default": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "detect_hand",
              "detect_body",
              "detect_face",
              "resolution",
              "scale_stick_for_xinsr_cn"
          ]
      },
      "output": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "name": "OpenposePreprocessor",
      "display_name": "OpenPose Pose",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Faces and Poses Estimators",
      "output_node": false
  },
  "PyraCannyPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "low_threshold": [
                  "INT",
                  {
                      "default": 64,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "high_threshold": [
                  "INT",
                  {
                      "default": 128,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "low_threshold",
              "high_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "PyraCannyPreprocessor",
      "display_name": "PyraCanny",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "LineArtPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "coarse": [
                  [
                      "disable",
                      "enable"
                  ],
                  {
                      "default": "disable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "coarse",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "LineArtPreprocessor",
      "display_name": "Realistic Lineart",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "M-LSDPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "score_threshold": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.01,
                      "max": 2.0,
                      "step": 0.01
                  }
              ],
              "dist_threshold": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.01,
                      "max": 20.0,
                      "step": 0.01
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "score_threshold",
              "dist_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "M-LSDPreprocessor",
      "display_name": "M-LSD Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "remove_background_using_abg": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 512,
                      "max": 512,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "remove_background_using_abg",
              "resolution"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "ABG_CHARACTER_MASK (MASK)"
      ],
      "name": "AnimeFace_SemSegPreprocessor",
      "display_name": "Anime Face Segmentor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Semantic Segmentation",
      "output_node": false
  },
  "InpaintPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "mask": [
                  "MASK"
              ]
          },
          "optional": {
              "black_pixel_for_xinsir_cn": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "mask"
          ],
          "optional": [
              "black_pixel_for_xinsir_cn"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "InpaintPreprocessor",
      "display_name": "Inpaint Preprocessor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/others",
      "output_node": false
  },
  "DensePosePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "model": [
                  [
                      "densepose_r50_fpn_dl.torchscript",
                      "densepose_r101_fpn_dl.torchscript"
                  ],
                  {
                      "default": "densepose_r50_fpn_dl.torchscript"
                  }
              ],
              "cmap": [
                  [
                      "Viridis (MagicAnimate)",
                      "Parula (CivitAI)"
                  ],
                  {
                      "default": "Viridis (MagicAnimate)"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "model",
              "cmap",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DensePosePreprocessor",
      "display_name": "DensePose Estimator",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Faces and Poses Estimators",
      "output_node": false
  },
  "CannyEdgePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "low_threshold": [
                  "INT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "high_threshold": [
                  "INT",
                  {
                      "default": 200,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "low_threshold",
              "high_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CannyEdgePreprocessor",
      "display_name": "Canny Edge",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "DWPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "detect_hand": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "detect_body": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "detect_face": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "bbox_detector": [
                  [
                      "yolox_l.torchscript.pt",
                      "yolox_l.onnx",
                      "yolo_nas_l_fp16.onnx",
                      "yolo_nas_m_fp16.onnx",
                      "yolo_nas_s_fp16.onnx"
                  ],
                  {
                      "default": "yolox_l.onnx"
                  }
              ],
              "pose_estimator": [
                  [
                      "dw-ll_ucoco_384_bs5.torchscript.pt",
                      "dw-ll_ucoco_384.onnx",
                      "dw-ll_ucoco.onnx"
                  ],
                  {
                      "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
                  }
              ],
              "scale_stick_for_xinsr_cn": [
                  [
                      "disable",
                      "enable"
                  ],
                  {
                      "default": "disable"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "detect_hand",
              "detect_body",
              "detect_face",
              "resolution",
              "bbox_detector",
              "pose_estimator",
              "scale_stick_for_xinsr_cn"
          ]
      },
      "output": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "name": "DWPreprocessor",
      "display_name": "DWPose Estimator",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Faces and Poses Estimators",
      "output_node": false
  },
  "AnimalPosePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "bbox_detector": [
                  [
                      "yolox_l.torchscript.pt",
                      "yolox_l.onnx",
                      "yolo_nas_l_fp16.onnx",
                      "yolo_nas_m_fp16.onnx",
                      "yolo_nas_s_fp16.onnx"
                  ],
                  {
                      "default": "yolox_l.torchscript.pt"
                  }
              ],
              "pose_estimator": [
                  [
                      "rtmpose-m_ap10k_256_bs5.torchscript.pt",
                      "rtmpose-m_ap10k_256.onnx"
                  ],
                  {
                      "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "bbox_detector",
              "pose_estimator",
              "resolution"
          ]
      },
      "output": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "POSE_KEYPOINT"
      ],
      "name": "AnimalPosePreprocessor",
      "display_name": "AnimalPose Estimator (AP10K)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Faces and Poses Estimators",
      "output_node": false
  },
  "PiDiNetPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "safe": [
                  [
                      "enable",
                      "disable"
                  ],
                  {
                      "default": "enable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "safe",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "PiDiNetPreprocessor",
      "display_name": "PiDiNet Soft-Edge Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "Zoe-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Zoe-DepthMapPreprocessor",
      "display_name": "Zoe Depth Map",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "BinaryPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "bin_threshold": [
                  "INT",
                  {
                      "default": 100,
                      "min": 0,
                      "max": 255,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "bin_threshold",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "BinaryPreprocessor",
      "display_name": "Binary Lines",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "merge_with_lineart": [
                  [
                      "lineart_standard",
                      "lineart_realisitic",
                      "lineart_anime",
                      "manga_line"
                  ],
                  {
                      "default": "lineart_standard"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 1280,
                      "min": 64,
                      "max": 16384,
                      "step": 8
                  }
              ],
              "lineart_lower_bound": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "lineart_upper_bound": [
                  "FLOAT",
                  {
                      "default": 1,
                      "min": 0,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "object_min_size": [
                  "INT",
                  {
                      "default": 36,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "object_connectivity": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "merge_with_lineart",
              "resolution",
              "lineart_lower_bound",
              "lineart_upper_bound",
              "object_min_size",
              "object_connectivity"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "image"
      ],
      "name": "AnyLineArtPreprocessor_aux",
      "display_name": "AnyLine Lineart",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Manga2Anime_LineArt_Preprocessor",
      "display_name": "Manga Lineart (aka lineart_anime_denoise)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "ckpt_name": [
                  [
                      "depth_anything_v2_vitg.pth",
                      "depth_anything_v2_vitl.pth",
                      "depth_anything_v2_vitb.pth",
                      "depth_anything_v2_vits.pth"
                  ],
                  {
                      "default": "depth_anything_v2_vitl.pth"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "ckpt_name",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "DepthAnythingV2Preprocessor",
      "display_name": "Depth Anything V2 - Relative",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "OneFormer-COCO-SemSegPreprocessor",
      "display_name": "OneFormer COCO Segmentor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Semantic Segmentation",
      "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "OneFormer-ADE20K-SemSegPreprocessor",
      "display_name": "OneFormer ADE20K Segmentor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Semantic Segmentation",
      "output_node": false
  },
  "ShufflePreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution",
              "seed"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ShufflePreprocessor",
      "display_name": "Content Shuffle",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/T2IAdapter-only",
      "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "mask_bbox_padding": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 100
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ],
              "mask_type": [
                  [
                      "based_on_depth",
                      "tight_bboxes",
                      "original"
                  ],
                  {
                      "default": "based_on_depth"
                  }
              ],
              "mask_expand": [
                  "INT",
                  {
                      "default": 5,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "rand_seed": [
                  "INT",
                  {
                      "default": 88,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ],
              "detect_thr": [
                  "FLOAT",
                  {
                      "default": 0.6,
                      "min": 0.1,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "presence_thr": [
                  "FLOAT",
                  {
                      "default": 0.6,
                      "min": 0.1,
                      "max": 1,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "mask_bbox_padding",
              "resolution",
              "mask_type",
              "mask_expand",
              "rand_seed",
              "detect_thr",
              "presence_thr"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "INPAINTING_MASK"
      ],
      "name": "MeshGraphormer-DepthMapPreprocessor",
      "display_name": "MeshGraphormer Hand Refiner",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "bbox_detector": [
                  "BBOX_DETECTOR"
              ]
          },
          "optional": {
              "bbox_threshold": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.1,
                      "max": 1,
                      "step": 0.01
                  }
              ],
              "bbox_dilation": [
                  "INT",
                  {
                      "default": 10,
                      "min": -512,
                      "max": 512,
                      "step": 1
                  }
              ],
              "bbox_crop_factor": [
                  "FLOAT",
                  {
                      "default": 3.0,
                      "min": 1.0,
                      "max": 10.0,
                      "step": 0.01
                  }
              ],
              "drop_size": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "mask_bbox_padding": [
                  "INT",
                  {
                      "default": 30,
                      "min": 0,
                      "max": 100,
                      "step": 1
                  }
              ],
              "mask_type": [
                  [
                      "based_on_depth",
                      "tight_bboxes",
                      "original"
                  ],
                  {
                      "default": "based_on_depth"
                  }
              ],
              "mask_expand": [
                  "INT",
                  {
                      "default": 5,
                      "min": -16384,
                      "max": 16384,
                      "step": 1
                  }
              ],
              "rand_seed": [
                  "INT",
                  {
                      "default": 88,
                      "min": 0,
                      "max": 18446744073709551615,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "bbox_detector"
          ],
          "optional": [
              "bbox_threshold",
              "bbox_dilation",
              "bbox_crop_factor",
              "drop_size",
              "mask_bbox_padding",
              "mask_type",
              "mask_expand",
              "rand_seed",
              "resolution"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "INPAINTING_MASK"
      ],
      "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
      "display_name": "MeshGraphormer Hand Refiner With External Detector",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "rm_nearest": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "rm_background": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 100.0,
                      "step": 0.01
                  }
              ],
              "boost": [
                  [
                      "disable",
                      "enable"
                  ],
                  {
                      "default": "disable"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "rm_nearest",
              "rm_background",
              "boost",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "LeReS-DepthMapPreprocessor",
      "display_name": "LeReS Depth Map (enable boost for leres++)",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Normal and Depth Estimators",
      "output_node": false
  },
  "TEEDPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "safe_steps": [
                  "INT",
                  {
                      "default": 2,
                      "min": 0,
                      "max": 10,
                      "step": 1
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "safe_steps",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "TEEDPreprocessor",
      "display_name": "TEEDPreprocessor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/Line Extractors",
      "output_node": false
  },
  "SAMPreprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "SAMPreprocessor",
      "display_name": "SAM Segmentor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors/others",
      "output_node": false
  },
  "AIO_Preprocessor": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "preprocessor": [
                  [
                      "none",
                      "ScribblePreprocessor",
                      "Scribble_XDoG_Preprocessor",
                      "Scribble_PiDiNet_Preprocessor",
                      "DSINE-NormalMapPreprocessor",
                      "MediaPipe-FaceMeshPreprocessor",
                      "LineartStandardPreprocessor",
                      "AnimeLineArtPreprocessor",
                      "TilePreprocessor",
                      "TTPlanet_TileGF_Preprocessor",
                      "TTPlanet_TileSimple_Preprocessor",
                      "HEDPreprocessor",
                      "FakeScribblePreprocessor",
                      "ImageLuminanceDetector",
                      "ImageIntensityDetector",
                      "DepthAnythingPreprocessor",
                      "Zoe_DepthAnythingPreprocessor",
                      "ColorPreprocessor",
                      "UniFormer-SemSegPreprocessor",
                      "SemSegPreprocessor",
                      "BAE-NormalMapPreprocessor",
                      "MiDaS-NormalMapPreprocessor",
                      "MiDaS-DepthMapPreprocessor",
                      "Metric3D-DepthMapPreprocessor",
                      "Metric3D-NormalMapPreprocessor",
                      "OpenposePreprocessor",
                      "PyraCannyPreprocessor",
                      "LineArtPreprocessor",
                      "M-LSDPreprocessor",
                      "AnimeFace_SemSegPreprocessor",
                      "DensePosePreprocessor",
                      "CannyEdgePreprocessor",
                      "DWPreprocessor",
                      "AnimalPosePreprocessor",
                      "PiDiNetPreprocessor",
                      "Zoe-DepthMapPreprocessor",
                      "BinaryPreprocessor",
                      "AnyLineArtPreprocessor_aux",
                      "Manga2Anime_LineArt_Preprocessor",
                      "DepthAnythingV2Preprocessor",
                      "OneFormer-COCO-SemSegPreprocessor",
                      "OneFormer-ADE20K-SemSegPreprocessor",
                      "ShufflePreprocessor",
                      "MeshGraphormer-DepthMapPreprocessor",
                      "LeReS-DepthMapPreprocessor",
                      "TEEDPreprocessor",
                      "SAMPreprocessor"
                  ],
                  {
                      "default": "none"
                  }
              ],
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "preprocessor",
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "AIO_Preprocessor",
      "display_name": "AIO Aux Preprocessor",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ControlNetPreprocessorSelector": {
      "input": {
          "required": {
              "preprocessor": [
                  [
                      "none",
                      "ScribblePreprocessor",
                      "Scribble_XDoG_Preprocessor",
                      "Scribble_PiDiNet_Preprocessor",
                      "DSINE-NormalMapPreprocessor",
                      "MediaPipe-FaceMeshPreprocessor",
                      "LineartStandardPreprocessor",
                      "AnimeLineArtPreprocessor",
                      "TilePreprocessor",
                      "TTPlanet_TileGF_Preprocessor",
                      "TTPlanet_TileSimple_Preprocessor",
                      "HEDPreprocessor",
                      "FakeScribblePreprocessor",
                      "ImageLuminanceDetector",
                      "ImageIntensityDetector",
                      "DepthAnythingPreprocessor",
                      "Zoe_DepthAnythingPreprocessor",
                      "ColorPreprocessor",
                      "UniFormer-SemSegPreprocessor",
                      "SemSegPreprocessor",
                      "BAE-NormalMapPreprocessor",
                      "MiDaS-NormalMapPreprocessor",
                      "MiDaS-DepthMapPreprocessor",
                      "Metric3D-DepthMapPreprocessor",
                      "Metric3D-NormalMapPreprocessor",
                      "OpenposePreprocessor",
                      "PyraCannyPreprocessor",
                      "LineArtPreprocessor",
                      "M-LSDPreprocessor",
                      "AnimeFace_SemSegPreprocessor",
                      "DensePosePreprocessor",
                      "CannyEdgePreprocessor",
                      "DWPreprocessor",
                      "AnimalPosePreprocessor",
                      "PiDiNetPreprocessor",
                      "Zoe-DepthMapPreprocessor",
                      "BinaryPreprocessor",
                      "AnyLineArtPreprocessor_aux",
                      "Manga2Anime_LineArt_Preprocessor",
                      "DepthAnythingV2Preprocessor",
                      "OneFormer-COCO-SemSegPreprocessor",
                      "OneFormer-ADE20K-SemSegPreprocessor",
                      "ShufflePreprocessor",
                      "MeshGraphormer-DepthMapPreprocessor",
                      "LeReS-DepthMapPreprocessor",
                      "TEEDPreprocessor",
                      "SAMPreprocessor"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "preprocessor"
          ]
      },
      "output": [
          [
              "none",
              "ScribblePreprocessor",
              "Scribble_XDoG_Preprocessor",
              "Scribble_PiDiNet_Preprocessor",
              "DSINE-NormalMapPreprocessor",
              "MediaPipe-FaceMeshPreprocessor",
              "LineartStandardPreprocessor",
              "AnimeLineArtPreprocessor",
              "TilePreprocessor",
              "TTPlanet_TileGF_Preprocessor",
              "TTPlanet_TileSimple_Preprocessor",
              "HEDPreprocessor",
              "FakeScribblePreprocessor",
              "ImageLuminanceDetector",
              "ImageIntensityDetector",
              "DepthAnythingPreprocessor",
              "Zoe_DepthAnythingPreprocessor",
              "ColorPreprocessor",
              "UniFormer-SemSegPreprocessor",
              "SemSegPreprocessor",
              "BAE-NormalMapPreprocessor",
              "MiDaS-NormalMapPreprocessor",
              "MiDaS-DepthMapPreprocessor",
              "Metric3D-DepthMapPreprocessor",
              "Metric3D-NormalMapPreprocessor",
              "OpenposePreprocessor",
              "PyraCannyPreprocessor",
              "LineArtPreprocessor",
              "M-LSDPreprocessor",
              "AnimeFace_SemSegPreprocessor",
              "DensePosePreprocessor",
              "CannyEdgePreprocessor",
              "DWPreprocessor",
              "AnimalPosePreprocessor",
              "PiDiNetPreprocessor",
              "Zoe-DepthMapPreprocessor",
              "BinaryPreprocessor",
              "AnyLineArtPreprocessor_aux",
              "Manga2Anime_LineArt_Preprocessor",
              "DepthAnythingV2Preprocessor",
              "OneFormer-COCO-SemSegPreprocessor",
              "OneFormer-ADE20K-SemSegPreprocessor",
              "ShufflePreprocessor",
              "MeshGraphormer-DepthMapPreprocessor",
              "LeReS-DepthMapPreprocessor",
              "TEEDPreprocessor",
              "SAMPreprocessor"
          ]
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "preprocessor"
      ],
      "name": "ControlNetPreprocessorSelector",
      "display_name": "Preprocessor Selector",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "PixelPerfectResolution": {
      "input": {
          "required": {
              "original_image": [
                  "IMAGE"
              ],
              "image_gen_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "image_gen_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "resize_mode": [
                  [
                      "Just Resize",
                      "Crop and Resize",
                      "Resize and Fill"
                  ],
                  {
                      "default": "Just Resize"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "original_image",
              "image_gen_width",
              "image_gen_height",
              "resize_mode"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "RESOLUTION (INT)"
      ],
      "name": "PixelPerfectResolution",
      "display_name": "Pixel Perfect Resolution",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ImageGenResolutionFromImage": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE_GEN_WIDTH (INT)",
          "IMAGE_GEN_HEIGHT (INT)"
      ],
      "name": "ImageGenResolutionFromImage",
      "display_name": "Generation Resolution From Image",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ImageGenResolutionFromLatent": {
      "input": {
          "required": {
              "latent": [
                  "LATENT"
              ]
          }
      },
      "input_order": {
          "required": [
              "latent"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE_GEN_WIDTH (INT)",
          "IMAGE_GEN_HEIGHT (INT)"
      ],
      "name": "ImageGenResolutionFromLatent",
      "display_name": "Generation Resolution From Latent",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "HintImageEnchance": {
      "input": {
          "required": {
              "hint_image": [
                  "IMAGE"
              ],
              "image_gen_width": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "image_gen_height": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "resize_mode": [
                  [
                      "Just Resize",
                      "Crop and Resize",
                      "Resize and Fill"
                  ],
                  {
                      "default": "Just Resize"
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "hint_image",
              "image_gen_width",
              "image_gen_height",
              "resize_mode"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "HintImageEnchance",
      "display_name": "Enchance And Resize Hint Images",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          },
          "optional": {
              "resolution": [
                  "INT",
                  {
                      "default": 512,
                      "min": 64,
                      "max": 16384,
                      "step": 64
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ],
          "optional": [
              "resolution"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ExecuteAllControlNetPreprocessors",
      "display_name": "Execute All ControlNet Preprocessors",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ],
              "text": [
                  "STRING",
                  {
                      "default": "",
                      "multiline": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "image",
              "text"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "ControlNetAuxSimpleAddText",
      "display_name": "ControlNetAuxSimpleAddText",
      "description": "",
      "python_module": "custom_nodes.comfyui_controlnet_aux",
      "category": "ControlNet Preprocessors",
      "output_node": false
  },
  "ImageResize": {
      "input": {
          "required": {
              "pixels": [
                  "IMAGE"
              ],
              "action": [
                  [
                      "resize only",
                      "crop to ratio",
                      "pad to ratio"
                  ]
              ],
              "smaller_side": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "larger_side": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 8192,
                      "step": 8
                  }
              ],
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 10.0,
                      "step": 0.1
                  }
              ],
              "resize_mode": [
                  [
                      "reduce size only",
                      "increase size only",
                      "any"
                  ]
              ],
              "side_ratio": [
                  "STRING",
                  {
                      "default": "4:3"
                  }
              ],
              "crop_pad_position": [
                  "FLOAT",
                  {
                      "default": 0.5,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "pad_feathering": [
                  "INT",
                  {
                      "default": 20,
                      "min": 0,
                      "max": 8192,
                      "step": 1
                  }
              ]
          },
          "optional": {
              "mask_optional": [
                  "MASK"
              ]
          }
      },
      "input_order": {
          "required": [
              "pixels",
              "action",
              "smaller_side",
              "larger_side",
              "scale_factor",
              "resize_mode",
              "side_ratio",
              "crop_pad_position",
              "pad_feathering"
          ],
          "optional": [
              "mask_optional"
          ]
      },
      "output": [
          "IMAGE",
          "MASK"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "IMAGE",
          "MASK"
      ],
      "name": "ImageResize",
      "display_name": "Image Resize",
      "description": "",
      "python_module": "custom_nodes.image-resize-comfyui",
      "category": "image",
      "output_node": false
  },
  "KSampler Gradually Adding More Denoise (efficient)": {
      "input": {
          "required": {
              "model": [
                  "MODEL"
              ],
              "positive": [
                  "CONDITIONING"
              ],
              "negative": [
                  "CONDITIONING"
              ],
              "latent_image": [
                  "LATENT"
              ],
              "seed": [
                  "INT",
                  {
                      "default": 0,
                      "min": 0,
                      "max": 18446744073709551615
                  }
              ],
              "steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ],
              "cfg": [
                  "FLOAT",
                  {
                      "default": 8.0,
                      "min": 0.0,
                      "max": 100.0
                  }
              ],
              "sampler_name": [
                  [
                      "euler",
                      "euler_cfg_pp",
                      "euler_ancestral",
                      "euler_ancestral_cfg_pp",
                      "heun",
                      "heunpp2",
                      "dpm_2",
                      "dpm_2_ancestral",
                      "lms",
                      "dpm_fast",
                      "dpm_adaptive",
                      "dpmpp_2s_ancestral",
                      "dpmpp_2s_ancestral_cfg_pp",
                      "dpmpp_sde",
                      "dpmpp_sde_gpu",
                      "dpmpp_2m",
                      "dpmpp_2m_cfg_pp",
                      "dpmpp_2m_sde",
                      "dpmpp_2m_sde_gpu",
                      "dpmpp_3m_sde",
                      "dpmpp_3m_sde_gpu",
                      "ddpm",
                      "lcm",
                      "ipndm",
                      "ipndm_v",
                      "deis",
                      "ddim",
                      "uni_pc",
                      "uni_pc_bh2"
                  ]
              ],
              "scheduler": [
                  [
                      "normal",
                      "karras",
                      "exponential",
                      "sgm_uniform",
                      "simple",
                      "ddim_uniform",
                      "beta",
                      "linear_quadratic"
                  ]
              ],
              "start_denoise": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.01
                  }
              ],
              "denoise_increment": [
                  "FLOAT",
                  {
                      "default": 0.1,
                      "min": 0.0,
                      "max": 1.0,
                      "step": 0.1
                  }
              ],
              "denoise_increment_steps": [
                  "INT",
                  {
                      "default": 20,
                      "min": 1,
                      "max": 10000
                  }
              ]
          },
          "optional": {
              "optional_vae": [
                  "VAE"
              ]
          }
      },
      "input_order": {
          "required": [
              "model",
              "positive",
              "negative",
              "latent_image",
              "seed",
              "steps",
              "cfg",
              "sampler_name",
              "scheduler",
              "start_denoise",
              "denoise_increment",
              "denoise_increment_steps"
          ],
          "optional": [
              "optional_vae"
          ]
      },
      "output": [
          "MODEL",
          "CONDITIONING",
          "CONDITIONING",
          "LATENT",
          "VAE"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "MODEL",
          "CONDITIONING+",
          "CONDITIONING-",
          "LATENT",
          "VAE"
      ],
      "name": "KSampler Gradually Adding More Denoise (efficient)",
      "display_name": "KSampler Gradually Adding More Denoise (efficient)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/others",
      "output_node": true
  },
  "GMFSS Fortuna VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "GMFSS_fortuna_union",
                      "GMFSS_fortuna"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "GMFSS Fortuna VFI",
      "display_name": "GMFSS Fortuna VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "IFRNet VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "IFRNet_S_Vimeo90K.pth",
                      "IFRNet_L_Vimeo90K.pth",
                      "IFRNet_S_GoPro.pth",
                      "IFRNet_L_GoPro.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ],
              "scale_factor": [
                  [
                      0.25,
                      0.5,
                      1.0,
                      2.0,
                      4.0
                  ],
                  {
                      "default": 1.0
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier",
              "scale_factor"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "IFRNet VFI",
      "display_name": "IFRNet VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "IFUnet VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "IFUNet.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ],
              "scale_factor": [
                  "FLOAT",
                  {
                      "default": 1.0,
                      "min": 0.1,
                      "max": 100,
                      "step": 0.1
                  }
              ],
              "ensemble": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier",
              "scale_factor",
              "ensemble"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "IFUnet VFI",
      "display_name": "IFUnet VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "M2M VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "M2M.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "M2M VFI",
      "display_name": "M2M VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "RIFE VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "rife40.pth",
                      "rife41.pth",
                      "sudo_rife4_269.662_testV1_scale1.pth",
                      "rife42.pth",
                      "rife43.pth",
                      "rife44.pth",
                      "rife45.pth",
                      "rife46.pth",
                      "rife47.pth",
                      "rife48.pth",
                      "rife49.pth"
                  ],
                  {
                      "default": "rife47.pth"
                  }
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 1
                  }
              ],
              "fast_mode": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "ensemble": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ],
              "scale_factor": [
                  [
                      0.25,
                      0.5,
                      1.0,
                      2.0,
                      4.0
                  ],
                  {
                      "default": 1.0
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier",
              "fast_mode",
              "ensemble",
              "scale_factor"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "RIFE VFI",
      "display_name": "RIFE VFI (recommend rife47 and rife49)",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "Sepconv VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "sepconv.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "Sepconv VFI",
      "display_name": "Sepconv VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "AMT VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "amt-s.pth",
                      "amt-l.pth",
                      "amt-g.pth",
                      "gopro_amt-s.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 1,
                      "min": 1,
                      "max": 100
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "AMT VFI",
      "display_name": "AMT VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "FILM VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "film_net_fp32.pt"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "FILM VFI",
      "display_name": "FILM VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "Make Interpolation State List": {
      "input": {
          "required": {
              "frame_indices": [
                  "STRING",
                  {
                      "multiline": true,
                      "default": "1,2,3"
                  }
              ],
              "is_skip_list": [
                  "BOOLEAN",
                  {
                      "default": true
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "frame_indices",
              "is_skip_list"
          ]
      },
      "output": [
          "INTERPOLATION_STATES"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INTERPOLATION_STATES"
      ],
      "name": "Make Interpolation State List",
      "display_name": "Make Interpolation State List",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "STMFNet VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "stmfnet.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 2
                  }
              ],
              "duplicate_first_last_frames": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier",
              "duplicate_first_last_frames"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "STMFNet VFI",
      "display_name": "STMFNet VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "FLAVR VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "FLAVR_2x.pth",
                      "FLAVR_4x.pth",
                      "FLAVR_8x.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 2
                  }
              ],
              "duplicate_first_last_frames": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier",
              "duplicate_first_last_frames"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "FLAVR VFI",
      "display_name": "FLAVR VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "CAIN VFI": {
      "input": {
          "required": {
              "ckpt_name": [
                  [
                      "pretrained_cain.pth"
                  ]
              ],
              "frames": [
                  "IMAGE"
              ],
              "clear_cache_after_n_frames": [
                  "INT",
                  {
                      "default": 10,
                      "min": 1,
                      "max": 1000
                  }
              ],
              "multiplier": [
                  "INT",
                  {
                      "default": 2,
                      "min": 2,
                      "max": 1000
                  }
              ]
          },
          "optional": {
              "optional_interpolation_states": [
                  "INTERPOLATION_STATES"
              ]
          }
      },
      "input_order": {
          "required": [
              "ckpt_name",
              "frames",
              "clear_cache_after_n_frames",
              "multiplier"
          ],
          "optional": [
              "optional_interpolation_states"
          ]
      },
      "output": [
          "IMAGE"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "IMAGE"
      ],
      "name": "CAIN VFI",
      "display_name": "CAIN VFI",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation/VFI",
      "output_node": false
  },
  "VFI FloatToInt": {
      "input": {
          "required": {
              "float": [
                  "FLOAT",
                  {
                      "default": 0,
                      "min": 0,
                      "step": 0.01
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "float"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "VFI FloatToInt",
      "display_name": "VFI FloatToInt",
      "description": "",
      "python_module": "custom_nodes.ComfyUI-Frame-Interpolation",
      "category": "ComfyUI-Frame-Interpolation",
      "output_node": false
  },
  "CM_BoolToInt": {
      "input": {
          "required": {
              "a": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "CM_BoolToInt",
      "display_name": "BoolToInt",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_IntToBool": {
      "input": {
          "required": {
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "CM_IntToBool",
      "display_name": "IntToBool",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_FloatToInt": {
      "input": {
          "required": {
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "CM_FloatToInt",
      "display_name": "FloatToInt",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_IntToFloat": {
      "input": {
          "required": {
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_IntToFloat",
      "display_name": "IntToFloat",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_IntToNumber": {
      "input": {
          "required": {
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "NUMBER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NUMBER"
      ],
      "name": "CM_IntToNumber",
      "display_name": "IntToNumber",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_NumberToInt": {
      "input": {
          "required": {
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "CM_NumberToInt",
      "display_name": "NumberToInt",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_FloatToNumber": {
      "input": {
          "required": {
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "NUMBER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NUMBER"
      ],
      "name": "CM_FloatToNumber",
      "display_name": "FloatToNumber",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_NumberToFloat": {
      "input": {
          "required": {
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_NumberToFloat",
      "display_name": "NumberToFloat",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_ComposeVec2": {
      "input": {
          "required": {
              "x": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "round": false
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y"
          ]
      },
      "output": [
          "VEC2"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC2"
      ],
      "name": "CM_ComposeVec2",
      "display_name": "ComposeVec2",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_ComposeVec3": {
      "input": {
          "required": {
              "x": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ],
              "z": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "z"
          ]
      },
      "output": [
          "VEC3"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC3"
      ],
      "name": "CM_ComposeVec3",
      "display_name": "ComposeVec3",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_ComposeVec4": {
      "input": {
          "required": {
              "x": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ],
              "y": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ],
              "z": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ],
              "w": [
                  "FLOAT",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "x",
              "y",
              "z",
              "w"
          ]
      },
      "output": [
          "VEC4"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC4"
      ],
      "name": "CM_ComposeVec4",
      "display_name": "ComposeVec4",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_BreakoutVec2": {
      "input": {
          "required": {
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "FLOAT"
      ],
      "name": "CM_BreakoutVec2",
      "display_name": "BreakoutVec2",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_BreakoutVec3": {
      "input": {
          "required": {
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "FLOAT",
          "FLOAT"
      ],
      "name": "CM_BreakoutVec3",
      "display_name": "BreakoutVec3",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_BreakoutVec4": {
      "input": {
          "required": {
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "a"
          ]
      },
      "output": [
          "FLOAT",
          "FLOAT",
          "FLOAT",
          "FLOAT"
      ],
      "output_is_list": [
          false,
          false,
          false,
          false
      ],
      "output_name": [
          "FLOAT",
          "FLOAT",
          "FLOAT",
          "FLOAT"
      ],
      "name": "CM_BreakoutVec4",
      "display_name": "BreakoutVec4",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/conversion",
      "output_node": false
  },
  "CM_BoolUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Not"
                  ]
              ],
              "a": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "CM_BoolUnaryOperation",
      "display_name": "BoolUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/bool",
      "output_node": false
  },
  "CM_BoolBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Nor",
                      "Xor",
                      "Nand",
                      "And",
                      "Xnor",
                      "Or",
                      "Eq",
                      "Neq"
                  ]
              ],
              "a": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ],
              "b": [
                  "BOOLEAN",
                  {
                      "default": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "CM_BoolBinaryOperation",
      "display_name": "BoolBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/bool",
      "output_node": false
  },
  "CM_IntUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Abs",
                      "Neg",
                      "Inc",
                      "Dec",
                      "Sqr",
                      "Cube",
                      "Not",
                      "Factorial"
                  ]
              ],
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "CM_IntUnaryOperation",
      "display_name": "IntUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/int",
      "output_node": false
  },
  "CM_IntUnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsNonZero",
                      "IsPositive",
                      "IsNegative",
                      "IsEven",
                      "IsOdd"
                  ]
              ],
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_IntUnaryCondition",
      "display_name": "IntUnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/int",
      "output_node": false
  },
  "CM_IntBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Mul",
                      "Div",
                      "Mod",
                      "Pow",
                      "And",
                      "Nand",
                      "Or",
                      "Nor",
                      "Xor",
                      "Xnor",
                      "Shl",
                      "Shr",
                      "Max",
                      "Min"
                  ]
              ],
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "b": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "INT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "INT"
      ],
      "name": "CM_IntBinaryOperation",
      "display_name": "IntBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/int",
      "output_node": false
  },
  "CM_IntBinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq",
                      "Gt",
                      "Lt",
                      "Geq",
                      "Leq"
                  ]
              ],
              "a": [
                  "INT",
                  {
                      "default": 0
                  }
              ],
              "b": [
                  "INT",
                  {
                      "default": 0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_IntBinaryCondition",
      "display_name": "IntBinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/int",
      "output_node": false
  },
  "CM_FloatUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Neg",
                      "Inc",
                      "Dec",
                      "Abs",
                      "Sqr",
                      "Cube",
                      "Sqrt",
                      "Exp",
                      "Ln",
                      "Log10",
                      "Log2",
                      "Sin",
                      "Cos",
                      "Tan",
                      "Asin",
                      "Acos",
                      "Atan",
                      "Sinh",
                      "Cosh",
                      "Tanh",
                      "Asinh",
                      "Acosh",
                      "Atanh",
                      "Round",
                      "Floor",
                      "Ceil",
                      "Trunc",
                      "Erf",
                      "Erfc",
                      "Gamma",
                      "Radians",
                      "Degrees"
                  ]
              ],
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_FloatUnaryOperation",
      "display_name": "FloatUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/float",
      "output_node": false
  },
  "CM_FloatUnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsPositive",
                      "IsNegative",
                      "IsNonZero",
                      "IsPositiveInfinity",
                      "IsNegativeInfinity",
                      "IsNaN",
                      "IsFinite",
                      "IsInfinite",
                      "IsEven",
                      "IsOdd"
                  ]
              ],
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "CM_FloatUnaryCondition",
      "display_name": "FloatUnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/float",
      "output_node": false
  },
  "CM_FloatBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Mul",
                      "Div",
                      "Mod",
                      "Pow",
                      "FloorDiv",
                      "Max",
                      "Min",
                      "Log",
                      "Atan2"
                  ]
              ],
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ],
              "b": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_FloatBinaryOperation",
      "display_name": "FloatBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/float",
      "output_node": false
  },
  "CM_FloatBinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq",
                      "Gt",
                      "Gte",
                      "Lt",
                      "Lte"
                  ]
              ],
              "a": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ],
              "b": [
                  "FLOAT",
                  {
                      "default": 0.0,
                      "step": 0.001,
                      "round": false
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOLEAN"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOLEAN"
      ],
      "name": "CM_FloatBinaryCondition",
      "display_name": "FloatBinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/float",
      "output_node": false
  },
  "CM_NumberUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Neg",
                      "Inc",
                      "Dec",
                      "Abs",
                      "Sqr",
                      "Cube",
                      "Sqrt",
                      "Exp",
                      "Ln",
                      "Log10",
                      "Log2",
                      "Sin",
                      "Cos",
                      "Tan",
                      "Asin",
                      "Acos",
                      "Atan",
                      "Sinh",
                      "Cosh",
                      "Tanh",
                      "Asinh",
                      "Acosh",
                      "Atanh",
                      "Round",
                      "Floor",
                      "Ceil",
                      "Trunc",
                      "Erf",
                      "Erfc",
                      "Gamma",
                      "Radians",
                      "Degrees"
                  ]
              ],
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "NUMBER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NUMBER"
      ],
      "name": "CM_NumberUnaryOperation",
      "display_name": "NumberUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/number",
      "output_node": false
  },
  "CM_NumberUnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsPositive",
                      "IsNegative",
                      "IsNonZero",
                      "IsPositiveInfinity",
                      "IsNegativeInfinity",
                      "IsNaN",
                      "IsFinite",
                      "IsInfinite",
                      "IsEven",
                      "IsOdd"
                  ]
              ],
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_NumberUnaryCondition",
      "display_name": "NumberUnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/Number",
      "output_node": false
  },
  "CM_NumberBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Mul",
                      "Div",
                      "Mod",
                      "Pow",
                      "FloorDiv",
                      "Max",
                      "Min",
                      "Log",
                      "Atan2"
                  ]
              ],
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ],
              "b": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "NUMBER"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "NUMBER"
      ],
      "name": "CM_NumberBinaryOperation",
      "display_name": "NumberBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/number",
      "output_node": false
  },
  "CM_NumberBinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq",
                      "Gt",
                      "Gte",
                      "Lt",
                      "Lte"
                  ]
              ],
              "a": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ],
              "b": [
                  "NUMBER",
                  {
                      "default": 0.0
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_NumberBinaryCondition",
      "display_name": "NumberBinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/float",
      "output_node": false
  },
  "CM_Vec2UnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Neg",
                      "Normalize"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "VEC2"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC2"
      ],
      "name": "CM_Vec2UnaryOperation",
      "display_name": "Vec2UnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2UnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsNotZero",
                      "IsNormalized",
                      "IsNotNormalized"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec2UnaryCondition",
      "display_name": "Vec2UnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2ToScalarUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Norm"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec2ToScalarUnaryOperation",
      "display_name": "Vec2ToScalarUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2BinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Cross"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC2"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC2"
      ],
      "name": "CM_Vec2BinaryOperation",
      "display_name": "Vec2BinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2BinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec2BinaryCondition",
      "display_name": "Vec2BinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2ToScalarBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Dot",
                      "Distance"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec2ToScalarBinaryOperation",
      "display_name": "Vec2ToScalarBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec2ScalarOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Mul",
                      "Div"
                  ]
              ],
              "a": [
                  "VEC2",
                  {
                      "default": [
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "FLOAT"
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC2"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC2"
      ],
      "name": "CM_Vec2ScalarOperation",
      "display_name": "Vec2ScalarOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec2",
      "output_node": false
  },
  "CM_Vec3UnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Neg",
                      "Normalize"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "VEC3"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC3"
      ],
      "name": "CM_Vec3UnaryOperation",
      "display_name": "Vec3UnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3UnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsNotZero",
                      "IsNormalized",
                      "IsNotNormalized"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec3UnaryCondition",
      "display_name": "Vec3UnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3ToScalarUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Norm"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec3ToScalarUnaryOperation",
      "display_name": "Vec3ToScalarUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3BinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Cross"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC3"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC3"
      ],
      "name": "CM_Vec3BinaryOperation",
      "display_name": "Vec3BinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3BinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec3BinaryCondition",
      "display_name": "Vec3BinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3ToScalarBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Dot",
                      "Distance"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec3ToScalarBinaryOperation",
      "display_name": "Vec3ToScalarBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec3ScalarOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Mul",
                      "Div"
                  ]
              ],
              "a": [
                  "VEC3",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "FLOAT"
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC3"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC3"
      ],
      "name": "CM_Vec3ScalarOperation",
      "display_name": "Vec3ScalarOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec3",
      "output_node": false
  },
  "CM_Vec4UnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Neg",
                      "Normalize"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "VEC4"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC4"
      ],
      "name": "CM_Vec4UnaryOperation",
      "display_name": "Vec4UnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4UnaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "IsZero",
                      "IsNotZero",
                      "IsNormalized",
                      "IsNotNormalized"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec4UnaryCondition",
      "display_name": "Vec4UnaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4ToScalarUnaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Norm"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec4ToScalarUnaryOperation",
      "display_name": "Vec4ToScalarUnaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4BinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Add",
                      "Sub",
                      "Cross"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC4"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC4"
      ],
      "name": "CM_Vec4BinaryOperation",
      "display_name": "Vec4BinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4BinaryCondition": {
      "input": {
          "required": {
              "op": [
                  [
                      "Eq",
                      "Neq"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "BOOL"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "BOOL"
      ],
      "name": "CM_Vec4BinaryCondition",
      "display_name": "Vec4BinaryCondition",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4ToScalarBinaryOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Dot",
                      "Distance"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "FLOAT"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "FLOAT"
      ],
      "name": "CM_Vec4ToScalarBinaryOperation",
      "display_name": "Vec4ToScalarBinaryOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_Vec4ScalarOperation": {
      "input": {
          "required": {
              "op": [
                  [
                      "Mul",
                      "Div"
                  ]
              ],
              "a": [
                  "VEC4",
                  {
                      "default": [
                          0.0,
                          0.0,
                          0.0,
                          0.0
                      ]
                  }
              ],
              "b": [
                  "FLOAT"
              ]
          }
      },
      "input_order": {
          "required": [
              "op",
              "a",
              "b"
          ]
      },
      "output": [
          "VEC4"
      ],
      "output_is_list": [
          false
      ],
      "output_name": [
          "VEC4"
      ],
      "name": "CM_Vec4ScalarOperation",
      "display_name": "Vec4ScalarOperation",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/vec4",
      "output_node": false
  },
  "CM_SDXLResolution": {
      "input": {
          "required": {
              "resolution": [
                  [
                      "1024x1024",
                      "1152x896",
                      "896x1152",
                      "1216x832",
                      "832x1216",
                      "1344x768",
                      "768x1344",
                      "1536x640",
                      "640x1536"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "resolution"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "width",
          "height"
      ],
      "name": "CM_SDXLResolution",
      "display_name": "SDXLResolution",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/graphics",
      "output_node": false
  },
  "CM_NearestSDXLResolution": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "width",
          "height"
      ],
      "name": "CM_NearestSDXLResolution",
      "display_name": "NearestSDXLResolution",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/graphics",
      "output_node": false
  },
  "CM_SDXLExtendedResolution": {
      "input": {
          "required": {
              "resolution": [
                  [
                      "512x2048",
                      "512x1984",
                      "512x1920",
                      "512x1856",
                      "576x1792",
                      "576x1728",
                      "576x1664",
                      "640x1600",
                      "640x1536",
                      "704x1472",
                      "704x1408",
                      "704x1344",
                      "768x1344",
                      "768x1280",
                      "832x1216",
                      "832x1152",
                      "896x1152",
                      "896x1088",
                      "960x1088",
                      "960x1024",
                      "1024x1024",
                      "1024x960",
                      "1088x960",
                      "1088x896",
                      "1152x896",
                      "1152x832",
                      "1216x832",
                      "1280x768",
                      "1344x768",
                      "1408x704",
                      "1472x704",
                      "1536x640",
                      "1600x640",
                      "1664x576",
                      "1728x576",
                      "1792x576",
                      "1856x512",
                      "1920x512",
                      "1984x512",
                      "2048x512"
                  ]
              ]
          }
      },
      "input_order": {
          "required": [
              "resolution"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "width",
          "height"
      ],
      "name": "CM_SDXLExtendedResolution",
      "display_name": "SDXLExtendedResolution",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/graphics",
      "output_node": false
  },
  "CM_NearestSDXLExtendedResolution": {
      "input": {
          "required": {
              "image": [
                  "IMAGE"
              ]
          }
      },
      "input_order": {
          "required": [
              "image"
          ]
      },
      "output": [
          "INT",
          "INT"
      ],
      "output_is_list": [
          false,
          false
      ],
      "output_name": [
          "width",
          "height"
      ],
      "name": "CM_NearestSDXLExtendedResolution",
      "display_name": "NearestSDXLExtendedResolution",
      "description": "",
      "python_module": "custom_nodes.ComfyMath",
      "category": "math/graphics",
      "output_node": false
  }
}
